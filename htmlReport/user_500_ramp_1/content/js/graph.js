/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 45790.0, "minX": 0.0, "maxY": 105330.0, "series": [{"data": [[0.0, 45790.0], [0.1, 45790.0], [0.2, 45795.0], [0.3, 45795.0], [0.4, 45804.0], [0.5, 45804.0], [0.6, 45804.0], [0.7, 45829.0], [0.8, 45845.0], [0.9, 45845.0], [1.0, 45957.0], [1.1, 45957.0], [1.2, 46840.0], [1.3, 46840.0], [1.4, 49161.0], [1.5, 49161.0], [1.6, 49177.0], [1.7, 49177.0], [1.8, 49181.0], [1.9, 49181.0], [2.0, 49185.0], [2.1, 49185.0], [2.2, 49191.0], [2.3, 49191.0], [2.4, 49215.0], [2.5, 49215.0], [2.6, 49234.0], [2.7, 49234.0], [2.8, 49234.0], [2.9, 49240.0], [3.0, 49240.0], [3.1, 49275.0], [3.2, 49275.0], [3.3, 49310.0], [3.4, 49310.0], [3.5, 49327.0], [3.6, 49327.0], [3.7, 49343.0], [3.8, 49343.0], [3.9, 49353.0], [4.0, 49353.0], [4.1, 49375.0], [4.2, 49375.0], [4.3, 49387.0], [4.4, 49387.0], [4.5, 49392.0], [4.6, 49392.0], [4.7, 49396.0], [4.8, 49396.0], [4.9, 49404.0], [5.0, 49404.0], [5.1, 49424.0], [5.2, 49424.0], [5.3, 49452.0], [5.4, 49452.0], [5.5, 49496.0], [5.6, 49496.0], [5.7, 49508.0], [5.8, 49508.0], [5.9, 49551.0], [6.0, 49551.0], [6.1, 49557.0], [6.2, 49557.0], [6.3, 49573.0], [6.4, 49573.0], [6.5, 49584.0], [6.6, 49584.0], [6.7, 49598.0], [6.8, 49598.0], [6.9, 49607.0], [7.0, 49607.0], [7.1, 49620.0], [7.2, 49620.0], [7.3, 49653.0], [7.4, 49653.0], [7.5, 49679.0], [7.6, 49679.0], [7.7, 49724.0], [7.8, 49724.0], [7.9, 49756.0], [8.0, 49756.0], [8.1, 49760.0], [8.2, 49760.0], [8.3, 49781.0], [8.4, 49781.0], [8.5, 49841.0], [8.6, 49841.0], [8.7, 49845.0], [8.8, 50565.0], [8.9, 50565.0], [9.0, 50964.0], [9.1, 50964.0], [9.2, 51489.0], [9.3, 51489.0], [9.4, 53191.0], [9.5, 53191.0], [9.6, 53237.0], [9.7, 53237.0], [9.8, 53301.0], [9.9, 53301.0], [10.0, 53344.0], [10.1, 53344.0], [10.2, 53535.0], [10.3, 53535.0], [10.4, 53592.0], [10.5, 53592.0], [10.6, 53609.0], [10.7, 53609.0], [10.8, 53928.0], [10.9, 53928.0], [11.0, 53998.0], [11.1, 53998.0], [11.2, 54650.0], [11.3, 54650.0], [11.4, 55109.0], [11.5, 55109.0], [11.6, 55802.0], [11.7, 55802.0], [11.8, 56013.0], [11.9, 56013.0], [12.0, 56407.0], [12.1, 56407.0], [12.2, 56437.0], [12.3, 56437.0], [12.4, 56468.0], [12.5, 56468.0], [12.6, 57683.0], [12.7, 57683.0], [12.8, 58159.0], [12.9, 58159.0], [13.0, 58358.0], [13.1, 58358.0], [13.2, 58748.0], [13.3, 58748.0], [13.4, 60275.0], [13.5, 60275.0], [13.6, 60331.0], [13.7, 60331.0], [13.8, 60439.0], [13.9, 60439.0], [14.0, 60496.0], [14.1, 60496.0], [14.2, 60734.0], [14.3, 60734.0], [14.4, 60986.0], [14.5, 60986.0], [14.6, 61020.0], [14.7, 61020.0], [14.8, 61101.0], [14.9, 61101.0], [15.0, 61272.0], [15.1, 61272.0], [15.2, 61488.0], [15.3, 61488.0], [15.4, 62239.0], [15.5, 62239.0], [15.6, 62891.0], [15.7, 62891.0], [15.8, 63143.0], [15.9, 63143.0], [16.0, 63623.0], [16.1, 63623.0], [16.2, 63649.0], [16.3, 63649.0], [16.4, 63901.0], [16.5, 63901.0], [16.6, 64415.0], [16.7, 64415.0], [16.8, 64651.0], [16.9, 64651.0], [17.0, 65793.0], [17.1, 65793.0], [17.2, 65840.0], [17.3, 65840.0], [17.4, 66560.0], [17.5, 66560.0], [17.6, 66600.0], [17.7, 66600.0], [17.8, 66755.0], [17.9, 66755.0], [18.0, 66896.0], [18.1, 66896.0], [18.2, 66935.0], [18.3, 66935.0], [18.4, 66980.0], [18.5, 66980.0], [18.6, 67521.0], [18.7, 67521.0], [18.8, 67522.0], [18.9, 67522.0], [19.0, 67607.0], [19.1, 67607.0], [19.2, 67740.0], [19.3, 67740.0], [19.4, 68190.0], [19.5, 68190.0], [19.6, 68235.0], [19.7, 68235.0], [19.8, 68323.0], [19.9, 68323.0], [20.0, 68326.0], [20.1, 68326.0], [20.2, 68444.0], [20.3, 68444.0], [20.4, 68981.0], [20.5, 68981.0], [20.6, 69217.0], [20.7, 69217.0], [20.8, 69268.0], [20.9, 69268.0], [21.0, 69371.0], [21.1, 69371.0], [21.2, 69394.0], [21.3, 69394.0], [21.4, 69445.0], [21.5, 69445.0], [21.6, 69648.0], [21.7, 69648.0], [21.8, 69687.0], [21.9, 69687.0], [22.0, 69810.0], [22.1, 69810.0], [22.2, 69838.0], [22.3, 69838.0], [22.4, 70017.0], [22.5, 70017.0], [22.6, 70028.0], [22.7, 70028.0], [22.8, 70038.0], [22.9, 70038.0], [23.0, 70066.0], [23.1, 70066.0], [23.2, 70071.0], [23.3, 70071.0], [23.4, 70215.0], [23.5, 70215.0], [23.6, 70318.0], [23.7, 70318.0], [23.8, 70418.0], [23.9, 70418.0], [24.0, 70798.0], [24.1, 70798.0], [24.2, 70886.0], [24.3, 70886.0], [24.4, 70927.0], [24.5, 70927.0], [24.6, 71513.0], [24.7, 71513.0], [24.8, 71523.0], [24.9, 71523.0], [25.0, 71531.0], [25.1, 71531.0], [25.2, 71532.0], [25.3, 71532.0], [25.4, 71577.0], [25.5, 71577.0], [25.6, 71585.0], [25.7, 71585.0], [25.8, 71650.0], [25.9, 71650.0], [26.0, 71650.0], [26.1, 71650.0], [26.2, 71676.0], [26.3, 71676.0], [26.4, 71805.0], [26.5, 71805.0], [26.6, 71819.0], [26.7, 71819.0], [26.8, 71929.0], [26.9, 71929.0], [27.0, 72080.0], [27.1, 72080.0], [27.2, 72104.0], [27.3, 72104.0], [27.4, 72247.0], [27.5, 72247.0], [27.6, 72403.0], [27.7, 72403.0], [27.8, 72911.0], [27.9, 72911.0], [28.0, 73022.0], [28.1, 73022.0], [28.2, 73099.0], [28.3, 73099.0], [28.4, 73243.0], [28.5, 73243.0], [28.6, 73292.0], [28.7, 73292.0], [28.8, 73953.0], [28.9, 73953.0], [29.0, 74081.0], [29.1, 74081.0], [29.2, 74949.0], [29.3, 74949.0], [29.4, 75077.0], [29.5, 75077.0], [29.6, 75093.0], [29.7, 75093.0], [29.8, 75124.0], [29.9, 75124.0], [30.0, 75235.0], [30.1, 75235.0], [30.2, 75242.0], [30.3, 75242.0], [30.4, 75247.0], [30.5, 75247.0], [30.6, 75265.0], [30.7, 75265.0], [30.8, 75409.0], [30.9, 75409.0], [31.0, 75419.0], [31.1, 75419.0], [31.2, 75423.0], [31.3, 75423.0], [31.4, 75438.0], [31.5, 75438.0], [31.6, 75503.0], [31.7, 75503.0], [31.8, 75529.0], [31.9, 75529.0], [32.0, 75538.0], [32.1, 75538.0], [32.2, 75546.0], [32.3, 75546.0], [32.4, 76019.0], [32.5, 76019.0], [32.6, 76072.0], [32.7, 76072.0], [32.8, 76103.0], [32.9, 76103.0], [33.0, 76458.0], [33.1, 76458.0], [33.2, 76460.0], [33.3, 76460.0], [33.4, 76837.0], [33.5, 76837.0], [33.6, 76943.0], [33.7, 76943.0], [33.8, 77276.0], [33.9, 77276.0], [34.0, 77396.0], [34.1, 77396.0], [34.2, 77473.0], [34.3, 77473.0], [34.4, 77481.0], [34.5, 77481.0], [34.6, 77616.0], [34.7, 77616.0], [34.8, 77942.0], [34.9, 77942.0], [35.0, 78150.0], [35.1, 78150.0], [35.2, 78153.0], [35.3, 78153.0], [35.4, 78182.0], [35.5, 78182.0], [35.6, 78312.0], [35.7, 78312.0], [35.8, 78370.0], [35.9, 78370.0], [36.0, 78380.0], [36.1, 78380.0], [36.2, 78397.0], [36.3, 78397.0], [36.4, 78583.0], [36.5, 78583.0], [36.6, 78591.0], [36.7, 78591.0], [36.8, 78602.0], [36.9, 78602.0], [37.0, 78608.0], [37.1, 78608.0], [37.2, 78611.0], [37.3, 78611.0], [37.4, 78632.0], [37.5, 78632.0], [37.6, 78723.0], [37.7, 78723.0], [37.8, 78746.0], [37.9, 78746.0], [38.0, 78748.0], [38.1, 78748.0], [38.2, 78794.0], [38.3, 78794.0], [38.4, 78794.0], [38.5, 78795.0], [38.6, 78795.0], [38.7, 78945.0], [38.8, 78945.0], [38.9, 78959.0], [39.0, 78959.0], [39.1, 78975.0], [39.2, 78975.0], [39.3, 79010.0], [39.4, 79010.0], [39.5, 79027.0], [39.6, 79027.0], [39.7, 79039.0], [39.8, 79039.0], [39.9, 79121.0], [40.0, 79121.0], [40.1, 79221.0], [40.2, 79221.0], [40.3, 79330.0], [40.4, 79330.0], [40.5, 79456.0], [40.6, 79456.0], [40.7, 79572.0], [40.8, 79572.0], [40.9, 79718.0], [41.0, 79718.0], [41.1, 79736.0], [41.2, 79736.0], [41.3, 79741.0], [41.4, 79741.0], [41.5, 80132.0], [41.6, 80132.0], [41.7, 80878.0], [41.8, 80878.0], [41.9, 80957.0], [42.0, 80957.0], [42.1, 82191.0], [42.2, 82191.0], [42.3, 82278.0], [42.4, 82278.0], [42.5, 82638.0], [42.6, 82638.0], [42.7, 82771.0], [42.8, 82771.0], [42.9, 83086.0], [43.0, 83086.0], [43.1, 83380.0], [43.2, 83380.0], [43.3, 83979.0], [43.4, 83979.0], [43.5, 84346.0], [43.6, 84346.0], [43.7, 87558.0], [43.8, 87558.0], [43.9, 89121.0], [44.0, 89121.0], [44.1, 90134.0], [44.2, 90134.0], [44.3, 90761.0], [44.4, 90761.0], [44.5, 92115.0], [44.6, 92115.0], [44.7, 92228.0], [44.8, 92228.0], [44.9, 92452.0], [45.0, 92452.0], [45.1, 92591.0], [45.2, 92591.0], [45.3, 92610.0], [45.4, 92610.0], [45.5, 92673.0], [45.6, 92673.0], [45.7, 92921.0], [45.8, 92921.0], [45.9, 93115.0], [46.0, 93115.0], [46.1, 93238.0], [46.2, 93238.0], [46.3, 93464.0], [46.4, 93464.0], [46.5, 93629.0], [46.6, 93629.0], [46.7, 93788.0], [46.8, 93788.0], [46.9, 94064.0], [47.0, 94064.0], [47.1, 94211.0], [47.2, 94211.0], [47.3, 94590.0], [47.4, 94590.0], [47.5, 95093.0], [47.6, 95093.0], [47.7, 95159.0], [47.8, 95159.0], [47.9, 95330.0], [48.0, 95330.0], [48.1, 95457.0], [48.2, 95457.0], [48.3, 95761.0], [48.4, 95761.0], [48.5, 95832.0], [48.6, 95832.0], [48.7, 95849.0], [48.8, 95849.0], [48.9, 96270.0], [49.0, 96270.0], [49.1, 96352.0], [49.2, 96352.0], [49.3, 96398.0], [49.4, 96398.0], [49.5, 96404.0], [49.6, 96404.0], [49.7, 96431.0], [49.8, 96431.0], [49.9, 96486.0], [50.0, 96486.0], [50.1, 96636.0], [50.2, 96636.0], [50.3, 96637.0], [50.4, 96637.0], [50.5, 96993.0], [50.6, 96993.0], [50.7, 97207.0], [50.8, 97207.0], [50.9, 97389.0], [51.0, 97389.0], [51.1, 97438.0], [51.2, 97438.0], [51.3, 97792.0], [51.4, 97792.0], [51.5, 97817.0], [51.6, 97817.0], [51.7, 97824.0], [51.8, 97824.0], [51.9, 97870.0], [52.0, 97870.0], [52.1, 97950.0], [52.2, 97950.0], [52.3, 98028.0], [52.4, 98028.0], [52.5, 98089.0], [52.6, 98089.0], [52.7, 98185.0], [52.8, 98185.0], [52.9, 98210.0], [53.0, 98210.0], [53.1, 98230.0], [53.2, 98230.0], [53.3, 98323.0], [53.4, 98323.0], [53.5, 98338.0], [53.6, 98338.0], [53.7, 98460.0], [53.8, 98460.0], [53.9, 98526.0], [54.0, 98526.0], [54.1, 98555.0], [54.2, 98555.0], [54.3, 98742.0], [54.4, 98742.0], [54.5, 98813.0], [54.6, 98813.0], [54.7, 98933.0], [54.8, 98933.0], [54.9, 98975.0], [55.0, 98975.0], [55.1, 98976.0], [55.2, 98976.0], [55.3, 98984.0], [55.4, 98984.0], [55.5, 98988.0], [55.6, 98988.0], [55.7, 99002.0], [55.8, 99002.0], [55.9, 99039.0], [56.0, 99039.0], [56.1, 99113.0], [56.2, 99113.0], [56.3, 99206.0], [56.4, 99206.0], [56.5, 99213.0], [56.6, 99213.0], [56.7, 99537.0], [56.8, 99537.0], [56.9, 99598.0], [57.0, 99598.0], [57.1, 99635.0], [57.2, 99635.0], [57.3, 99760.0], [57.4, 99760.0], [57.5, 99901.0], [57.6, 99901.0], [57.7, 99914.0], [57.8, 99914.0], [57.9, 99933.0], [58.0, 99933.0], [58.1, 100013.0], [58.2, 100013.0], [58.3, 100064.0], [58.4, 100064.0], [58.5, 100066.0], [58.6, 100066.0], [58.7, 100140.0], [58.8, 100140.0], [58.9, 100150.0], [59.0, 100150.0], [59.1, 100166.0], [59.2, 100166.0], [59.3, 100214.0], [59.4, 100214.0], [59.5, 100317.0], [59.6, 100317.0], [59.7, 100331.0], [59.8, 100331.0], [59.9, 100354.0], [60.0, 100354.0], [60.1, 100354.0], [60.2, 100354.0], [60.3, 100364.0], [60.4, 100364.0], [60.5, 100398.0], [60.6, 100398.0], [60.7, 100399.0], [60.8, 100399.0], [60.9, 100412.0], [61.0, 100412.0], [61.1, 100455.0], [61.2, 100455.0], [61.3, 100467.0], [61.4, 100467.0], [61.5, 100525.0], [61.6, 100525.0], [61.7, 100535.0], [61.8, 100535.0], [61.9, 100549.0], [62.0, 100549.0], [62.1, 100552.0], [62.2, 100552.0], [62.3, 100558.0], [62.4, 100558.0], [62.5, 100564.0], [62.6, 100564.0], [62.7, 100568.0], [62.8, 100568.0], [62.9, 100586.0], [63.0, 100586.0], [63.1, 100608.0], [63.2, 100608.0], [63.3, 100618.0], [63.4, 100618.0], [63.5, 100664.0], [63.6, 100664.0], [63.7, 100704.0], [63.8, 100704.0], [63.9, 100707.0], [64.0, 100707.0], [64.1, 100726.0], [64.2, 100726.0], [64.3, 100749.0], [64.4, 100749.0], [64.5, 100750.0], [64.6, 100750.0], [64.7, 100761.0], [64.8, 100761.0], [64.9, 100766.0], [65.0, 100766.0], [65.1, 100767.0], [65.2, 100767.0], [65.3, 100768.0], [65.4, 100768.0], [65.5, 100818.0], [65.6, 100818.0], [65.7, 100824.0], [65.8, 100824.0], [65.9, 100835.0], [66.0, 100835.0], [66.1, 100865.0], [66.2, 100865.0], [66.3, 100902.0], [66.4, 100902.0], [66.5, 100913.0], [66.6, 100913.0], [66.7, 100984.0], [66.8, 100984.0], [66.9, 101038.0], [67.0, 101038.0], [67.1, 101082.0], [67.2, 101082.0], [67.3, 101163.0], [67.4, 101163.0], [67.5, 101167.0], [67.6, 101167.0], [67.7, 101223.0], [67.8, 101223.0], [67.9, 101242.0], [68.0, 101242.0], [68.1, 101245.0], [68.2, 101245.0], [68.3, 101307.0], [68.4, 101307.0], [68.5, 101344.0], [68.6, 101344.0], [68.7, 101345.0], [68.8, 101345.0], [68.9, 101349.0], [69.0, 101349.0], [69.1, 101363.0], [69.2, 101363.0], [69.3, 101367.0], [69.4, 101367.0], [69.5, 101374.0], [69.6, 101374.0], [69.7, 101376.0], [69.8, 101376.0], [69.9, 101415.0], [70.0, 101415.0], [70.1, 101415.0], [70.2, 101415.0], [70.3, 101422.0], [70.4, 101422.0], [70.5, 101490.0], [70.6, 101490.0], [70.7, 101526.0], [70.8, 101526.0], [70.9, 101572.0], [71.0, 101572.0], [71.1, 101632.0], [71.2, 101632.0], [71.3, 101635.0], [71.4, 101635.0], [71.5, 101637.0], [71.6, 101637.0], [71.7, 101661.0], [71.8, 101661.0], [71.9, 101664.0], [72.0, 101664.0], [72.1, 101687.0], [72.2, 101687.0], [72.3, 101702.0], [72.4, 101702.0], [72.5, 101830.0], [72.6, 101830.0], [72.7, 101832.0], [72.8, 101832.0], [72.9, 101847.0], [73.0, 101847.0], [73.1, 101847.0], [73.2, 101847.0], [73.3, 101848.0], [73.4, 101848.0], [73.5, 101851.0], [73.6, 101851.0], [73.7, 101894.0], [73.8, 101894.0], [73.9, 101907.0], [74.0, 101907.0], [74.1, 101911.0], [74.2, 101911.0], [74.3, 101922.0], [74.4, 101922.0], [74.5, 101923.0], [74.6, 101923.0], [74.7, 101934.0], [74.8, 101934.0], [74.9, 101979.0], [75.0, 101979.0], [75.1, 101995.0], [75.2, 101995.0], [75.3, 102004.0], [75.4, 102004.0], [75.5, 102037.0], [75.6, 102037.0], [75.7, 102057.0], [75.8, 102057.0], [75.9, 102058.0], [76.0, 102058.0], [76.1, 102102.0], [76.2, 102102.0], [76.3, 102104.0], [76.4, 102104.0], [76.5, 102169.0], [76.6, 102169.0], [76.7, 102170.0], [76.8, 102170.0], [76.9, 102173.0], [77.0, 102173.0], [77.1, 102217.0], [77.2, 102217.0], [77.3, 102243.0], [77.4, 102243.0], [77.5, 102266.0], [77.6, 102266.0], [77.7, 102272.0], [77.8, 102272.0], [77.9, 102274.0], [78.0, 102274.0], [78.1, 102285.0], [78.2, 102285.0], [78.3, 102294.0], [78.4, 102294.0], [78.5, 102314.0], [78.6, 102314.0], [78.7, 102328.0], [78.8, 102328.0], [78.9, 102339.0], [79.0, 102339.0], [79.1, 102464.0], [79.2, 102464.0], [79.3, 102480.0], [79.4, 102480.0], [79.5, 102480.0], [79.6, 102480.0], [79.7, 102507.0], [79.8, 102507.0], [79.9, 102569.0], [80.0, 102569.0], [80.1, 102612.0], [80.2, 102612.0], [80.3, 102692.0], [80.4, 102692.0], [80.5, 102735.0], [80.6, 102735.0], [80.7, 102764.0], [80.8, 102764.0], [80.9, 102850.0], [81.0, 102850.0], [81.1, 102861.0], [81.2, 102861.0], [81.3, 102891.0], [81.4, 102891.0], [81.5, 102986.0], [81.6, 102986.0], [81.7, 102994.0], [81.8, 102994.0], [81.9, 103053.0], [82.0, 103053.0], [82.1, 103063.0], [82.2, 103063.0], [82.3, 103090.0], [82.4, 103090.0], [82.5, 103116.0], [82.6, 103116.0], [82.7, 103140.0], [82.8, 103140.0], [82.9, 103150.0], [83.0, 103150.0], [83.1, 103233.0], [83.2, 103233.0], [83.3, 103253.0], [83.4, 103253.0], [83.5, 103271.0], [83.6, 103271.0], [83.7, 103303.0], [83.8, 103303.0], [83.9, 103370.0], [84.0, 103370.0], [84.1, 103387.0], [84.2, 103387.0], [84.3, 103406.0], [84.4, 103406.0], [84.5, 103423.0], [84.6, 103423.0], [84.7, 103426.0], [84.8, 103426.0], [84.9, 103437.0], [85.0, 103437.0], [85.1, 103447.0], [85.2, 103447.0], [85.3, 103452.0], [85.4, 103452.0], [85.5, 103469.0], [85.6, 103469.0], [85.7, 103477.0], [85.8, 103477.0], [85.9, 103482.0], [86.0, 103482.0], [86.1, 103517.0], [86.2, 103517.0], [86.3, 103518.0], [86.4, 103518.0], [86.5, 103533.0], [86.6, 103533.0], [86.7, 103538.0], [86.8, 103538.0], [86.9, 103620.0], [87.0, 103620.0], [87.1, 103623.0], [87.2, 103623.0], [87.3, 103639.0], [87.4, 103639.0], [87.5, 103656.0], [87.6, 103656.0], [87.7, 103690.0], [87.8, 103690.0], [87.9, 103696.0], [88.0, 103696.0], [88.1, 103735.0], [88.2, 103735.0], [88.3, 103753.0], [88.4, 103753.0], [88.5, 103758.0], [88.6, 103758.0], [88.7, 103792.0], [88.8, 103792.0], [88.9, 103799.0], [89.0, 103799.0], [89.1, 103816.0], [89.2, 103816.0], [89.3, 103821.0], [89.4, 103821.0], [89.5, 103825.0], [89.6, 103825.0], [89.7, 103963.0], [89.8, 103963.0], [89.9, 103998.0], [90.0, 103998.0], [90.1, 104028.0], [90.2, 104028.0], [90.3, 104045.0], [90.4, 104045.0], [90.5, 104051.0], [90.6, 104051.0], [90.7, 104088.0], [90.8, 104088.0], [90.9, 104091.0], [91.0, 104091.0], [91.1, 104111.0], [91.2, 104111.0], [91.3, 104124.0], [91.4, 104124.0], [91.5, 104193.0], [91.6, 104193.0], [91.7, 104195.0], [91.8, 104195.0], [91.9, 104271.0], [92.0, 104271.0], [92.1, 104292.0], [92.2, 104292.0], [92.3, 104314.0], [92.4, 104314.0], [92.5, 104320.0], [92.6, 104320.0], [92.7, 104364.0], [92.8, 104364.0], [92.9, 104365.0], [93.0, 104365.0], [93.1, 104367.0], [93.2, 104367.0], [93.3, 104377.0], [93.4, 104377.0], [93.5, 104389.0], [93.6, 104389.0], [93.7, 104399.0], [93.8, 104399.0], [93.9, 104406.0], [94.0, 104406.0], [94.1, 104416.0], [94.2, 104416.0], [94.3, 104427.0], [94.4, 104427.0], [94.5, 104489.0], [94.6, 104489.0], [94.7, 104491.0], [94.8, 104491.0], [94.9, 104496.0], [95.0, 104496.0], [95.1, 104535.0], [95.2, 104535.0], [95.3, 104546.0], [95.4, 104546.0], [95.5, 104642.0], [95.6, 104642.0], [95.7, 104652.0], [95.8, 104652.0], [95.9, 104683.0], [96.0, 104683.0], [96.1, 104726.0], [96.2, 104726.0], [96.3, 104734.0], [96.4, 104734.0], [96.5, 104735.0], [96.6, 104735.0], [96.7, 104748.0], [96.8, 104748.0], [96.9, 104832.0], [97.0, 104832.0], [97.1, 104845.0], [97.2, 104845.0], [97.3, 104846.0], [97.4, 104846.0], [97.5, 104847.0], [97.6, 104847.0], [97.7, 104887.0], [97.8, 104887.0], [97.9, 104898.0], [98.0, 104898.0], [98.1, 104898.0], [98.2, 104898.0], [98.3, 104922.0], [98.4, 104922.0], [98.5, 104927.0], [98.6, 104927.0], [98.7, 104970.0], [98.8, 104970.0], [98.9, 104990.0], [99.0, 104990.0], [99.1, 105052.0], [99.2, 105052.0], [99.3, 105054.0], [99.4, 105054.0], [99.5, 105139.0], [99.6, 105139.0], [99.7, 105182.0], [99.8, 105182.0], [99.9, 105330.0], [100.0, 105330.0]], "isOverall": false, "label": "Create Issue User 400 Ramp 1", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 45700.0, "maxY": 9.0, "series": [{"data": [[66700.0, 1.0], [67500.0, 2.0], [68300.0, 2.0], [70700.0, 1.0], [71500.0, 6.0], [73900.0, 1.0], [75500.0, 4.0], [77900.0, 1.0], [78700.0, 5.0], [79500.0, 1.0], [82700.0, 1.0], [84300.0, 1.0], [87500.0, 1.0], [89100.0, 1.0], [90700.0, 1.0], [93100.0, 1.0], [96300.0, 2.0], [97900.0, 1.0], [98700.0, 1.0], [99500.0, 2.0], [100300.0, 7.0], [101100.0, 2.0], [101900.0, 7.0], [102700.0, 2.0], [103500.0, 4.0], [104300.0, 8.0], [105100.0, 2.0], [45700.0, 2.0], [49300.0, 8.0], [49700.0, 4.0], [50500.0, 1.0], [50900.0, 1.0], [53300.0, 2.0], [58100.0, 1.0], [60900.0, 1.0], [65800.0, 1.0], [66600.0, 1.0], [68200.0, 1.0], [69800.0, 2.0], [73000.0, 2.0], [72200.0, 1.0], [75400.0, 4.0], [78600.0, 4.0], [79400.0, 1.0], [82600.0, 1.0], [92200.0, 1.0], [95400.0, 1.0], [96200.0, 1.0], [97800.0, 3.0], [100200.0, 1.0], [101000.0, 2.0], [101800.0, 7.0], [102600.0, 2.0], [103400.0, 9.0], [104200.0, 2.0], [105000.0, 2.0], [65700.0, 1.0], [66500.0, 1.0], [68100.0, 1.0], [68900.0, 1.0], [72100.0, 1.0], [72900.0, 1.0], [76100.0, 1.0], [76900.0, 1.0], [78500.0, 2.0], [79300.0, 1.0], [80100.0, 1.0], [80900.0, 1.0], [83300.0, 1.0], [92100.0, 1.0], [92900.0, 1.0], [93700.0, 1.0], [94500.0, 1.0], [95300.0, 1.0], [96900.0, 1.0], [97700.0, 1.0], [98500.0, 2.0], [100100.0, 3.0], [100900.0, 3.0], [101700.0, 1.0], [102500.0, 2.0], [103300.0, 3.0], [104100.0, 4.0], [104900.0, 4.0], [46800.0, 1.0], [49200.0, 4.0], [49600.0, 4.0], [53200.0, 1.0], [53600.0, 1.0], [56000.0, 1.0], [56400.0, 3.0], [57600.0, 1.0], [60400.0, 2.0], [61200.0, 1.0], [62800.0, 1.0], [63600.0, 2.0], [64400.0, 1.0], [69600.0, 2.0], [70400.0, 1.0], [72000.0, 1.0], [75200.0, 4.0], [76000.0, 2.0], [76800.0, 1.0], [77600.0, 1.0], [79200.0, 1.0], [80800.0, 1.0], [93600.0, 1.0], [98400.0, 1.0], [99200.0, 2.0], [100000.0, 3.0], [100800.0, 4.0], [101600.0, 6.0], [102400.0, 3.0], [103200.0, 3.0], [104000.0, 5.0], [104800.0, 7.0], [70300.0, 1.0], [71900.0, 1.0], [75100.0, 1.0], [78300.0, 4.0], [79100.0, 1.0], [83900.0, 1.0], [95100.0, 1.0], [98300.0, 2.0], [99100.0, 1.0], [99900.0, 3.0], [100700.0, 9.0], [101500.0, 2.0], [102300.0, 3.0], [103100.0, 3.0], [103900.0, 2.0], [104700.0, 4.0], [45900.0, 1.0], [49100.0, 5.0], [49500.0, 6.0], [53100.0, 1.0], [53500.0, 2.0], [53900.0, 2.0], [55100.0, 1.0], [58300.0, 1.0], [58700.0, 1.0], [60300.0, 1.0], [60700.0, 1.0], [61100.0, 1.0], [63100.0, 1.0], [63900.0, 1.0], [69400.0, 1.0], [70200.0, 1.0], [71800.0, 2.0], [75000.0, 2.0], [77400.0, 2.0], [79000.0, 3.0], [82200.0, 1.0], [83000.0, 1.0], [92600.0, 2.0], [93400.0, 1.0], [94200.0, 1.0], [95000.0, 1.0], [95800.0, 2.0], [96600.0, 2.0], [97400.0, 1.0], [98200.0, 2.0], [99000.0, 2.0], [100600.0, 3.0], [101400.0, 4.0], [102200.0, 7.0], [103000.0, 3.0], [103800.0, 3.0], [104600.0, 3.0], [66900.0, 2.0], [67700.0, 1.0], [69300.0, 2.0], [70900.0, 1.0], [74900.0, 1.0], [77300.0, 1.0], [78100.0, 3.0], [78900.0, 3.0], [79700.0, 3.0], [82100.0, 1.0], [90100.0, 1.0], [92500.0, 1.0], [95700.0, 1.0], [97300.0, 1.0], [98100.0, 1.0], [98900.0, 5.0], [99700.0, 1.0], [100500.0, 8.0], [101300.0, 8.0], [102100.0, 5.0], [102900.0, 2.0], [103700.0, 5.0], [104500.0, 2.0], [105300.0, 1.0], [45800.0, 3.0], [49400.0, 4.0], [49800.0, 2.0], [51400.0, 1.0], [54600.0, 1.0], [55800.0, 1.0], [61000.0, 1.0], [60200.0, 1.0], [61400.0, 1.0], [62200.0, 1.0], [64600.0, 1.0], [69200.0, 2.0], [66800.0, 1.0], [67600.0, 1.0], [68400.0, 1.0], [70000.0, 5.0], [70800.0, 1.0], [71600.0, 3.0], [73200.0, 2.0], [72400.0, 1.0], [74000.0, 1.0], [76400.0, 2.0], [77200.0, 1.0], [92400.0, 1.0], [93200.0, 1.0], [94000.0, 1.0], [96400.0, 3.0], [97200.0, 1.0], [98000.0, 2.0], [98800.0, 1.0], [99600.0, 1.0], [100400.0, 3.0], [101200.0, 3.0], [102000.0, 4.0], [102800.0, 3.0], [103600.0, 6.0], [104400.0, 6.0]], "isOverall": false, "label": "Create Issue User 400 Ramp 1", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 105300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 500.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 500.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 500.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 209.5, "minX": 1.71585114E12, "maxY": 459.5121951219513, "series": [{"data": [[1.7158512E12, 209.5], [1.71585114E12, 459.5121951219513]], "isOverall": false, "label": "User 500 Ramp 1", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7158512E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 45792.5, "minX": 1.0, "maxY": 105330.0, "series": [{"data": [[2.0, 105182.0], [3.0, 104922.0], [4.0, 104898.0], [5.0, 105054.0], [6.0, 104887.0], [7.0, 104970.0], [8.0, 104832.0], [9.0, 105052.0], [10.0, 104748.0], [11.0, 104734.0], [12.0, 105139.0], [13.0, 104726.0], [14.0, 104898.0], [15.0, 104927.0], [16.0, 104990.0], [17.0, 104683.0], [18.0, 104845.0], [19.0, 104847.0], [20.0, 104546.0], [21.0, 104496.0], [22.0, 104642.0], [23.0, 104491.0], [24.0, 104846.0], [25.0, 104427.0], [26.0, 104652.0], [27.0, 104416.0], [28.0, 104365.0], [29.0, 104406.0], [30.0, 104320.0], [31.0, 104314.0], [33.0, 104735.0], [32.0, 104367.0], [35.0, 104292.0], [34.0, 104271.0], [37.0, 104091.0], [36.0, 104399.0], [39.0, 104364.0], [38.0, 104535.0], [41.0, 104051.0], [40.0, 104111.0], [43.0, 104124.0], [42.0, 104088.0], [45.0, 104377.0], [44.0, 104489.0], [47.0, 104389.0], [46.0, 103998.0], [49.0, 104028.0], [48.0, 104045.0], [51.0, 103792.0], [50.0, 103816.0], [53.0, 103821.0], [52.0, 103825.0], [55.0, 103753.0], [54.0, 104195.0], [57.0, 103690.0], [56.0, 104193.0], [59.0, 103538.0], [58.0, 103639.0], [61.0, 103696.0], [60.0, 103799.0], [63.0, 103469.0], [62.0, 103482.0], [67.0, 103406.0], [66.0, 103656.0], [65.0, 103623.0], [64.0, 103518.0], [71.0, 103477.0], [70.0, 103533.0], [69.0, 103452.0], [68.0, 103963.0], [75.0, 103517.0], [74.0, 103423.0], [73.0, 103620.0], [72.0, 103303.0], [79.0, 103387.0], [78.0, 103150.0], [77.0, 103758.0], [76.0, 103271.0], [83.0, 103233.0], [82.0, 103253.0], [81.0, 103735.0], [80.0, 103437.0], [87.0, 102986.0], [86.0, 103370.0], [85.0, 103053.0], [84.0, 103063.0], [91.0, 102994.0], [90.0, 103447.0], [89.0, 103116.0], [88.0, 103140.0], [95.0, 102850.0], [94.0, 102735.0], [93.0, 103426.0], [92.0, 102891.0], [99.0, 102692.0], [98.0, 102612.0], [97.0, 102569.0], [96.0, 103090.0], [103.0, 102507.0], [102.0, 102480.0], [101.0, 102861.0], [100.0, 102464.0], [107.0, 102764.0], [106.0, 102339.0], [105.0, 102480.0], [104.0, 102169.0], [111.0, 102104.0], [110.0, 102285.0], [109.0, 102294.0], [108.0, 102173.0], [115.0, 102266.0], [114.0, 102274.0], [113.0, 102057.0], [112.0, 102314.0], [119.0, 101934.0], [118.0, 101911.0], [117.0, 102243.0], [116.0, 102170.0], [123.0, 102328.0], [122.0, 101995.0], [121.0, 101979.0], [120.0, 102037.0], [127.0, 101907.0], [126.0, 101848.0], [125.0, 102102.0], [124.0, 101830.0], [135.0, 101851.0], [134.0, 102004.0], [133.0, 101847.0], [132.0, 102217.0], [131.0, 101923.0], [130.0, 101832.0], [129.0, 101894.0], [128.0, 102058.0], [143.0, 101572.0], [142.0, 101687.0], [141.0, 101635.0], [140.0, 101526.0], [139.0, 101664.0], [138.0, 101922.0], [137.0, 101661.0], [136.0, 102272.0], [151.0, 101242.0], [150.0, 101702.0], [149.0, 101847.0], [148.0, 101363.0], [147.0, 101374.0], [146.0, 101376.0], [145.0, 101637.0], [144.0, 101632.0], [159.0, 101422.0], [158.0, 101367.0], [157.0, 101345.0], [156.0, 101167.0], [155.0, 101490.0], [154.0, 101349.0], [153.0, 101415.0], [152.0, 101415.0], [167.0, 100766.0], [166.0, 100824.0], [165.0, 100984.0], [164.0, 101082.0], [163.0, 101163.0], [162.0, 101344.0], [161.0, 101038.0], [160.0, 101223.0], [175.0, 100913.0], [174.0, 100818.0], [173.0, 100865.0], [172.0, 100835.0], [171.0, 100749.0], [170.0, 101307.0], [169.0, 101245.0], [168.0, 100902.0], [183.0, 100726.0], [182.0, 100455.0], [181.0, 100564.0], [180.0, 100608.0], [179.0, 100707.0], [178.0, 100568.0], [177.0, 100552.0], [176.0, 100767.0], [191.0, 100399.0], [190.0, 100768.0], [189.0, 100558.0], [188.0, 100664.0], [187.0, 100586.0], [186.0, 100618.0], [185.0, 100750.0], [184.0, 100467.0], [199.0, 100331.0], [198.0, 100549.0], [197.0, 100704.0], [196.0, 100166.0], [195.0, 100214.0], [194.0, 100354.0], [193.0, 100761.0], [192.0, 100535.0], [207.0, 100066.0], [206.0, 100013.0], [205.0, 100140.0], [204.0, 99933.0], [203.0, 100412.0], [202.0, 100525.0], [201.0, 100364.0], [200.0, 100317.0], [215.0, 99635.0], [214.0, 99914.0], [213.0, 99760.0], [212.0, 99901.0], [211.0, 100064.0], [210.0, 100398.0], [209.0, 100354.0], [208.0, 100150.0], [223.0, 98813.0], [222.0, 99039.0], [221.0, 99206.0], [220.0, 98988.0], [219.0, 98975.0], [218.0, 99213.0], [217.0, 99537.0], [216.0, 99598.0], [231.0, 98210.0], [230.0, 98555.0], [229.0, 98984.0], [228.0, 98742.0], [227.0, 98933.0], [226.0, 99002.0], [225.0, 99113.0], [224.0, 98976.0], [239.0, 97824.0], [238.0, 98185.0], [237.0, 98230.0], [236.0, 98338.0], [235.0, 98028.0], [234.0, 98323.0], [233.0, 98460.0], [232.0, 98526.0], [247.0, 97207.0], [246.0, 97438.0], [245.0, 97389.0], [244.0, 97870.0], [243.0, 97792.0], [242.0, 97950.0], [241.0, 97817.0], [240.0, 98089.0], [255.0, 96352.0], [254.0, 96270.0], [253.0, 96636.0], [252.0, 96398.0], [251.0, 96404.0], [250.0, 96486.0], [249.0, 96637.0], [248.0, 96993.0], [270.0, 93238.0], [271.0, 93115.0], [269.0, 93464.0], [268.0, 93629.0], [267.0, 94064.0], [266.0, 93788.0], [265.0, 94211.0], [264.0, 94590.0], [263.0, 95159.0], [257.0, 95832.0], [256.0, 96431.0], [259.0, 95849.0], [258.0, 95761.0], [262.0, 95093.0], [261.0, 95457.0], [260.0, 95330.0], [286.0, 83086.0], [287.0, 82771.0], [285.0, 83380.0], [284.0, 83979.0], [283.0, 84346.0], [282.0, 87558.0], [281.0, 89121.0], [280.0, 90134.0], [279.0, 90761.0], [273.0, 92591.0], [272.0, 92921.0], [275.0, 92610.0], [274.0, 92673.0], [278.0, 92115.0], [277.0, 92452.0], [276.0, 92228.0], [302.0, 79121.0], [303.0, 78945.0], [301.0, 79027.0], [300.0, 79330.0], [299.0, 79221.0], [298.0, 79456.0], [297.0, 79572.0], [296.0, 79741.0], [295.0, 79736.0], [289.0, 82278.0], [288.0, 82638.0], [291.0, 80957.0], [290.0, 82191.0], [294.0, 79718.0], [293.0, 80132.0], [292.0, 80878.0], [318.0, 78602.0], [319.0, 78608.0], [317.0, 78611.0], [316.0, 78380.0], [315.0, 78632.0], [314.0, 78746.0], [313.0, 78795.0], [312.0, 78583.0], [311.0, 78723.0], [305.0, 79010.0], [304.0, 78975.0], [307.0, 79039.0], [306.0, 78959.0], [310.0, 78591.0], [309.0, 78794.0], [308.0, 78748.0], [334.0, 76460.0], [335.0, 76458.0], [333.0, 76837.0], [332.0, 76943.0], [331.0, 77276.0], [330.0, 77616.0], [329.0, 77473.0], [328.0, 77481.0], [327.0, 77396.0], [321.0, 78370.0], [320.0, 78312.0], [323.0, 78150.0], [322.0, 78397.0], [326.0, 77942.0], [325.0, 78182.0], [324.0, 78153.0], [350.0, 75077.0], [351.0, 75247.0], [349.0, 75093.0], [348.0, 75409.0], [347.0, 75235.0], [346.0, 75419.0], [345.0, 75529.0], [344.0, 75242.0], [343.0, 75438.0], [337.0, 76103.0], [336.0, 76019.0], [339.0, 75546.0], [338.0, 76072.0], [342.0, 75423.0], [341.0, 75503.0], [340.0, 75538.0], [366.0, 71929.0], [367.0, 71805.0], [365.0, 72080.0], [364.0, 72104.0], [363.0, 72247.0], [362.0, 72403.0], [361.0, 72911.0], [360.0, 73022.0], [359.0, 73292.0], [353.0, 75124.0], [352.0, 75265.0], [355.0, 74081.0], [354.0, 74949.0], [358.0, 73099.0], [357.0, 73243.0], [356.0, 73953.0], [382.0, 70066.0], [383.0, 70318.0], [381.0, 70418.0], [380.0, 70798.0], [379.0, 70886.0], [378.0, 70927.0], [377.0, 71531.0], [376.0, 71577.0], [375.0, 71585.0], [369.0, 71650.0], [368.0, 71819.0], [371.0, 71676.0], [370.0, 71650.0], [374.0, 71523.0], [373.0, 71513.0], [372.0, 71532.0], [398.0, 68981.0], [399.0, 68444.0], [397.0, 69217.0], [396.0, 69268.0], [395.0, 69371.0], [394.0, 69394.0], [393.0, 69445.0], [392.0, 69687.0], [391.0, 69648.0], [385.0, 70017.0], [384.0, 70215.0], [387.0, 70038.0], [386.0, 70071.0], [390.0, 69810.0], [389.0, 69838.0], [388.0, 70028.0], [414.0, 65840.0], [415.0, 65793.0], [413.0, 66600.0], [412.0, 66560.0], [411.0, 66755.0], [410.0, 66935.0], [409.0, 66896.0], [408.0, 66980.0], [407.0, 67522.0], [401.0, 68323.0], [400.0, 68326.0], [403.0, 68235.0], [402.0, 68190.0], [406.0, 67521.0], [405.0, 67607.0], [404.0, 67740.0], [430.0, 60496.0], [431.0, 60439.0], [429.0, 60734.0], [428.0, 60986.0], [427.0, 61020.0], [426.0, 61101.0], [425.0, 61272.0], [424.0, 61488.0], [423.0, 62239.0], [417.0, 64415.0], [416.0, 64651.0], [419.0, 63649.0], [418.0, 63901.0], [422.0, 62891.0], [421.0, 63143.0], [420.0, 63623.0], [446.0, 53928.0], [447.0, 53592.0], [445.0, 53998.0], [444.0, 54650.0], [443.0, 55109.0], [442.0, 55802.0], [441.0, 56013.0], [440.0, 56407.0], [439.0, 56468.0], [433.0, 60275.0], [432.0, 60331.0], [435.0, 58358.0], [434.0, 58748.0], [438.0, 56437.0], [437.0, 57683.0], [436.0, 58159.0], [462.0, 49724.0], [463.0, 49679.0], [461.0, 49760.0], [460.0, 49781.0], [459.0, 49756.0], [458.0, 49841.0], [457.0, 49845.0], [456.0, 50565.0], [455.0, 50964.0], [449.0, 53535.0], [448.0, 53609.0], [451.0, 53344.0], [450.0, 53301.0], [454.0, 51489.0], [453.0, 53191.0], [452.0, 53237.0], [478.0, 49396.0], [479.0, 49387.0], [477.0, 49404.0], [476.0, 49392.0], [475.0, 49424.0], [474.0, 49452.0], [473.0, 49496.0], [472.0, 49508.0], [471.0, 49557.0], [465.0, 49620.0], [464.0, 49653.0], [467.0, 49598.0], [466.0, 49607.0], [470.0, 49551.0], [469.0, 49573.0], [468.0, 49584.0], [494.0, 46840.0], [495.0, 45957.0], [493.0, 49161.0], [492.0, 49177.0], [491.0, 49181.0], [490.0, 49191.0], [489.0, 49215.0], [488.0, 49185.0], [487.0, 49234.0], [481.0, 49353.0], [480.0, 49375.0], [483.0, 49327.0], [482.0, 49343.0], [486.0, 49240.0], [485.0, 49275.0], [484.0, 49310.0], [500.0, 45792.5], [498.0, 45804.0], [497.0, 45829.0], [496.0, 45845.0], [1.0, 105330.0]], "isOverall": false, "label": "Create Issue User 400 Ramp 1", "isController": false}, {"data": [[250.50199999999967, 85843.72000000004]], "isOverall": false, "label": "Create Issue User 400 Ramp 1-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 2280.9666666666667, "minX": 1.71585114E12, "maxY": 20180.733333333334, "series": [{"data": [[1.7158512E12, 20180.733333333334], [1.71585114E12, 3187.4]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.7158512E12, 11627.366666666667], [1.71585114E12, 2280.9666666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7158512E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 52857.182926829264, "minX": 1.71585114E12, "maxY": 92314.76315789479, "series": [{"data": [[1.7158512E12, 92314.76315789479], [1.71585114E12, 52857.182926829264]], "isOverall": false, "label": "Create Issue User 400 Ramp 1", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7158512E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 52856.75609756098, "minX": 1.71585114E12, "maxY": 92314.523923445, "series": [{"data": [[1.7158512E12, 92314.523923445], [1.71585114E12, 52856.75609756098]], "isOverall": false, "label": "Create Issue User 400 Ramp 1", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7158512E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 2.940191387559808, "minX": 1.71585114E12, "maxY": 28.682926829268297, "series": [{"data": [[1.7158512E12, 2.940191387559808], [1.71585114E12, 28.682926829268297]], "isOverall": false, "label": "Create Issue User 400 Ramp 1", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7158512E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 45790.0, "minX": 1.71585114E12, "maxY": 105330.0, "series": [{"data": [[1.7158512E12, 105330.0], [1.71585114E12, 63649.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.7158512E12, 63901.0], [1.71585114E12, 45790.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.7158512E12, 104202.6], [1.71585114E12, 61076.7]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.7158512E12, 105053.62], [1.71585114E12, 63649.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.7158512E12, 100038.5], [1.71585114E12, 49770.5]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.7158512E12, 104685.15], [1.71585114E12, 62793.2]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7158512E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 49404.0, "minX": 1.0, "maxY": 103620.0, "series": [{"data": [[2.0, 64531.0], [8.0, 70668.5], [35.0, 49404.0], [10.0, 82874.0], [41.0, 100750.0], [43.0, 103620.0], [11.0, 78312.0], [3.0, 61324.5], [15.0, 86874.0], [1.0, 88339.5], [4.0, 81385.0], [5.0, 60439.0], [20.0, 89392.5], [6.0, 76087.5], [27.0, 102569.0], [7.0, 73100.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 43.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 49404.0, "minX": 1.0, "maxY": 103620.0, "series": [{"data": [[2.0, 64531.0], [8.0, 70668.0], [35.0, 49404.0], [10.0, 82874.0], [41.0, 100749.0], [43.0, 103620.0], [11.0, 78312.0], [3.0, 61324.5], [15.0, 86874.0], [1.0, 88339.0], [4.0, 81384.0], [5.0, 60439.0], [20.0, 89392.5], [6.0, 76087.0], [27.0, 102568.0], [7.0, 73099.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 43.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 8.333333333333334, "minX": 1.71585108E12, "maxY": 8.333333333333334, "series": [{"data": [[1.71585108E12, 8.333333333333334]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71585108E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.3666666666666667, "minX": 1.71585114E12, "maxY": 6.966666666666667, "series": [{"data": [[1.7158512E12, 6.966666666666667], [1.71585114E12, 1.3666666666666667]], "isOverall": false, "label": "201", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7158512E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.3666666666666667, "minX": 1.71585114E12, "maxY": 6.966666666666667, "series": [{"data": [[1.7158512E12, 6.966666666666667], [1.71585114E12, 1.3666666666666667]], "isOverall": false, "label": "Create Issue User 400 Ramp 1-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7158512E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.3666666666666667, "minX": 1.71585114E12, "maxY": 6.966666666666667, "series": [{"data": [[1.7158512E12, 6.966666666666667], [1.71585114E12, 1.3666666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7158512E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

