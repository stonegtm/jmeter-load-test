/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 80510.0, "minX": 0.0, "maxY": 126209.0, "series": [{"data": [[0.0, 80510.0], [0.1, 80510.0], [0.2, 80534.0], [0.3, 80534.0], [0.4, 80544.0], [0.5, 80544.0], [0.6, 80560.0], [0.7, 80560.0], [0.8, 80594.0], [0.9, 80594.0], [1.0, 80626.0], [1.1, 80630.0], [1.2, 80630.0], [1.3, 80639.0], [1.4, 80639.0], [1.5, 80657.0], [1.6, 80657.0], [1.7, 80658.0], [1.8, 80658.0], [1.9, 80754.0], [2.0, 80754.0], [2.1, 80760.0], [2.2, 80763.0], [2.3, 80763.0], [2.4, 80776.0], [2.5, 80776.0], [2.6, 80824.0], [2.7, 80824.0], [2.8, 80826.0], [2.9, 80826.0], [3.0, 80850.0], [3.1, 80850.0], [3.2, 80850.0], [3.3, 80864.0], [3.4, 80864.0], [3.5, 80937.0], [3.6, 80937.0], [3.7, 80968.0], [3.8, 80968.0], [3.9, 80975.0], [4.0, 81033.0], [4.1, 81033.0], [4.2, 81048.0], [4.3, 81048.0], [4.4, 81089.0], [4.5, 81089.0], [4.6, 81099.0], [4.7, 81099.0], [4.8, 81130.0], [4.9, 81130.0], [5.0, 81168.0], [5.1, 81184.0], [5.2, 81184.0], [5.3, 81207.0], [5.4, 81207.0], [5.5, 81224.0], [5.6, 81224.0], [5.7, 81254.0], [5.8, 81254.0], [5.9, 81305.0], [6.0, 81350.0], [6.1, 81350.0], [6.2, 81352.0], [6.3, 81352.0], [6.4, 81402.0], [6.5, 81402.0], [6.6, 81460.0], [6.7, 81460.0], [6.8, 81469.0], [6.9, 81469.0], [7.0, 81501.0], [7.1, 81513.0], [7.2, 81513.0], [7.3, 81526.0], [7.4, 81526.0], [7.5, 81552.0], [7.6, 81552.0], [7.7, 81607.0], [7.8, 81607.0], [7.9, 81656.0], [8.0, 81725.0], [8.1, 81725.0], [8.2, 81739.0], [8.3, 81739.0], [8.4, 81763.0], [8.5, 81763.0], [8.6, 81774.0], [8.7, 81774.0], [8.8, 81784.0], [8.9, 81784.0], [9.0, 81793.0], [9.1, 81804.0], [9.2, 81804.0], [9.3, 81814.0], [9.4, 81814.0], [9.5, 81996.0], [9.6, 81996.0], [9.7, 82010.0], [9.8, 82010.0], [9.9, 82013.0], [10.0, 82022.0], [10.1, 82022.0], [10.2, 82034.0], [10.3, 82034.0], [10.4, 82173.0], [10.5, 82173.0], [10.6, 82187.0], [10.7, 82187.0], [10.8, 82206.0], [10.9, 82206.0], [11.0, 82227.0], [11.1, 82236.0], [11.2, 82236.0], [11.3, 82255.0], [11.4, 82255.0], [11.5, 82290.0], [11.6, 82290.0], [11.7, 82299.0], [11.8, 82299.0], [11.9, 82364.0], [12.0, 82390.0], [12.1, 82390.0], [12.2, 82398.0], [12.3, 82398.0], [12.4, 82408.0], [12.5, 82408.0], [12.6, 82409.0], [12.7, 82409.0], [12.8, 82446.0], [12.9, 82446.0], [13.0, 82454.0], [13.1, 82471.0], [13.2, 82471.0], [13.3, 82526.0], [13.4, 82526.0], [13.5, 82553.0], [13.6, 82553.0], [13.7, 82612.0], [13.8, 82612.0], [13.9, 82628.0], [14.0, 82694.0], [14.1, 82694.0], [14.2, 82697.0], [14.3, 82697.0], [14.4, 82705.0], [14.5, 82705.0], [14.6, 82741.0], [14.7, 82741.0], [14.8, 82744.0], [14.9, 82744.0], [15.0, 82804.0], [15.1, 82807.0], [15.2, 82807.0], [15.3, 82843.0], [15.4, 82843.0], [15.5, 82845.0], [15.6, 82845.0], [15.7, 82885.0], [15.8, 82885.0], [15.9, 82892.0], [16.0, 82909.0], [16.1, 82909.0], [16.2, 82955.0], [16.3, 82955.0], [16.4, 82967.0], [16.5, 82967.0], [16.6, 82989.0], [16.7, 82989.0], [16.8, 83036.0], [16.9, 83036.0], [17.0, 83061.0], [17.1, 83111.0], [17.2, 83111.0], [17.3, 83146.0], [17.4, 83146.0], [17.5, 83159.0], [17.6, 83159.0], [17.7, 83183.0], [17.8, 83183.0], [17.9, 83252.0], [18.0, 83252.0], [18.1, 83272.0], [18.2, 83282.0], [18.3, 83282.0], [18.4, 83329.0], [18.5, 83329.0], [18.6, 83343.0], [18.7, 83343.0], [18.8, 83344.0], [18.9, 83344.0], [19.0, 83359.0], [19.1, 83364.0], [19.2, 83364.0], [19.3, 83384.0], [19.4, 83384.0], [19.5, 83448.0], [19.6, 83448.0], [19.7, 83471.0], [19.8, 83471.0], [19.9, 83498.0], [20.0, 83498.0], [20.1, 83525.0], [20.2, 83569.0], [20.3, 83569.0], [20.4, 83572.0], [20.5, 83572.0], [20.6, 83577.0], [20.7, 83577.0], [20.8, 83622.0], [20.9, 83622.0], [21.0, 83634.0], [21.1, 83697.0], [21.2, 83697.0], [21.3, 83747.0], [21.4, 83747.0], [21.5, 83748.0], [21.6, 83748.0], [21.7, 83895.0], [21.8, 83895.0], [21.9, 84070.0], [22.0, 84070.0], [22.1, 84127.0], [22.2, 84165.0], [22.3, 84165.0], [22.4, 84498.0], [22.5, 84498.0], [22.6, 84957.0], [22.7, 84957.0], [22.8, 85309.0], [22.9, 85309.0], [23.0, 85353.0], [23.1, 85612.0], [23.2, 85612.0], [23.3, 85620.0], [23.4, 85620.0], [23.5, 85826.0], [23.6, 85826.0], [23.7, 85864.0], [23.8, 85864.0], [23.9, 85985.0], [24.0, 85985.0], [24.1, 86267.0], [24.2, 86339.0], [24.3, 86339.0], [24.4, 86415.0], [24.5, 86415.0], [24.6, 86424.0], [24.7, 86424.0], [24.8, 86487.0], [24.9, 86487.0], [25.0, 86686.0], [25.1, 86796.0], [25.2, 86796.0], [25.3, 86977.0], [25.4, 86977.0], [25.5, 86990.0], [25.6, 86990.0], [25.7, 87050.0], [25.8, 87050.0], [25.9, 87178.0], [26.0, 87178.0], [26.1, 87182.0], [26.2, 87669.0], [26.3, 87669.0], [26.4, 87691.0], [26.5, 87691.0], [26.6, 88389.0], [26.7, 88389.0], [26.8, 88733.0], [26.9, 88733.0], [27.0, 88854.0], [27.1, 88931.0], [27.2, 88931.0], [27.3, 88999.0], [27.4, 88999.0], [27.5, 89019.0], [27.6, 89019.0], [27.7, 89075.0], [27.8, 89075.0], [27.9, 89272.0], [28.0, 89272.0], [28.1, 89276.0], [28.2, 89346.0], [28.3, 89346.0], [28.4, 89502.0], [28.5, 89502.0], [28.6, 89562.0], [28.7, 89562.0], [28.8, 89625.0], [28.9, 89625.0], [29.0, 89683.0], [29.1, 89692.0], [29.2, 89692.0], [29.3, 89693.0], [29.4, 89693.0], [29.5, 89694.0], [29.6, 89694.0], [29.7, 89748.0], [29.8, 89748.0], [29.9, 89787.0], [30.0, 89787.0], [30.1, 89847.0], [30.2, 89848.0], [30.3, 89848.0], [30.4, 89955.0], [30.5, 89955.0], [30.6, 90594.0], [30.7, 90594.0], [30.8, 90635.0], [30.9, 90635.0], [31.0, 91180.0], [31.1, 91328.0], [31.2, 91328.0], [31.3, 91332.0], [31.4, 91332.0], [31.5, 91337.0], [31.6, 91337.0], [31.7, 91760.0], [31.8, 91760.0], [31.9, 91852.0], [32.0, 91852.0], [32.1, 91948.0], [32.2, 91968.0], [32.3, 91968.0], [32.4, 92170.0], [32.5, 92170.0], [32.6, 92210.0], [32.7, 92210.0], [32.8, 92264.0], [32.9, 92264.0], [33.0, 92516.0], [33.1, 92599.0], [33.2, 92599.0], [33.3, 92955.0], [33.4, 92955.0], [33.5, 93108.0], [33.6, 93108.0], [33.7, 93578.0], [33.8, 93578.0], [33.9, 93640.0], [34.0, 93640.0], [34.1, 93712.0], [34.2, 93744.0], [34.3, 93744.0], [34.4, 94027.0], [34.5, 94027.0], [34.6, 94084.0], [34.7, 94084.0], [34.8, 94218.0], [34.9, 94218.0], [35.0, 94440.0], [35.1, 94500.0], [35.2, 94500.0], [35.3, 94895.0], [35.4, 94895.0], [35.5, 95097.0], [35.6, 95097.0], [35.7, 95294.0], [35.8, 95294.0], [35.9, 95368.0], [36.0, 95368.0], [36.1, 95391.0], [36.2, 95514.0], [36.3, 95514.0], [36.4, 95569.0], [36.5, 95569.0], [36.6, 95612.0], [36.7, 95612.0], [36.8, 95640.0], [36.9, 95640.0], [37.0, 95655.0], [37.1, 95832.0], [37.2, 95832.0], [37.3, 95922.0], [37.4, 95922.0], [37.5, 95994.0], [37.6, 95994.0], [37.7, 96085.0], [37.8, 96085.0], [37.9, 96850.0], [38.0, 96850.0], [38.1, 97422.0], [38.2, 98144.0], [38.3, 98144.0], [38.4, 100425.0], [38.5, 100425.0], [38.6, 100437.0], [38.7, 100437.0], [38.8, 100542.0], [38.9, 100542.0], [39.0, 100715.0], [39.1, 100800.0], [39.2, 100800.0], [39.3, 100828.0], [39.4, 100828.0], [39.5, 100841.0], [39.6, 100841.0], [39.7, 100843.0], [39.8, 100843.0], [39.9, 100853.0], [40.0, 100853.0], [40.1, 100916.0], [40.2, 100939.0], [40.3, 100939.0], [40.4, 100958.0], [40.5, 100958.0], [40.6, 101589.0], [40.7, 101589.0], [40.8, 103327.0], [40.9, 103327.0], [41.0, 103575.0], [41.1, 103957.0], [41.2, 103957.0], [41.3, 105748.0], [41.4, 105748.0], [41.5, 105868.0], [41.6, 105868.0], [41.7, 106019.0], [41.8, 106019.0], [41.9, 106040.0], [42.0, 106040.0], [42.1, 106083.0], [42.2, 106087.0], [42.3, 106087.0], [42.4, 106110.0], [42.5, 106110.0], [42.6, 106231.0], [42.7, 106231.0], [42.8, 106884.0], [42.9, 106884.0], [43.0, 107678.0], [43.1, 107749.0], [43.2, 107749.0], [43.3, 108962.0], [43.4, 108962.0], [43.5, 110571.0], [43.6, 110571.0], [43.7, 110604.0], [43.8, 110604.0], [43.9, 110791.0], [44.0, 110810.0], [44.1, 110810.0], [44.2, 110885.0], [44.3, 110885.0], [44.4, 110972.0], [44.5, 110972.0], [44.6, 110976.0], [44.7, 110976.0], [44.8, 111030.0], [44.9, 111030.0], [45.0, 111046.0], [45.1, 111085.0], [45.2, 111085.0], [45.3, 111252.0], [45.4, 111252.0], [45.5, 111363.0], [45.6, 111363.0], [45.7, 111488.0], [45.8, 111488.0], [45.9, 111931.0], [46.0, 112816.0], [46.1, 112816.0], [46.2, 112862.0], [46.3, 112862.0], [46.4, 112999.0], [46.5, 112999.0], [46.6, 113096.0], [46.7, 113096.0], [46.8, 113164.0], [46.9, 113164.0], [47.0, 113308.0], [47.1, 113407.0], [47.2, 113407.0], [47.3, 113506.0], [47.4, 113506.0], [47.5, 113601.0], [47.6, 113601.0], [47.7, 113818.0], [47.8, 113818.0], [47.9, 114498.0], [48.0, 114853.0], [48.1, 114853.0], [48.2, 115500.0], [48.3, 115500.0], [48.4, 115508.0], [48.5, 115508.0], [48.6, 115619.0], [48.7, 115619.0], [48.8, 115621.0], [48.9, 115621.0], [49.0, 115657.0], [49.1, 115703.0], [49.2, 115703.0], [49.3, 115713.0], [49.4, 115713.0], [49.5, 115818.0], [49.6, 115818.0], [49.7, 115822.0], [49.8, 115822.0], [49.9, 115907.0], [50.0, 116307.0], [50.1, 116307.0], [50.2, 116366.0], [50.3, 116366.0], [50.4, 116390.0], [50.5, 116390.0], [50.6, 116432.0], [50.7, 116432.0], [50.8, 116442.0], [50.9, 116442.0], [51.0, 116500.0], [51.1, 116696.0], [51.2, 116696.0], [51.3, 116761.0], [51.4, 116761.0], [51.5, 116895.0], [51.6, 116895.0], [51.7, 116997.0], [51.8, 116997.0], [51.9, 117006.0], [52.0, 117127.0], [52.1, 117127.0], [52.2, 117143.0], [52.3, 117143.0], [52.4, 117202.0], [52.5, 117202.0], [52.6, 117329.0], [52.7, 117329.0], [52.8, 117398.0], [52.9, 117398.0], [53.0, 117478.0], [53.1, 117743.0], [53.2, 117743.0], [53.3, 117839.0], [53.4, 117839.0], [53.5, 118036.0], [53.6, 118036.0], [53.7, 118178.0], [53.8, 118178.0], [53.9, 118773.0], [54.0, 119096.0], [54.1, 119096.0], [54.2, 119449.0], [54.3, 119449.0], [54.4, 119550.0], [54.5, 119550.0], [54.6, 119581.0], [54.7, 119581.0], [54.8, 119616.0], [54.9, 119616.0], [55.0, 119651.0], [55.1, 119681.0], [55.2, 119681.0], [55.3, 119694.0], [55.4, 119694.0], [55.5, 119710.0], [55.6, 119710.0], [55.7, 119714.0], [55.8, 119714.0], [55.9, 119752.0], [56.0, 119779.0], [56.1, 119779.0], [56.2, 119813.0], [56.3, 119813.0], [56.4, 119819.0], [56.5, 119819.0], [56.6, 119831.0], [56.7, 119831.0], [56.8, 119854.0], [56.9, 119854.0], [57.0, 119878.0], [57.1, 119912.0], [57.2, 119912.0], [57.3, 119920.0], [57.4, 119920.0], [57.5, 120012.0], [57.6, 120012.0], [57.7, 120064.0], [57.8, 120064.0], [57.9, 120111.0], [58.0, 120133.0], [58.1, 120133.0], [58.2, 120151.0], [58.3, 120151.0], [58.4, 120196.0], [58.5, 120196.0], [58.6, 120216.0], [58.7, 120216.0], [58.8, 120257.0], [58.9, 120257.0], [59.0, 120263.0], [59.1, 120269.0], [59.2, 120269.0], [59.3, 120288.0], [59.4, 120288.0], [59.5, 120351.0], [59.6, 120351.0], [59.7, 120413.0], [59.8, 120413.0], [59.9, 120514.0], [60.0, 120544.0], [60.1, 120544.0], [60.2, 120570.0], [60.3, 120570.0], [60.4, 120582.0], [60.5, 120582.0], [60.6, 120900.0], [60.7, 120900.0], [60.8, 120996.0], [60.9, 120996.0], [61.0, 121030.0], [61.1, 121050.0], [61.2, 121050.0], [61.3, 121088.0], [61.4, 121088.0], [61.5, 121138.0], [61.6, 121138.0], [61.7, 121187.0], [61.8, 121187.0], [61.9, 121349.0], [62.0, 121349.0], [62.1, 121349.0], [62.2, 121402.0], [62.3, 121402.0], [62.4, 121433.0], [62.5, 121433.0], [62.6, 121475.0], [62.7, 121475.0], [62.8, 121558.0], [62.9, 121558.0], [63.0, 121570.0], [63.1, 121598.0], [63.2, 121598.0], [63.3, 121611.0], [63.4, 121611.0], [63.5, 121625.0], [63.6, 121625.0], [63.7, 121756.0], [63.8, 121756.0], [63.9, 121812.0], [64.0, 121822.0], [64.1, 121822.0], [64.2, 121823.0], [64.3, 121823.0], [64.4, 121839.0], [64.5, 121839.0], [64.6, 121852.0], [64.7, 121852.0], [64.8, 121898.0], [64.9, 121898.0], [65.0, 121926.0], [65.1, 121945.0], [65.2, 121945.0], [65.3, 121956.0], [65.4, 121956.0], [65.5, 121957.0], [65.6, 121957.0], [65.7, 121961.0], [65.8, 121961.0], [65.9, 121974.0], [66.0, 122004.0], [66.1, 122004.0], [66.2, 122036.0], [66.3, 122036.0], [66.4, 122039.0], [66.5, 122039.0], [66.6, 122049.0], [66.7, 122049.0], [66.8, 122053.0], [66.9, 122053.0], [67.0, 122096.0], [67.1, 122121.0], [67.2, 122121.0], [67.3, 122148.0], [67.4, 122148.0], [67.5, 122184.0], [67.6, 122184.0], [67.7, 122203.0], [67.8, 122203.0], [67.9, 122248.0], [68.0, 122264.0], [68.1, 122264.0], [68.2, 122270.0], [68.3, 122270.0], [68.4, 122312.0], [68.5, 122312.0], [68.6, 122321.0], [68.7, 122321.0], [68.8, 122361.0], [68.9, 122361.0], [69.0, 122369.0], [69.1, 122378.0], [69.2, 122378.0], [69.3, 122421.0], [69.4, 122421.0], [69.5, 122431.0], [69.6, 122431.0], [69.7, 122542.0], [69.8, 122542.0], [69.9, 122543.0], [70.0, 122555.0], [70.1, 122555.0], [70.2, 122601.0], [70.3, 122601.0], [70.4, 122620.0], [70.5, 122620.0], [70.6, 122721.0], [70.7, 122721.0], [70.8, 122817.0], [70.9, 122817.0], [71.0, 122826.0], [71.1, 122874.0], [71.2, 122874.0], [71.3, 122943.0], [71.4, 122943.0], [71.5, 122982.0], [71.6, 122982.0], [71.7, 123004.0], [71.8, 123004.0], [71.9, 123096.0], [72.0, 123096.0], [72.1, 123104.0], [72.2, 123112.0], [72.3, 123112.0], [72.4, 123142.0], [72.5, 123142.0], [72.6, 123164.0], [72.7, 123164.0], [72.8, 123165.0], [72.9, 123165.0], [73.0, 123183.0], [73.1, 123197.0], [73.2, 123197.0], [73.3, 123199.0], [73.4, 123199.0], [73.5, 123204.0], [73.6, 123204.0], [73.7, 123252.0], [73.8, 123252.0], [73.9, 123253.0], [74.0, 123253.0], [74.1, 123265.0], [74.2, 123272.0], [74.3, 123272.0], [74.4, 123289.0], [74.5, 123289.0], [74.6, 123322.0], [74.7, 123322.0], [74.8, 123341.0], [74.9, 123341.0], [75.0, 123353.0], [75.1, 123384.0], [75.2, 123384.0], [75.3, 123387.0], [75.4, 123387.0], [75.5, 123396.0], [75.6, 123396.0], [75.7, 123398.0], [75.8, 123398.0], [75.9, 123424.0], [76.0, 123424.0], [76.1, 123439.0], [76.2, 123439.0], [76.3, 123439.0], [76.4, 123444.0], [76.5, 123444.0], [76.6, 123448.0], [76.7, 123448.0], [76.8, 123483.0], [76.9, 123483.0], [77.0, 123544.0], [77.1, 123553.0], [77.2, 123553.0], [77.3, 123562.0], [77.4, 123562.0], [77.5, 123591.0], [77.6, 123591.0], [77.7, 123625.0], [77.8, 123625.0], [77.9, 123658.0], [78.0, 123658.0], [78.1, 123689.0], [78.2, 123691.0], [78.3, 123691.0], [78.4, 123735.0], [78.5, 123735.0], [78.6, 123740.0], [78.7, 123740.0], [78.8, 123748.0], [78.9, 123748.0], [79.0, 123752.0], [79.1, 123764.0], [79.2, 123764.0], [79.3, 123831.0], [79.4, 123831.0], [79.5, 123857.0], [79.6, 123857.0], [79.7, 123867.0], [79.8, 123867.0], [79.9, 123873.0], [80.0, 123873.0], [80.1, 123876.0], [80.2, 123888.0], [80.3, 123888.0], [80.4, 123931.0], [80.5, 123931.0], [80.6, 123932.0], [80.7, 123932.0], [80.8, 123940.0], [80.9, 123940.0], [81.0, 123949.0], [81.1, 123950.0], [81.2, 123950.0], [81.3, 123962.0], [81.4, 123962.0], [81.5, 123979.0], [81.6, 123979.0], [81.7, 124031.0], [81.8, 124031.0], [81.9, 124088.0], [82.0, 124088.0], [82.1, 124110.0], [82.2, 124147.0], [82.3, 124147.0], [82.4, 124166.0], [82.5, 124166.0], [82.6, 124170.0], [82.7, 124170.0], [82.8, 124192.0], [82.9, 124192.0], [83.0, 124199.0], [83.1, 124206.0], [83.2, 124206.0], [83.3, 124240.0], [83.4, 124240.0], [83.5, 124256.0], [83.6, 124256.0], [83.7, 124258.0], [83.8, 124258.0], [83.9, 124260.0], [84.0, 124260.0], [84.1, 124272.0], [84.2, 124307.0], [84.3, 124307.0], [84.4, 124316.0], [84.5, 124316.0], [84.6, 124324.0], [84.7, 124324.0], [84.8, 124327.0], [84.9, 124327.0], [85.0, 124375.0], [85.1, 124379.0], [85.2, 124379.0], [85.3, 124399.0], [85.4, 124399.0], [85.5, 124429.0], [85.6, 124429.0], [85.7, 124474.0], [85.8, 124474.0], [85.9, 124515.0], [86.0, 124515.0], [86.1, 124550.0], [86.2, 124551.0], [86.3, 124551.0], [86.4, 124555.0], [86.5, 124555.0], [86.6, 124558.0], [86.7, 124558.0], [86.8, 124565.0], [86.9, 124565.0], [87.0, 124583.0], [87.1, 124607.0], [87.2, 124607.0], [87.3, 124630.0], [87.4, 124630.0], [87.5, 124636.0], [87.6, 124636.0], [87.7, 124666.0], [87.8, 124666.0], [87.9, 124689.0], [88.0, 124689.0], [88.1, 124697.0], [88.2, 124740.0], [88.3, 124740.0], [88.4, 124754.0], [88.5, 124754.0], [88.6, 124770.0], [88.7, 124770.0], [88.8, 124808.0], [88.9, 124808.0], [89.0, 124834.0], [89.1, 124839.0], [89.2, 124839.0], [89.3, 124864.0], [89.4, 124864.0], [89.5, 124885.0], [89.6, 124885.0], [89.7, 124897.0], [89.8, 124897.0], [89.9, 124903.0], [90.0, 124903.0], [90.1, 124923.0], [90.2, 124924.0], [90.3, 124924.0], [90.4, 124974.0], [90.5, 124974.0], [90.6, 124984.0], [90.7, 124984.0], [90.8, 124995.0], [90.9, 124995.0], [91.0, 125025.0], [91.1, 125031.0], [91.2, 125031.0], [91.3, 125056.0], [91.4, 125056.0], [91.5, 125068.0], [91.6, 125068.0], [91.7, 125108.0], [91.8, 125108.0], [91.9, 125123.0], [92.0, 125123.0], [92.1, 125128.0], [92.2, 125137.0], [92.3, 125137.0], [92.4, 125211.0], [92.5, 125211.0], [92.6, 125217.0], [92.7, 125217.0], [92.8, 125221.0], [92.9, 125221.0], [93.0, 125228.0], [93.1, 125248.0], [93.2, 125248.0], [93.3, 125257.0], [93.4, 125257.0], [93.5, 125316.0], [93.6, 125316.0], [93.7, 125361.0], [93.8, 125361.0], [93.9, 125372.0], [94.0, 125372.0], [94.1, 125430.0], [94.2, 125466.0], [94.3, 125466.0], [94.4, 125476.0], [94.5, 125476.0], [94.6, 125488.0], [94.7, 125488.0], [94.8, 125489.0], [94.9, 125489.0], [95.0, 125503.0], [95.1, 125504.0], [95.2, 125504.0], [95.3, 125512.0], [95.4, 125512.0], [95.5, 125540.0], [95.6, 125540.0], [95.7, 125547.0], [95.8, 125547.0], [95.9, 125614.0], [96.0, 125614.0], [96.1, 125634.0], [96.2, 125644.0], [96.3, 125644.0], [96.4, 125656.0], [96.5, 125656.0], [96.6, 125683.0], [96.7, 125683.0], [96.8, 125684.0], [96.9, 125684.0], [97.0, 125712.0], [97.1, 125735.0], [97.2, 125735.0], [97.3, 125739.0], [97.4, 125739.0], [97.5, 125748.0], [97.6, 125748.0], [97.7, 125785.0], [97.8, 125785.0], [97.9, 125787.0], [98.0, 125787.0], [98.1, 125815.0], [98.2, 125850.0], [98.3, 125850.0], [98.4, 125852.0], [98.5, 125852.0], [98.6, 125866.0], [98.7, 125866.0], [98.8, 125876.0], [98.9, 125876.0], [99.0, 125926.0], [99.1, 125946.0], [99.2, 125946.0], [99.3, 126000.0], [99.4, 126000.0], [99.5, 126003.0], [99.6, 126003.0], [99.7, 126080.0], [99.8, 126080.0], [99.9, 126209.0], [100.0, 126209.0]], "isOverall": false, "label": "Create Issue User 550 Ramp 1", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 80500.0, "maxY": 8.0, "series": [{"data": [[81900.0, 1.0], [81100.0, 3.0], [83500.0, 4.0], [82700.0, 3.0], [85900.0, 1.0], [86700.0, 1.0], [88300.0, 1.0], [89900.0, 1.0], [93100.0, 1.0], [95500.0, 2.0], [103500.0, 1.0], [110700.0, 1.0], [113100.0, 1.0], [115500.0, 2.0], [116300.0, 3.0], [117100.0, 2.0], [118700.0, 1.0], [119500.0, 2.0], [120300.0, 1.0], [121100.0, 2.0], [121900.0, 6.0], [122700.0, 1.0], [123500.0, 4.0], [124300.0, 7.0], [125100.0, 4.0], [125900.0, 2.0], [81800.0, 2.0], [81000.0, 4.0], [83400.0, 3.0], [82600.0, 4.0], [85800.0, 2.0], [86600.0, 1.0], [89000.0, 2.0], [89800.0, 2.0], [90600.0, 1.0], [92200.0, 2.0], [105800.0, 1.0], [110600.0, 1.0], [111400.0, 1.0], [113000.0, 1.0], [113800.0, 1.0], [117000.0, 1.0], [117800.0, 1.0], [119400.0, 1.0], [120200.0, 5.0], [121000.0, 3.0], [121800.0, 6.0], [122600.0, 2.0], [123400.0, 6.0], [124200.0, 6.0], [125000.0, 4.0], [125800.0, 5.0], [81700.0, 6.0], [80900.0, 3.0], [82500.0, 2.0], [83300.0, 6.0], [84100.0, 2.0], [84900.0, 1.0], [88900.0, 2.0], [89700.0, 2.0], [90500.0, 1.0], [93700.0, 2.0], [91300.0, 3.0], [92100.0, 1.0], [92900.0, 1.0], [94500.0, 1.0], [95300.0, 2.0], [100900.0, 3.0], [103300.0, 1.0], [105700.0, 1.0], [108900.0, 1.0], [110500.0, 1.0], [111300.0, 1.0], [112900.0, 1.0], [116900.0, 1.0], [117700.0, 1.0], [120100.0, 4.0], [120900.0, 2.0], [121700.0, 1.0], [122500.0, 3.0], [123300.0, 7.0], [124100.0, 6.0], [124900.0, 6.0], [125700.0, 6.0], [80800.0, 5.0], [81600.0, 2.0], [82400.0, 5.0], [83200.0, 3.0], [84000.0, 1.0], [85600.0, 2.0], [86400.0, 3.0], [88800.0, 1.0], [89600.0, 5.0], [93600.0, 1.0], [94400.0, 1.0], [95200.0, 1.0], [96000.0, 1.0], [96800.0, 1.0], [100800.0, 5.0], [111200.0, 1.0], [112800.0, 2.0], [113600.0, 1.0], [114400.0, 1.0], [116800.0, 1.0], [120000.0, 2.0], [121600.0, 2.0], [122400.0, 2.0], [123200.0, 6.0], [124000.0, 2.0], [124800.0, 6.0], [125600.0, 6.0], [80700.0, 4.0], [81500.0, 4.0], [82300.0, 3.0], [83100.0, 4.0], [86300.0, 1.0], [87100.0, 2.0], [88700.0, 1.0], [89500.0, 2.0], [91100.0, 1.0], [93500.0, 1.0], [91900.0, 2.0], [95900.0, 2.0], [100700.0, 1.0], [101500.0, 1.0], [103900.0, 1.0], [111900.0, 1.0], [113500.0, 1.0], [115900.0, 1.0], [116700.0, 1.0], [119900.0, 2.0], [121500.0, 3.0], [122300.0, 5.0], [123100.0, 8.0], [123900.0, 7.0], [124700.0, 3.0], [125500.0, 5.0], [80600.0, 5.0], [81400.0, 3.0], [83800.0, 1.0], [83000.0, 2.0], [82200.0, 6.0], [87000.0, 1.0], [86200.0, 1.0], [91800.0, 1.0], [94200.0, 1.0], [95000.0, 1.0], [95800.0, 1.0], [97400.0, 1.0], [106200.0, 1.0], [111000.0, 3.0], [113400.0, 1.0], [115800.0, 2.0], [116600.0, 1.0], [117400.0, 1.0], [119000.0, 1.0], [119800.0, 5.0], [121400.0, 3.0], [122200.0, 4.0], [123000.0, 2.0], [123800.0, 6.0], [124600.0, 6.0], [125400.0, 5.0], [126200.0, 1.0], [80500.0, 5.0], [81300.0, 3.0], [83700.0, 2.0], [82100.0, 2.0], [82900.0, 4.0], [85300.0, 2.0], [89300.0, 1.0], [86900.0, 2.0], [91700.0, 1.0], [92500.0, 2.0], [98100.0, 1.0], [100500.0, 1.0], [106100.0, 1.0], [107700.0, 1.0], [110900.0, 2.0], [113300.0, 1.0], [115700.0, 2.0], [116500.0, 1.0], [117300.0, 2.0], [118100.0, 1.0], [119700.0, 4.0], [120500.0, 4.0], [121300.0, 2.0], [122100.0, 3.0], [122900.0, 2.0], [123700.0, 5.0], [124500.0, 7.0], [125300.0, 3.0], [81200.0, 3.0], [82000.0, 4.0], [83600.0, 3.0], [82800.0, 6.0], [84400.0, 1.0], [87600.0, 2.0], [89200.0, 2.0], [94000.0, 2.0], [94800.0, 1.0], [95600.0, 3.0], [100400.0, 2.0], [106000.0, 4.0], [106800.0, 1.0], [107600.0, 1.0], [110800.0, 2.0], [114800.0, 1.0], [115600.0, 3.0], [116400.0, 2.0], [117200.0, 1.0], [118000.0, 1.0], [119600.0, 4.0], [120400.0, 1.0], [122000.0, 6.0], [122800.0, 3.0], [123600.0, 4.0], [124400.0, 2.0], [125200.0, 6.0], [126000.0, 3.0]], "isOverall": false, "label": "Create Issue User 550 Ramp 1", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 126200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 550.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 550.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 550.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 107.5, "minX": 1.71585186E12, "maxY": 382.5, "series": [{"data": [[1.71585186E12, 382.5], [1.71585192E12, 107.5]], "isOverall": false, "label": "User 550 Ramp 1", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71585192E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 80510.0, "minX": 1.0, "maxY": 126209.0, "series": [{"data": [[2.0, 126209.0], [3.0, 126003.0], [4.0, 126000.0], [5.0, 125946.0], [6.0, 125866.0], [7.0, 125852.0], [8.0, 125850.0], [9.0, 125876.0], [10.0, 125787.0], [11.0, 125815.0], [12.0, 125926.0], [13.0, 125785.0], [14.0, 125748.0], [15.0, 125739.0], [16.0, 125684.0], [17.0, 125735.0], [18.0, 125644.0], [19.0, 125656.0], [20.0, 125712.0], [21.0, 125683.0], [22.0, 125634.0], [23.0, 125614.0], [24.0, 125540.0], [25.0, 125504.0], [26.0, 125476.0], [27.0, 125466.0], [28.0, 125430.0], [29.0, 125488.0], [30.0, 125489.0], [31.0, 125512.0], [33.0, 125372.0], [32.0, 125361.0], [35.0, 125503.0], [34.0, 125228.0], [37.0, 125547.0], [36.0, 125316.0], [39.0, 125217.0], [38.0, 125211.0], [41.0, 125128.0], [40.0, 125257.0], [43.0, 125108.0], [42.0, 125248.0], [45.0, 125068.0], [44.0, 125137.0], [47.0, 125025.0], [46.0, 125123.0], [49.0, 125056.0], [48.0, 124984.0], [51.0, 124903.0], [50.0, 125031.0], [53.0, 124808.0], [52.0, 125221.0], [55.0, 124995.0], [54.0, 124839.0], [57.0, 124834.0], [56.0, 124974.0], [59.0, 124697.0], [58.0, 124923.0], [61.0, 124924.0], [60.0, 124770.0], [63.0, 124754.0], [62.0, 124740.0], [67.0, 124666.0], [66.0, 124897.0], [65.0, 124864.0], [64.0, 124885.0], [71.0, 124551.0], [70.0, 124555.0], [69.0, 124636.0], [68.0, 124630.0], [75.0, 124515.0], [74.0, 124607.0], [73.0, 124558.0], [72.0, 124474.0], [79.0, 124565.0], [78.0, 124429.0], [77.0, 124379.0], [76.0, 124550.0], [83.0, 124689.0], [82.0, 124256.0], [81.0, 124258.0], [80.0, 124327.0], [87.0, 124272.0], [86.0, 124399.0], [85.0, 124375.0], [84.0, 124583.0], [91.0, 124192.0], [90.0, 124316.0], [89.0, 124324.0], [88.0, 124206.0], [95.0, 124170.0], [94.0, 124307.0], [93.0, 124166.0], [92.0, 124199.0], [99.0, 123931.0], [98.0, 124260.0], [97.0, 124240.0], [96.0, 124147.0], [103.0, 124110.0], [102.0, 123857.0], [101.0, 123962.0], [100.0, 123932.0], [107.0, 124031.0], [106.0, 123940.0], [105.0, 124088.0], [104.0, 123950.0], [111.0, 123831.0], [110.0, 123876.0], [109.0, 123691.0], [108.0, 123979.0], [115.0, 123740.0], [114.0, 123764.0], [113.0, 123735.0], [112.0, 123867.0], [119.0, 123544.0], [118.0, 123873.0], [117.0, 123748.0], [116.0, 123658.0], [123.0, 123888.0], [122.0, 123689.0], [121.0, 123553.0], [120.0, 123591.0], [127.0, 123949.0], [126.0, 123448.0], [125.0, 123625.0], [124.0, 123752.0], [135.0, 123439.0], [134.0, 123439.0], [133.0, 123322.0], [132.0, 123353.0], [131.0, 123444.0], [130.0, 123396.0], [129.0, 123384.0], [128.0, 123562.0], [143.0, 123483.0], [142.0, 123252.0], [141.0, 123104.0], [140.0, 123265.0], [139.0, 123272.0], [138.0, 123387.0], [137.0, 123341.0], [136.0, 123424.0], [151.0, 123289.0], [150.0, 123398.0], [149.0, 123197.0], [148.0, 123253.0], [147.0, 123164.0], [146.0, 123142.0], [145.0, 123199.0], [144.0, 123183.0], [159.0, 122542.0], [158.0, 123096.0], [157.0, 123165.0], [156.0, 123112.0], [155.0, 122982.0], [154.0, 122874.0], [153.0, 123204.0], [152.0, 123004.0], [167.0, 122721.0], [166.0, 122620.0], [165.0, 122555.0], [164.0, 122378.0], [163.0, 122943.0], [162.0, 122826.0], [161.0, 122817.0], [160.0, 122601.0], [175.0, 122121.0], [174.0, 122431.0], [173.0, 122270.0], [172.0, 122321.0], [171.0, 122361.0], [170.0, 122543.0], [169.0, 122421.0], [168.0, 122312.0], [183.0, 121957.0], [182.0, 122049.0], [181.0, 121974.0], [180.0, 122264.0], [179.0, 122203.0], [178.0, 122248.0], [177.0, 122148.0], [176.0, 122369.0], [191.0, 122096.0], [190.0, 121926.0], [189.0, 121756.0], [188.0, 122184.0], [187.0, 121945.0], [186.0, 121956.0], [185.0, 122053.0], [184.0, 121898.0], [199.0, 122036.0], [198.0, 121812.0], [197.0, 121823.0], [196.0, 121839.0], [195.0, 122004.0], [194.0, 121852.0], [193.0, 121822.0], [192.0, 122039.0], [207.0, 121475.0], [206.0, 121349.0], [205.0, 121349.0], [204.0, 121611.0], [203.0, 121433.0], [202.0, 121961.0], [201.0, 121625.0], [200.0, 121558.0], [215.0, 120996.0], [214.0, 121030.0], [213.0, 121187.0], [212.0, 121050.0], [211.0, 121138.0], [210.0, 121598.0], [209.0, 121402.0], [208.0, 121570.0], [223.0, 120514.0], [222.0, 120288.0], [221.0, 120257.0], [220.0, 120570.0], [219.0, 120582.0], [218.0, 120544.0], [217.0, 120900.0], [216.0, 121088.0], [231.0, 120012.0], [230.0, 120263.0], [229.0, 120216.0], [228.0, 120111.0], [227.0, 120351.0], [226.0, 120133.0], [225.0, 120413.0], [224.0, 120269.0], [239.0, 119813.0], [238.0, 119651.0], [237.0, 120064.0], [236.0, 119878.0], [235.0, 119854.0], [234.0, 120196.0], [233.0, 120151.0], [232.0, 119920.0], [247.0, 119681.0], [246.0, 119819.0], [245.0, 119714.0], [244.0, 119752.0], [243.0, 119912.0], [242.0, 119710.0], [241.0, 119831.0], [240.0, 119616.0], [255.0, 118178.0], [254.0, 118773.0], [253.0, 119096.0], [252.0, 119449.0], [251.0, 119694.0], [250.0, 119581.0], [249.0, 119550.0], [248.0, 119779.0], [270.0, 116500.0], [271.0, 116307.0], [269.0, 116761.0], [268.0, 116696.0], [267.0, 116895.0], [266.0, 116997.0], [265.0, 117143.0], [264.0, 117006.0], [263.0, 117127.0], [257.0, 117839.0], [256.0, 118036.0], [259.0, 117743.0], [258.0, 117478.0], [262.0, 117202.0], [261.0, 117398.0], [260.0, 117329.0], [286.0, 114853.0], [287.0, 114498.0], [285.0, 115657.0], [284.0, 115500.0], [283.0, 115508.0], [282.0, 115621.0], [281.0, 115619.0], [280.0, 115703.0], [279.0, 115822.0], [273.0, 116390.0], [272.0, 116442.0], [275.0, 116366.0], [274.0, 116432.0], [278.0, 115907.0], [277.0, 115713.0], [276.0, 115818.0], [302.0, 111085.0], [303.0, 111046.0], [301.0, 111363.0], [300.0, 111252.0], [299.0, 111488.0], [298.0, 111931.0], [297.0, 112816.0], [296.0, 112862.0], [295.0, 113096.0], [289.0, 113601.0], [288.0, 113818.0], [291.0, 113506.0], [290.0, 113407.0], [294.0, 112999.0], [293.0, 113164.0], [292.0, 113308.0], [318.0, 106110.0], [319.0, 106083.0], [317.0, 106231.0], [316.0, 106087.0], [315.0, 106884.0], [314.0, 107678.0], [313.0, 107749.0], [312.0, 108962.0], [311.0, 110604.0], [305.0, 110972.0], [304.0, 110885.0], [307.0, 110810.0], [306.0, 111030.0], [310.0, 110571.0], [309.0, 110791.0], [308.0, 110976.0], [334.0, 100542.0], [335.0, 100800.0], [333.0, 100916.0], [332.0, 100828.0], [331.0, 100853.0], [330.0, 100843.0], [329.0, 100939.0], [328.0, 100958.0], [327.0, 101589.0], [321.0, 105868.0], [320.0, 106019.0], [323.0, 105748.0], [322.0, 106040.0], [326.0, 103327.0], [325.0, 103575.0], [324.0, 103957.0], [350.0, 95569.0], [351.0, 95391.0], [349.0, 95640.0], [348.0, 95612.0], [347.0, 95655.0], [346.0, 95832.0], [345.0, 95994.0], [344.0, 95922.0], [343.0, 96085.0], [337.0, 100715.0], [336.0, 100841.0], [339.0, 100437.0], [338.0, 100425.0], [342.0, 96850.0], [341.0, 97422.0], [340.0, 98144.0], [366.0, 93108.0], [367.0, 92955.0], [365.0, 93578.0], [364.0, 93640.0], [363.0, 93744.0], [362.0, 93712.0], [361.0, 94084.0], [360.0, 94027.0], [359.0, 94218.0], [353.0, 95097.0], [352.0, 95514.0], [355.0, 95294.0], [354.0, 95368.0], [358.0, 94440.0], [357.0, 94500.0], [356.0, 94895.0], [382.0, 90594.0], [383.0, 89955.0], [381.0, 90635.0], [380.0, 91180.0], [379.0, 91328.0], [378.0, 91332.0], [377.0, 91337.0], [376.0, 91760.0], [375.0, 91852.0], [369.0, 92516.0], [368.0, 92599.0], [371.0, 92170.0], [370.0, 92264.0], [374.0, 91968.0], [373.0, 91948.0], [372.0, 92210.0], [398.0, 89075.0], [399.0, 89019.0], [397.0, 89276.0], [396.0, 89272.0], [395.0, 89346.0], [394.0, 89502.0], [393.0, 89562.0], [392.0, 89625.0], [391.0, 89692.0], [385.0, 89847.0], [384.0, 89693.0], [387.0, 89694.0], [386.0, 89848.0], [390.0, 89683.0], [389.0, 89748.0], [388.0, 89787.0], [414.0, 86487.0], [415.0, 86415.0], [413.0, 86686.0], [412.0, 86796.0], [411.0, 86990.0], [410.0, 86977.0], [409.0, 87050.0], [408.0, 87182.0], [407.0, 87178.0], [401.0, 88931.0], [400.0, 88999.0], [403.0, 88733.0], [402.0, 88854.0], [406.0, 87691.0], [405.0, 87669.0], [404.0, 88389.0], [430.0, 84070.0], [431.0, 83895.0], [429.0, 84127.0], [428.0, 84165.0], [427.0, 84498.0], [426.0, 84957.0], [425.0, 85309.0], [424.0, 85353.0], [423.0, 85612.0], [417.0, 86339.0], [416.0, 86424.0], [419.0, 85985.0], [418.0, 86267.0], [422.0, 85620.0], [421.0, 85826.0], [420.0, 85864.0], [446.0, 83359.0], [447.0, 83344.0], [445.0, 83364.0], [444.0, 83384.0], [443.0, 83448.0], [442.0, 83471.0], [441.0, 83498.0], [440.0, 83525.0], [439.0, 83569.0], [433.0, 83747.0], [432.0, 83748.0], [435.0, 83634.0], [434.0, 83697.0], [438.0, 83577.0], [437.0, 83572.0], [436.0, 83622.0], [462.0, 82909.0], [463.0, 82892.0], [461.0, 82955.0], [460.0, 82967.0], [459.0, 82989.0], [458.0, 83036.0], [457.0, 83061.0], [456.0, 83111.0], [455.0, 83146.0], [449.0, 83329.0], [448.0, 83343.0], [451.0, 83282.0], [450.0, 83272.0], [454.0, 83159.0], [453.0, 83183.0], [452.0, 83252.0], [478.0, 82446.0], [479.0, 82471.0], [477.0, 82526.0], [476.0, 82553.0], [475.0, 82612.0], [474.0, 82628.0], [473.0, 82697.0], [472.0, 82694.0], [471.0, 82705.0], [465.0, 82845.0], [464.0, 82885.0], [467.0, 82807.0], [466.0, 82843.0], [470.0, 82741.0], [469.0, 82744.0], [468.0, 82804.0], [494.0, 82022.0], [495.0, 82034.0], [493.0, 82187.0], [492.0, 82173.0], [491.0, 82206.0], [490.0, 82227.0], [489.0, 82255.0], [488.0, 82236.0], [487.0, 82290.0], [481.0, 82409.0], [480.0, 82454.0], [483.0, 82408.0], [482.0, 82390.0], [486.0, 82299.0], [485.0, 82364.0], [484.0, 82398.0], [510.0, 81526.0], [511.0, 81513.0], [509.0, 81552.0], [508.0, 81607.0], [507.0, 81656.0], [506.0, 81725.0], [505.0, 81739.0], [504.0, 81763.0], [503.0, 81774.0], [497.0, 82013.0], [496.0, 82010.0], [499.0, 81814.0], [498.0, 81996.0], [502.0, 81784.0], [501.0, 81793.0], [500.0, 81804.0], [540.0, 80754.0], [543.0, 80626.0], [529.0, 80975.0], [528.0, 81048.0], [531.0, 80937.0], [530.0, 80968.0], [533.0, 80864.0], [532.0, 80850.0], [542.0, 80657.0], [541.0, 80658.0], [539.0, 80763.0], [538.0, 80776.0], [537.0, 80760.0], [536.0, 80826.0], [527.0, 81033.0], [513.0, 81469.0], [512.0, 81501.0], [515.0, 81402.0], [514.0, 81460.0], [517.0, 81352.0], [516.0, 81350.0], [519.0, 81254.0], [518.0, 81305.0], [526.0, 81089.0], [525.0, 81099.0], [524.0, 81130.0], [523.0, 81168.0], [522.0, 81184.0], [521.0, 81207.0], [520.0, 81224.0], [535.0, 80850.0], [534.0, 80824.0], [550.0, 80510.0], [549.0, 80534.0], [548.0, 80544.0], [547.0, 80560.0], [546.0, 80594.0], [545.0, 80630.0], [544.0, 80639.0], [1.0, 126080.0]], "isOverall": false, "label": "Create Issue User 550 Ramp 1", "isController": false}, {"data": [[275.5, 106964.81272727271]], "isOverall": false, "label": "Create Issue User 550 Ramp 1-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 550.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 5952.766666666666, "minX": 1.71585186E12, "maxY": 16324.0, "series": [{"data": [[1.71585186E12, 16324.0], [1.71585192E12, 10396.833333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.71585186E12, 9346.4], [1.71585192E12, 5952.766666666666]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71585192E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 96223.3511904762, "minX": 1.71585186E12, "maxY": 123829.91121495326, "series": [{"data": [[1.71585186E12, 96223.3511904762], [1.71585192E12, 123829.91121495326]], "isOverall": false, "label": "Create Issue User 550 Ramp 1", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71585192E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 96223.11607142855, "minX": 1.71585186E12, "maxY": 123829.72897196264, "series": [{"data": [[1.71585186E12, 96223.11607142855], [1.71585192E12, 123829.72897196264]], "isOverall": false, "label": "Create Issue User 550 Ramp 1", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71585192E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.5093457943925234, "minX": 1.71585186E12, "maxY": 8.80952380952379, "series": [{"data": [[1.71585186E12, 8.80952380952379], [1.71585192E12, 0.5093457943925234]], "isOverall": false, "label": "Create Issue User 550 Ramp 1", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71585192E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 80510.0, "minX": 1.71585186E12, "maxY": 126209.0, "series": [{"data": [[1.71585186E12, 121088.0], [1.71585192E12, 126209.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.71585186E12, 80510.0], [1.71585192E12, 121030.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.71585186E12, 119660.0], [1.71585192E12, 125639.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.71585186E12, 120782.34], [1.71585192E12, 126068.45]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.71585186E12, 90274.5], [1.71585192E12, 123931.5]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.71585186E12, 120135.7], [1.71585192E12, 125823.75]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71585192E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 81068.5, "minX": 1.0, "maxY": 125866.0, "series": [{"data": [[32.0, 82196.5], [8.0, 96465.0], [2.0, 102911.0], [35.0, 83036.0], [9.0, 85985.0], [38.0, 81068.5], [10.0, 110928.5], [11.0, 95640.0], [45.0, 125248.0], [12.0, 100834.5], [3.0, 110996.5], [48.0, 124325.5], [50.0, 123411.0], [13.0, 83697.0], [15.0, 125866.0], [4.0, 102180.0], [1.0, 104236.5], [17.0, 120351.0], [5.0, 87517.0], [22.0, 119765.5], [6.0, 102250.5], [27.0, 122361.0], [7.0, 93744.0], [29.0, 121756.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 50.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 81067.5, "minX": 1.0, "maxY": 125866.0, "series": [{"data": [[32.0, 82196.0], [8.0, 96465.0], [2.0, 102910.5], [35.0, 83035.0], [9.0, 85985.0], [38.0, 81067.5], [10.0, 110928.0], [11.0, 95640.0], [45.0, 125248.0], [12.0, 100834.5], [3.0, 110996.0], [48.0, 124325.5], [50.0, 123411.0], [13.0, 83697.0], [15.0, 125866.0], [4.0, 102180.0], [1.0, 104236.5], [17.0, 120351.0], [5.0, 87517.0], [22.0, 119765.5], [6.0, 102250.5], [27.0, 122361.0], [7.0, 93744.0], [29.0, 121756.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 50.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 9.166666666666666, "minX": 1.71585174E12, "maxY": 9.166666666666666, "series": [{"data": [[1.71585174E12, 9.166666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71585174E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 3.566666666666667, "minX": 1.71585186E12, "maxY": 5.6, "series": [{"data": [[1.71585186E12, 5.6], [1.71585192E12, 3.566666666666667]], "isOverall": false, "label": "201", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71585192E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 3.566666666666667, "minX": 1.71585186E12, "maxY": 5.6, "series": [{"data": [[1.71585186E12, 5.6], [1.71585192E12, 3.566666666666667]], "isOverall": false, "label": "Create Issue User 550 Ramp 1-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71585192E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 3.566666666666667, "minX": 1.71585186E12, "maxY": 5.6, "series": [{"data": [[1.71585186E12, 5.6], [1.71585192E12, 3.566666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71585192E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

