/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 60039.0, "minX": 0.0, "maxY": 122888.0, "series": [{"data": [[0.0, 60039.0], [0.1, 60039.0], [0.2, 60223.0], [0.3, 60223.0], [0.4, 60257.0], [0.5, 60286.0], [0.6, 60286.0], [0.7, 60297.0], [0.8, 60297.0], [0.9, 60306.0], [1.0, 60550.0], [1.1, 60550.0], [1.2, 60727.0], [1.3, 60727.0], [1.4, 60735.0], [1.5, 60897.0], [1.6, 60897.0], [1.7, 60915.0], [1.8, 60915.0], [1.9, 60922.0], [2.0, 60924.0], [2.1, 60924.0], [2.2, 60942.0], [2.3, 60942.0], [2.4, 60950.0], [2.5, 60972.0], [2.6, 60972.0], [2.7, 60974.0], [2.8, 60974.0], [2.9, 60976.0], [3.0, 60995.0], [3.1, 60995.0], [3.2, 61083.0], [3.3, 61083.0], [3.4, 61108.0], [3.5, 61122.0], [3.6, 61122.0], [3.7, 61153.0], [3.8, 61153.0], [3.9, 61184.0], [4.0, 61221.0], [4.1, 61221.0], [4.2, 61226.0], [4.3, 61226.0], [4.4, 61244.0], [4.5, 61245.0], [4.6, 61245.0], [4.7, 61380.0], [4.8, 61380.0], [4.9, 61476.0], [5.0, 61487.0], [5.1, 61487.0], [5.2, 61493.0], [5.3, 61493.0], [5.4, 61506.0], [5.5, 61506.0], [5.6, 61524.0], [5.7, 61530.0], [5.8, 61530.0], [5.9, 61634.0], [6.0, 61634.0], [6.1, 61649.0], [6.2, 61664.0], [6.3, 61664.0], [6.4, 61689.0], [6.5, 61689.0], [6.6, 61699.0], [6.7, 61714.0], [6.8, 61714.0], [6.9, 69562.0], [7.0, 69562.0], [7.1, 69565.0], [7.2, 69578.0], [7.3, 69578.0], [7.4, 69592.0], [7.5, 69592.0], [7.6, 69604.0], [7.7, 69618.0], [7.8, 69618.0], [7.9, 69657.0], [8.0, 69657.0], [8.1, 69661.0], [8.2, 69671.0], [8.3, 69671.0], [8.4, 69732.0], [8.5, 69732.0], [8.6, 69752.0], [8.7, 69755.0], [8.8, 69755.0], [8.9, 69768.0], [9.0, 69768.0], [9.1, 69802.0], [9.2, 69807.0], [9.3, 69807.0], [9.4, 69822.0], [9.5, 69857.0], [9.6, 69857.0], [9.7, 69879.0], [9.8, 69879.0], [9.9, 69935.0], [10.0, 69939.0], [10.1, 69939.0], [10.2, 69978.0], [10.3, 69978.0], [10.4, 69990.0], [10.5, 69996.0], [10.6, 69996.0], [10.7, 70016.0], [10.8, 70016.0], [10.9, 70031.0], [11.0, 70069.0], [11.1, 70069.0], [11.2, 70103.0], [11.3, 70103.0], [11.4, 70130.0], [11.5, 70144.0], [11.6, 70144.0], [11.7, 70147.0], [11.8, 70147.0], [11.9, 70159.0], [12.0, 70214.0], [12.1, 70214.0], [12.2, 70222.0], [12.3, 70222.0], [12.4, 70227.0], [12.5, 70262.0], [12.6, 70262.0], [12.7, 70276.0], [12.8, 70276.0], [12.9, 70327.0], [13.0, 70340.0], [13.1, 70340.0], [13.2, 70370.0], [13.3, 70370.0], [13.4, 70381.0], [13.5, 70400.0], [13.6, 70400.0], [13.7, 70414.0], [13.8, 70414.0], [13.9, 70472.0], [14.0, 70479.0], [14.1, 70479.0], [14.2, 70490.0], [14.3, 70490.0], [14.4, 70492.0], [14.5, 70547.0], [14.6, 70547.0], [14.7, 70591.0], [14.8, 70591.0], [14.9, 70613.0], [15.0, 70629.0], [15.1, 70629.0], [15.2, 70637.0], [15.3, 70637.0], [15.4, 70660.0], [15.5, 70678.0], [15.6, 70678.0], [15.7, 70722.0], [15.8, 70722.0], [15.9, 70739.0], [16.0, 70802.0], [16.1, 70802.0], [16.2, 70818.0], [16.3, 70818.0], [16.4, 70825.0], [16.5, 70831.0], [16.6, 70831.0], [16.7, 70844.0], [16.8, 70844.0], [16.9, 70852.0], [17.0, 70866.0], [17.1, 70866.0], [17.2, 70904.0], [17.3, 70904.0], [17.4, 70941.0], [17.5, 70961.0], [17.6, 70961.0], [17.7, 71013.0], [17.8, 71013.0], [17.9, 71027.0], [18.0, 71034.0], [18.1, 71034.0], [18.2, 71051.0], [18.3, 71051.0], [18.4, 71072.0], [18.5, 71085.0], [18.6, 71085.0], [18.7, 71119.0], [18.8, 71119.0], [18.9, 71142.0], [19.0, 71215.0], [19.1, 71215.0], [19.2, 71238.0], [19.3, 71238.0], [19.4, 71238.0], [19.5, 71248.0], [19.6, 71248.0], [19.7, 71262.0], [19.8, 71262.0], [19.9, 71265.0], [20.0, 71279.0], [20.1, 71279.0], [20.2, 71281.0], [20.3, 71281.0], [20.4, 71313.0], [20.5, 71313.0], [20.6, 71337.0], [20.7, 71370.0], [20.8, 71370.0], [20.9, 71372.0], [21.0, 71372.0], [21.1, 71402.0], [21.2, 71404.0], [21.3, 71404.0], [21.4, 71414.0], [21.5, 71414.0], [21.6, 71461.0], [21.7, 71543.0], [21.8, 71543.0], [21.9, 71569.0], [22.0, 71569.0], [22.1, 71591.0], [22.2, 71711.0], [22.3, 71711.0], [22.4, 71726.0], [22.5, 71726.0], [22.6, 71730.0], [22.7, 71738.0], [22.8, 71738.0], [22.9, 71757.0], [23.0, 71757.0], [23.1, 71763.0], [23.2, 71829.0], [23.3, 71829.0], [23.4, 71885.0], [23.5, 71885.0], [23.6, 71958.0], [23.7, 72007.0], [23.8, 72007.0], [23.9, 72074.0], [24.0, 72074.0], [24.1, 72280.0], [24.2, 72298.0], [24.3, 72298.0], [24.4, 72349.0], [24.5, 72349.0], [24.6, 72568.0], [24.7, 73556.0], [24.8, 73556.0], [24.9, 73611.0], [25.0, 73611.0], [25.1, 74354.0], [25.2, 74483.0], [25.3, 74483.0], [25.4, 74787.0], [25.5, 74787.0], [25.6, 74862.0], [25.7, 74976.0], [25.8, 74976.0], [25.9, 75202.0], [26.0, 75202.0], [26.1, 75413.0], [26.2, 75432.0], [26.3, 75432.0], [26.4, 76184.0], [26.5, 76184.0], [26.6, 78005.0], [26.7, 78624.0], [26.8, 78624.0], [26.9, 79076.0], [27.0, 79076.0], [27.1, 79565.0], [27.2, 79665.0], [27.3, 79665.0], [27.4, 80216.0], [27.5, 80216.0], [27.6, 80227.0], [27.7, 80268.0], [27.8, 80268.0], [27.9, 80296.0], [28.0, 80296.0], [28.1, 80345.0], [28.2, 80351.0], [28.3, 80351.0], [28.4, 80630.0], [28.5, 80630.0], [28.6, 81032.0], [28.7, 82523.0], [28.8, 82523.0], [28.9, 82912.0], [29.0, 82912.0], [29.1, 82930.0], [29.2, 82930.0], [29.3, 82930.0], [29.4, 82948.0], [29.5, 82948.0], [29.6, 83029.0], [29.7, 83105.0], [29.8, 83105.0], [29.9, 83179.0], [30.0, 83179.0], [30.1, 83493.0], [30.2, 83541.0], [30.3, 83541.0], [30.4, 83551.0], [30.5, 83551.0], [30.6, 83999.0], [30.7, 84033.0], [30.8, 84033.0], [30.9, 85271.0], [31.0, 85271.0], [31.1, 85531.0], [31.2, 85556.0], [31.3, 85556.0], [31.4, 85561.0], [31.5, 85561.0], [31.6, 85635.0], [31.7, 85760.0], [31.8, 85760.0], [31.9, 85874.0], [32.0, 85874.0], [32.1, 85892.0], [32.2, 85915.0], [32.3, 85915.0], [32.4, 85934.0], [32.5, 85934.0], [32.6, 85983.0], [32.7, 86118.0], [32.8, 86118.0], [32.9, 86500.0], [33.0, 86500.0], [33.1, 86510.0], [33.2, 86570.0], [33.3, 86570.0], [33.4, 86604.0], [33.5, 86604.0], [33.6, 86718.0], [33.7, 86735.0], [33.8, 86735.0], [33.9, 86844.0], [34.0, 86844.0], [34.1, 86881.0], [34.2, 86920.0], [34.3, 86920.0], [34.4, 86927.0], [34.5, 86927.0], [34.6, 87012.0], [34.7, 87014.0], [34.8, 87014.0], [34.9, 87033.0], [35.0, 87033.0], [35.1, 87035.0], [35.2, 87083.0], [35.3, 87083.0], [35.4, 87120.0], [35.5, 87120.0], [35.6, 87206.0], [35.7, 87354.0], [35.8, 87354.0], [35.9, 87377.0], [36.0, 87377.0], [36.1, 87421.0], [36.2, 87651.0], [36.3, 87651.0], [36.4, 88060.0], [36.5, 88060.0], [36.6, 88179.0], [36.7, 88920.0], [36.8, 88920.0], [36.9, 89024.0], [37.0, 89024.0], [37.1, 89203.0], [37.2, 89969.0], [37.3, 89969.0], [37.4, 89974.0], [37.5, 90159.0], [37.6, 90159.0], [37.7, 90229.0], [37.8, 90229.0], [37.9, 90241.0], [38.0, 90262.0], [38.1, 90262.0], [38.2, 90298.0], [38.3, 90298.0], [38.4, 90417.0], [38.5, 90480.0], [38.6, 90480.0], [38.7, 90495.0], [38.8, 90495.0], [38.9, 90584.0], [39.0, 90601.0], [39.1, 90601.0], [39.2, 90622.0], [39.3, 90622.0], [39.4, 90683.0], [39.5, 90713.0], [39.6, 90713.0], [39.7, 90788.0], [39.8, 90788.0], [39.9, 90807.0], [40.0, 90856.0], [40.1, 90856.0], [40.2, 90893.0], [40.3, 90893.0], [40.4, 90939.0], [40.5, 91022.0], [40.6, 91022.0], [40.7, 91026.0], [40.8, 91026.0], [40.9, 91137.0], [41.0, 91154.0], [41.1, 91154.0], [41.2, 91156.0], [41.3, 91156.0], [41.4, 91193.0], [41.5, 91224.0], [41.6, 91224.0], [41.7, 91373.0], [41.8, 91373.0], [41.9, 91399.0], [42.0, 91422.0], [42.1, 91422.0], [42.2, 91458.0], [42.3, 91458.0], [42.4, 91563.0], [42.5, 91845.0], [42.6, 91845.0], [42.7, 92901.0], [42.8, 92901.0], [42.9, 93871.0], [43.0, 94799.0], [43.1, 94799.0], [43.2, 94952.0], [43.3, 94952.0], [43.4, 95165.0], [43.5, 95298.0], [43.6, 95298.0], [43.7, 96007.0], [43.8, 96007.0], [43.9, 96173.0], [44.0, 96497.0], [44.1, 96497.0], [44.2, 97153.0], [44.3, 97153.0], [44.4, 97274.0], [44.5, 97555.0], [44.6, 97555.0], [44.7, 97786.0], [44.8, 97786.0], [44.9, 98128.0], [45.0, 98234.0], [45.1, 98234.0], [45.2, 98622.0], [45.3, 98622.0], [45.4, 98643.0], [45.5, 98670.0], [45.6, 98670.0], [45.7, 98913.0], [45.8, 98913.0], [45.9, 98965.0], [46.0, 99025.0], [46.1, 99025.0], [46.2, 99190.0], [46.3, 99190.0], [46.4, 99226.0], [46.5, 99296.0], [46.6, 99296.0], [46.7, 99364.0], [46.8, 99364.0], [46.9, 99469.0], [47.0, 99583.0], [47.1, 99583.0], [47.2, 99597.0], [47.3, 99597.0], [47.4, 99638.0], [47.5, 99640.0], [47.6, 99640.0], [47.7, 99717.0], [47.8, 99717.0], [47.9, 99787.0], [48.0, 99815.0], [48.1, 99815.0], [48.2, 100277.0], [48.3, 100277.0], [48.4, 100279.0], [48.5, 100397.0], [48.6, 100397.0], [48.7, 100429.0], [48.8, 100429.0], [48.9, 100554.0], [49.0, 100588.0], [49.1, 100588.0], [49.2, 100920.0], [49.3, 100920.0], [49.4, 100973.0], [49.5, 101101.0], [49.6, 101101.0], [49.7, 101311.0], [49.8, 101311.0], [49.9, 101408.0], [50.0, 101445.0], [50.1, 101445.0], [50.2, 101498.0], [50.3, 101498.0], [50.4, 101599.0], [50.5, 102021.0], [50.6, 102021.0], [50.7, 102411.0], [50.8, 102411.0], [50.9, 102970.0], [51.0, 103085.0], [51.1, 103085.0], [51.2, 103098.0], [51.3, 103098.0], [51.4, 103283.0], [51.5, 103423.0], [51.6, 103423.0], [51.7, 103517.0], [51.8, 103517.0], [51.9, 103540.0], [52.0, 103823.0], [52.1, 103823.0], [52.2, 103943.0], [52.3, 103943.0], [52.4, 105331.0], [52.5, 105901.0], [52.6, 105901.0], [52.7, 105915.0], [52.8, 105915.0], [52.9, 105957.0], [53.0, 105997.0], [53.1, 105997.0], [53.2, 106123.0], [53.3, 106123.0], [53.4, 106279.0], [53.5, 106316.0], [53.6, 106316.0], [53.7, 107480.0], [53.8, 107480.0], [53.9, 107506.0], [54.0, 107588.0], [54.1, 107588.0], [54.2, 107601.0], [54.3, 107601.0], [54.4, 107621.0], [54.5, 107708.0], [54.6, 107708.0], [54.7, 107825.0], [54.8, 107825.0], [54.9, 108151.0], [55.0, 108339.0], [55.1, 108339.0], [55.2, 108354.0], [55.3, 108354.0], [55.4, 108682.0], [55.5, 108878.0], [55.6, 108878.0], [55.7, 108986.0], [55.8, 108986.0], [55.9, 109022.0], [56.0, 109108.0], [56.1, 109108.0], [56.2, 110179.0], [56.3, 110179.0], [56.4, 110244.0], [56.5, 110698.0], [56.6, 110698.0], [56.7, 111276.0], [56.8, 111276.0], [56.9, 111497.0], [57.0, 112113.0], [57.1, 112113.0], [57.2, 112138.0], [57.3, 112138.0], [57.4, 112160.0], [57.5, 112352.0], [57.6, 112352.0], [57.7, 112440.0], [57.8, 112440.0], [57.9, 112712.0], [58.0, 112841.0], [58.1, 112841.0], [58.2, 112898.0], [58.3, 112898.0], [58.4, 112913.0], [58.5, 114131.0], [58.6, 114131.0], [58.7, 114238.0], [58.8, 114238.0], [58.9, 114349.0], [59.0, 114508.0], [59.1, 114508.0], [59.2, 114652.0], [59.3, 114652.0], [59.4, 114735.0], [59.5, 114748.0], [59.6, 114748.0], [59.7, 114770.0], [59.8, 114770.0], [59.9, 114821.0], [60.0, 115151.0], [60.1, 115151.0], [60.2, 115506.0], [60.3, 115506.0], [60.4, 115569.0], [60.5, 115610.0], [60.6, 115610.0], [60.7, 115910.0], [60.8, 115910.0], [60.9, 115936.0], [61.0, 116061.0], [61.1, 116061.0], [61.2, 116104.0], [61.3, 116104.0], [61.4, 116753.0], [61.5, 116775.0], [61.6, 116775.0], [61.7, 116779.0], [61.8, 116779.0], [61.9, 116972.0], [62.0, 117202.0], [62.1, 117202.0], [62.2, 117205.0], [62.3, 117205.0], [62.4, 117207.0], [62.5, 117231.0], [62.6, 117231.0], [62.7, 117235.0], [62.8, 117235.0], [62.9, 117250.0], [63.0, 117335.0], [63.1, 117335.0], [63.2, 117407.0], [63.3, 117407.0], [63.4, 117441.0], [63.5, 117468.0], [63.6, 117468.0], [63.7, 117500.0], [63.8, 117500.0], [63.9, 117555.0], [64.0, 117577.0], [64.1, 117577.0], [64.2, 117586.0], [64.3, 117586.0], [64.4, 117639.0], [64.5, 117682.0], [64.6, 117682.0], [64.7, 117746.0], [64.8, 117746.0], [64.9, 117784.0], [65.0, 117830.0], [65.1, 117830.0], [65.2, 117870.0], [65.3, 117870.0], [65.4, 117970.0], [65.5, 117972.0], [65.6, 117972.0], [65.7, 118073.0], [65.8, 118073.0], [65.9, 118104.0], [66.0, 118113.0], [66.1, 118113.0], [66.2, 118115.0], [66.3, 118115.0], [66.4, 118275.0], [66.5, 118305.0], [66.6, 118305.0], [66.7, 118380.0], [66.8, 118380.0], [66.9, 118531.0], [67.0, 118661.0], [67.1, 118661.0], [67.2, 118699.0], [67.3, 118699.0], [67.4, 118706.0], [67.5, 118768.0], [67.6, 118768.0], [67.7, 118818.0], [67.8, 118818.0], [67.9, 118855.0], [68.0, 118886.0], [68.1, 118886.0], [68.2, 118888.0], [68.3, 118888.0], [68.4, 118928.0], [68.5, 118939.0], [68.6, 118939.0], [68.7, 118955.0], [68.8, 118955.0], [68.9, 118956.0], [69.0, 119016.0], [69.1, 119016.0], [69.2, 119030.0], [69.3, 119030.0], [69.4, 119055.0], [69.5, 119086.0], [69.6, 119086.0], [69.7, 119089.0], [69.8, 119089.0], [69.9, 119108.0], [70.0, 119114.0], [70.1, 119114.0], [70.2, 119118.0], [70.3, 119118.0], [70.4, 119230.0], [70.5, 119258.0], [70.6, 119258.0], [70.7, 119338.0], [70.8, 119338.0], [70.9, 119353.0], [71.0, 119365.0], [71.1, 119365.0], [71.2, 119403.0], [71.3, 119403.0], [71.4, 119523.0], [71.5, 119540.0], [71.6, 119540.0], [71.7, 119544.0], [71.8, 119544.0], [71.9, 119549.0], [72.0, 119613.0], [72.1, 119613.0], [72.2, 119641.0], [72.3, 119641.0], [72.4, 119666.0], [72.5, 119679.0], [72.6, 119679.0], [72.7, 119686.0], [72.8, 119686.0], [72.9, 119693.0], [73.0, 119710.0], [73.1, 119710.0], [73.2, 119737.0], [73.3, 119737.0], [73.4, 119739.0], [73.5, 119756.0], [73.6, 119756.0], [73.7, 119763.0], [73.8, 119763.0], [73.9, 119773.0], [74.0, 119788.0], [74.1, 119788.0], [74.2, 119836.0], [74.3, 119836.0], [74.4, 119838.0], [74.5, 119850.0], [74.6, 119850.0], [74.7, 119857.0], [74.8, 119857.0], [74.9, 119864.0], [75.0, 119873.0], [75.1, 119873.0], [75.2, 119936.0], [75.3, 119936.0], [75.4, 119940.0], [75.5, 119953.0], [75.6, 119953.0], [75.7, 119956.0], [75.8, 119956.0], [75.9, 120035.0], [76.0, 120042.0], [76.1, 120042.0], [76.2, 120065.0], [76.3, 120065.0], [76.4, 120074.0], [76.5, 120086.0], [76.6, 120086.0], [76.7, 120090.0], [76.8, 120090.0], [76.9, 120105.0], [77.0, 120109.0], [77.1, 120109.0], [77.2, 120120.0], [77.3, 120120.0], [77.4, 120132.0], [77.5, 120162.0], [77.6, 120162.0], [77.7, 120238.0], [77.8, 120238.0], [77.9, 120241.0], [78.0, 120241.0], [78.1, 120246.0], [78.2, 120256.0], [78.3, 120256.0], [78.4, 120276.0], [78.5, 120276.0], [78.6, 120288.0], [78.7, 120319.0], [78.8, 120319.0], [78.9, 120324.0], [79.0, 120324.0], [79.1, 120359.0], [79.2, 120377.0], [79.3, 120377.0], [79.4, 120377.0], [79.5, 120377.0], [79.6, 120380.0], [79.7, 120389.0], [79.8, 120389.0], [79.9, 120422.0], [80.0, 120422.0], [80.1, 120429.0], [80.2, 120455.0], [80.3, 120455.0], [80.4, 120501.0], [80.5, 120501.0], [80.6, 120515.0], [80.7, 120517.0], [80.8, 120517.0], [80.9, 120535.0], [81.0, 120535.0], [81.1, 120538.0], [81.2, 120553.0], [81.3, 120553.0], [81.4, 120554.0], [81.5, 120554.0], [81.6, 120574.0], [81.7, 120585.0], [81.8, 120585.0], [81.9, 120601.0], [82.0, 120601.0], [82.1, 120614.0], [82.2, 120617.0], [82.3, 120617.0], [82.4, 120676.0], [82.5, 120676.0], [82.6, 120696.0], [82.7, 120710.0], [82.8, 120710.0], [82.9, 120763.0], [83.0, 120763.0], [83.1, 120818.0], [83.2, 120833.0], [83.3, 120833.0], [83.4, 120834.0], [83.5, 120834.0], [83.6, 120836.0], [83.7, 120843.0], [83.8, 120843.0], [83.9, 120900.0], [84.0, 120900.0], [84.1, 120904.0], [84.2, 120950.0], [84.3, 120950.0], [84.4, 120954.0], [84.5, 120954.0], [84.6, 121009.0], [84.7, 121020.0], [84.8, 121020.0], [84.9, 121029.0], [85.0, 121029.0], [85.1, 121063.0], [85.2, 121071.0], [85.3, 121071.0], [85.4, 121085.0], [85.5, 121085.0], [85.6, 121086.0], [85.7, 121102.0], [85.8, 121102.0], [85.9, 121112.0], [86.0, 121112.0], [86.1, 121123.0], [86.2, 121177.0], [86.3, 121177.0], [86.4, 121192.0], [86.5, 121192.0], [86.6, 121201.0], [86.7, 121207.0], [86.8, 121207.0], [86.9, 121225.0], [87.0, 121225.0], [87.1, 121270.0], [87.2, 121338.0], [87.3, 121338.0], [87.4, 121354.0], [87.5, 121354.0], [87.6, 121368.0], [87.7, 121370.0], [87.8, 121370.0], [87.9, 121383.0], [88.0, 121383.0], [88.1, 121417.0], [88.2, 121421.0], [88.3, 121421.0], [88.4, 121436.0], [88.5, 121436.0], [88.6, 121451.0], [88.7, 121502.0], [88.8, 121502.0], [88.9, 121502.0], [89.0, 121502.0], [89.1, 121505.0], [89.2, 121509.0], [89.3, 121509.0], [89.4, 121519.0], [89.5, 121519.0], [89.6, 121524.0], [89.7, 121528.0], [89.8, 121528.0], [89.9, 121538.0], [90.0, 121538.0], [90.1, 121567.0], [90.2, 121573.0], [90.3, 121573.0], [90.4, 121604.0], [90.5, 121604.0], [90.6, 121620.0], [90.7, 121625.0], [90.8, 121625.0], [90.9, 121686.0], [91.0, 121686.0], [91.1, 121726.0], [91.2, 121736.0], [91.3, 121736.0], [91.4, 121769.0], [91.5, 121769.0], [91.6, 121771.0], [91.7, 121779.0], [91.8, 121779.0], [91.9, 121783.0], [92.0, 121783.0], [92.1, 121794.0], [92.2, 121813.0], [92.3, 121813.0], [92.4, 121841.0], [92.5, 121841.0], [92.6, 121868.0], [92.7, 121901.0], [92.8, 121901.0], [92.9, 121909.0], [93.0, 121909.0], [93.1, 121919.0], [93.2, 121929.0], [93.3, 121929.0], [93.4, 121941.0], [93.5, 121941.0], [93.6, 121949.0], [93.7, 121986.0], [93.8, 121986.0], [93.9, 121988.0], [94.0, 121988.0], [94.1, 121990.0], [94.2, 122014.0], [94.3, 122014.0], [94.4, 122044.0], [94.5, 122044.0], [94.6, 122071.0], [94.7, 122086.0], [94.8, 122086.0], [94.9, 122099.0], [95.0, 122099.0], [95.1, 122131.0], [95.2, 122152.0], [95.3, 122152.0], [95.4, 122192.0], [95.5, 122192.0], [95.6, 122194.0], [95.7, 122201.0], [95.8, 122201.0], [95.9, 122217.0], [96.0, 122217.0], [96.1, 122244.0], [96.2, 122283.0], [96.3, 122283.0], [96.4, 122303.0], [96.5, 122303.0], [96.6, 122334.0], [96.7, 122353.0], [96.8, 122353.0], [96.9, 122368.0], [97.0, 122368.0], [97.1, 122371.0], [97.2, 122389.0], [97.3, 122389.0], [97.4, 122389.0], [97.5, 122389.0], [97.6, 122435.0], [97.7, 122446.0], [97.8, 122446.0], [97.9, 122485.0], [98.0, 122485.0], [98.1, 122518.0], [98.2, 122544.0], [98.3, 122544.0], [98.4, 122554.0], [98.5, 122554.0], [98.6, 122561.0], [98.7, 122588.0], [98.8, 122588.0], [98.9, 122601.0], [99.0, 122601.0], [99.1, 122609.0], [99.2, 122622.0], [99.3, 122622.0], [99.4, 122719.0], [99.5, 122719.0], [99.6, 122858.0], [99.7, 122875.0], [99.8, 122875.0], [99.9, 122888.0], [100.0, 122888.0]], "isOverall": false, "label": "Create Issue User 550 Ramp 1", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 60000.0, "maxY": 10.0, "series": [{"data": [[69900.0, 5.0], [71500.0, 3.0], [70700.0, 2.0], [72300.0, 1.0], [74700.0, 1.0], [79500.0, 1.0], [80300.0, 2.0], [83500.0, 2.0], [85900.0, 3.0], [86700.0, 2.0], [89900.0, 2.0], [90700.0, 2.0], [91500.0, 1.0], [94700.0, 1.0], [97100.0, 1.0], [99500.0, 2.0], [100300.0, 1.0], [101100.0, 1.0], [103500.0, 2.0], [105900.0, 4.0], [107500.0, 2.0], [108300.0, 2.0], [109100.0, 1.0], [112300.0, 1.0], [114700.0, 3.0], [115500.0, 2.0], [117900.0, 2.0], [118700.0, 2.0], [119500.0, 4.0], [120300.0, 7.0], [121100.0, 5.0], [121900.0, 9.0], [122700.0, 1.0], [60900.0, 9.0], [60500.0, 1.0], [61300.0, 1.0], [61700.0, 1.0], [71400.0, 4.0], [69800.0, 5.0], [70600.0, 5.0], [72200.0, 2.0], [75400.0, 2.0], [78600.0, 1.0], [80200.0, 4.0], [81000.0, 1.0], [83400.0, 1.0], [85800.0, 2.0], [86600.0, 1.0], [87400.0, 1.0], [89000.0, 1.0], [90600.0, 3.0], [91400.0, 2.0], [93800.0, 1.0], [98600.0, 3.0], [99400.0, 1.0], [100200.0, 2.0], [103400.0, 1.0], [107400.0, 1.0], [109000.0, 1.0], [110600.0, 1.0], [111400.0, 1.0], [114600.0, 1.0], [117800.0, 2.0], [118600.0, 2.0], [119400.0, 1.0], [120200.0, 6.0], [121000.0, 7.0], [121800.0, 3.0], [122600.0, 3.0], [71300.0, 4.0], [69700.0, 4.0], [70500.0, 2.0], [76100.0, 1.0], [82500.0, 1.0], [85700.0, 1.0], [86500.0, 3.0], [87300.0, 2.0], [88100.0, 1.0], [88900.0, 1.0], [90500.0, 1.0], [91300.0, 2.0], [92900.0, 1.0], [96100.0, 1.0], [97700.0, 1.0], [99300.0, 1.0], [100900.0, 2.0], [108100.0, 1.0], [108900.0, 1.0], [112100.0, 3.0], [112900.0, 1.0], [114500.0, 1.0], [116100.0, 1.0], [116900.0, 1.0], [117700.0, 2.0], [118500.0, 1.0], [119300.0, 3.0], [120100.0, 5.0], [120900.0, 4.0], [121700.0, 7.0], [122500.0, 5.0], [60000.0, 1.0], [60800.0, 1.0], [61200.0, 4.0], [61600.0, 5.0], [69600.0, 5.0], [71200.0, 8.0], [70400.0, 6.0], [73600.0, 1.0], [72000.0, 2.0], [74400.0, 1.0], [75200.0, 1.0], [84000.0, 1.0], [85600.0, 1.0], [87200.0, 1.0], [88000.0, 1.0], [90400.0, 3.0], [91200.0, 1.0], [95200.0, 1.0], [96000.0, 1.0], [99200.0, 2.0], [102400.0, 1.0], [103200.0, 1.0], [108800.0, 1.0], [111200.0, 1.0], [112800.0, 2.0], [116000.0, 1.0], [117600.0, 2.0], [119200.0, 2.0], [120000.0, 6.0], [120800.0, 5.0], [121600.0, 4.0], [122400.0, 3.0], [69500.0, 4.0], [71100.0, 2.0], [70300.0, 4.0], [73500.0, 1.0], [71900.0, 1.0], [74300.0, 1.0], [83100.0, 2.0], [83900.0, 1.0], [85500.0, 3.0], [87100.0, 1.0], [91100.0, 4.0], [95100.0, 1.0], [97500.0, 1.0], [99100.0, 1.0], [101500.0, 1.0], [103900.0, 1.0], [106300.0, 1.0], [112700.0, 1.0], [114300.0, 1.0], [115100.0, 1.0], [115900.0, 2.0], [116700.0, 3.0], [117500.0, 4.0], [118300.0, 2.0], [119100.0, 3.0], [119900.0, 4.0], [120700.0, 2.0], [121500.0, 10.0], [122300.0, 7.0], [60300.0, 1.0], [60700.0, 2.0], [61100.0, 4.0], [61500.0, 3.0], [71000.0, 6.0], [70200.0, 5.0], [71800.0, 2.0], [79000.0, 1.0], [80600.0, 1.0], [83000.0, 1.0], [87000.0, 5.0], [90200.0, 4.0], [91000.0, 2.0], [91800.0, 1.0], [98200.0, 1.0], [99000.0, 1.0], [99800.0, 1.0], [101400.0, 3.0], [103000.0, 2.0], [103800.0, 1.0], [106200.0, 1.0], [107800.0, 1.0], [108600.0, 1.0], [110200.0, 1.0], [114200.0, 1.0], [117400.0, 3.0], [118200.0, 1.0], [119000.0, 5.0], [119800.0, 6.0], [120600.0, 5.0], [121400.0, 4.0], [122200.0, 4.0], [70900.0, 3.0], [70100.0, 5.0], [71700.0, 6.0], [72500.0, 1.0], [74900.0, 1.0], [82900.0, 4.0], [86900.0, 2.0], [86100.0, 1.0], [90100.0, 1.0], [90900.0, 1.0], [94900.0, 1.0], [98100.0, 1.0], [98900.0, 2.0], [99700.0, 2.0], [100500.0, 2.0], [101300.0, 1.0], [102900.0, 1.0], [105300.0, 1.0], [106100.0, 1.0], [107700.0, 1.0], [110100.0, 1.0], [114100.0, 1.0], [117300.0, 1.0], [118100.0, 3.0], [118900.0, 4.0], [119700.0, 7.0], [120500.0, 9.0], [121300.0, 5.0], [122100.0, 4.0], [61000.0, 1.0], [60200.0, 4.0], [61400.0, 3.0], [70000.0, 3.0], [70800.0, 7.0], [74800.0, 1.0], [78000.0, 1.0], [79600.0, 1.0], [85200.0, 1.0], [86800.0, 2.0], [87600.0, 1.0], [89200.0, 1.0], [90800.0, 3.0], [96400.0, 1.0], [97200.0, 1.0], [99600.0, 2.0], [100400.0, 1.0], [102000.0, 1.0], [107600.0, 2.0], [112400.0, 1.0], [114800.0, 1.0], [115600.0, 1.0], [117200.0, 6.0], [118000.0, 1.0], [118800.0, 4.0], [119600.0, 6.0], [120400.0, 3.0], [121200.0, 4.0], [122000.0, 5.0], [122800.0, 3.0]], "isOverall": false, "label": "Create Issue User 550 Ramp 1", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 122800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 600.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 600.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 600.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 214.5, "minX": 1.71585204E12, "maxY": 514.5, "series": [{"data": [[1.71585204E12, 514.5], [1.7158521E12, 214.5]], "isOverall": false, "label": "User 600 Ramp 1", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7158521E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 60039.0, "minX": 1.0, "maxY": 122888.0, "series": [{"data": [[2.0, 122858.0], [3.0, 122554.0], [4.0, 122888.0], [5.0, 122609.0], [6.0, 122561.0], [7.0, 122518.0], [8.0, 122622.0], [9.0, 122601.0], [10.0, 122544.0], [11.0, 122588.0], [12.0, 122719.0], [13.0, 122435.0], [14.0, 122389.0], [15.0, 122485.0], [16.0, 122389.0], [17.0, 122368.0], [18.0, 122446.0], [19.0, 122353.0], [20.0, 122303.0], [21.0, 122192.0], [22.0, 122283.0], [23.0, 122217.0], [24.0, 122334.0], [25.0, 122371.0], [26.0, 122086.0], [27.0, 122244.0], [28.0, 122131.0], [29.0, 122152.0], [30.0, 122071.0], [31.0, 122194.0], [33.0, 121941.0], [32.0, 122044.0], [35.0, 122201.0], [34.0, 121909.0], [37.0, 121929.0], [36.0, 122014.0], [39.0, 121988.0], [38.0, 121901.0], [41.0, 121868.0], [40.0, 121986.0], [43.0, 121794.0], [42.0, 122099.0], [45.0, 121841.0], [44.0, 121919.0], [47.0, 121783.0], [46.0, 121726.0], [49.0, 121990.0], [48.0, 121949.0], [51.0, 121779.0], [50.0, 121736.0], [53.0, 121771.0], [52.0, 121769.0], [55.0, 121604.0], [54.0, 121686.0], [57.0, 121567.0], [56.0, 121573.0], [59.0, 121524.0], [58.0, 121620.0], [61.0, 121528.0], [60.0, 121436.0], [63.0, 121813.0], [62.0, 121625.0], [67.0, 121421.0], [66.0, 121538.0], [65.0, 121505.0], [64.0, 121370.0], [71.0, 121368.0], [70.0, 121502.0], [69.0, 121383.0], [68.0, 121417.0], [75.0, 121354.0], [74.0, 121502.0], [73.0, 121192.0], [72.0, 121338.0], [79.0, 121509.0], [78.0, 121086.0], [77.0, 121519.0], [76.0, 121177.0], [83.0, 121451.0], [82.0, 121123.0], [81.0, 121112.0], [80.0, 121063.0], [87.0, 121029.0], [86.0, 121207.0], [85.0, 121102.0], [84.0, 121225.0], [91.0, 121009.0], [90.0, 121270.0], [89.0, 121201.0], [88.0, 120904.0], [95.0, 120954.0], [94.0, 120763.0], [93.0, 121020.0], [92.0, 121071.0], [99.0, 120833.0], [98.0, 120676.0], [97.0, 120834.0], [96.0, 121085.0], [103.0, 120614.0], [102.0, 120517.0], [101.0, 120900.0], [100.0, 120950.0], [107.0, 120710.0], [106.0, 120843.0], [105.0, 120696.0], [104.0, 120818.0], [111.0, 120429.0], [110.0, 120836.0], [109.0, 120585.0], [108.0, 120574.0], [115.0, 120535.0], [114.0, 120554.0], [113.0, 120501.0], [112.0, 120422.0], [119.0, 120538.0], [118.0, 120246.0], [117.0, 120515.0], [116.0, 120324.0], [123.0, 120617.0], [122.0, 120553.0], [121.0, 120601.0], [120.0, 120288.0], [127.0, 120276.0], [126.0, 120256.0], [125.0, 120455.0], [124.0, 120377.0], [135.0, 120162.0], [134.0, 120074.0], [133.0, 120319.0], [132.0, 120380.0], [131.0, 120359.0], [130.0, 120377.0], [129.0, 120042.0], [128.0, 120389.0], [143.0, 120035.0], [142.0, 120238.0], [141.0, 119953.0], [140.0, 119940.0], [139.0, 119936.0], [138.0, 120132.0], [137.0, 120109.0], [136.0, 120120.0], [151.0, 119836.0], [150.0, 119763.0], [149.0, 120065.0], [148.0, 120090.0], [147.0, 119873.0], [146.0, 120086.0], [145.0, 119956.0], [144.0, 120241.0], [159.0, 119773.0], [158.0, 119838.0], [157.0, 119693.0], [156.0, 119739.0], [155.0, 119857.0], [154.0, 119850.0], [153.0, 119788.0], [152.0, 119679.0], [167.0, 119365.0], [166.0, 119737.0], [165.0, 119641.0], [164.0, 119710.0], [163.0, 119864.0], [162.0, 119686.0], [161.0, 119549.0], [160.0, 120105.0], [175.0, 119613.0], [174.0, 119544.0], [173.0, 119403.0], [172.0, 119666.0], [171.0, 119540.0], [170.0, 119756.0], [169.0, 119258.0], [168.0, 119523.0], [183.0, 118939.0], [182.0, 118818.0], [181.0, 119030.0], [180.0, 119118.0], [179.0, 119353.0], [178.0, 119114.0], [177.0, 119230.0], [176.0, 119338.0], [191.0, 118768.0], [190.0, 118956.0], [189.0, 118955.0], [188.0, 118928.0], [187.0, 119055.0], [186.0, 119089.0], [185.0, 119108.0], [184.0, 119016.0], [199.0, 118531.0], [198.0, 118699.0], [197.0, 118706.0], [196.0, 118888.0], [195.0, 119086.0], [194.0, 118855.0], [193.0, 118661.0], [192.0, 118886.0], [207.0, 118104.0], [206.0, 118113.0], [205.0, 118115.0], [204.0, 118073.0], [203.0, 117972.0], [202.0, 118305.0], [201.0, 118380.0], [200.0, 118275.0], [215.0, 117830.0], [214.0, 117746.0], [213.0, 117577.0], [212.0, 117784.0], [211.0, 117870.0], [210.0, 117682.0], [209.0, 117586.0], [208.0, 117970.0], [223.0, 117407.0], [222.0, 117231.0], [221.0, 117250.0], [220.0, 117441.0], [219.0, 117468.0], [218.0, 117555.0], [217.0, 117639.0], [216.0, 117500.0], [231.0, 116779.0], [230.0, 116972.0], [229.0, 117202.0], [228.0, 116753.0], [227.0, 117205.0], [226.0, 117235.0], [225.0, 117207.0], [224.0, 117335.0], [239.0, 115506.0], [238.0, 115569.0], [237.0, 115610.0], [236.0, 115910.0], [235.0, 115936.0], [234.0, 116061.0], [233.0, 116104.0], [232.0, 116775.0], [247.0, 114508.0], [246.0, 114131.0], [245.0, 114748.0], [244.0, 114652.0], [243.0, 114770.0], [242.0, 114735.0], [241.0, 114821.0], [240.0, 115151.0], [255.0, 112352.0], [254.0, 112440.0], [253.0, 112712.0], [252.0, 112898.0], [251.0, 112841.0], [250.0, 112913.0], [249.0, 114349.0], [248.0, 114238.0], [270.0, 108339.0], [271.0, 108151.0], [269.0, 108354.0], [268.0, 108682.0], [267.0, 108986.0], [266.0, 108878.0], [265.0, 109108.0], [264.0, 109022.0], [263.0, 110244.0], [257.0, 112138.0], [256.0, 112113.0], [259.0, 111497.0], [258.0, 112160.0], [262.0, 110179.0], [261.0, 110698.0], [260.0, 111276.0], [286.0, 105331.0], [287.0, 103943.0], [285.0, 105901.0], [284.0, 105957.0], [283.0, 105915.0], [282.0, 106123.0], [281.0, 105997.0], [280.0, 106316.0], [279.0, 106279.0], [273.0, 107825.0], [272.0, 107708.0], [275.0, 107480.0], [274.0, 107506.0], [278.0, 107621.0], [277.0, 107588.0], [276.0, 107601.0], [302.0, 101311.0], [303.0, 101101.0], [301.0, 101445.0], [300.0, 101408.0], [299.0, 101498.0], [298.0, 101599.0], [297.0, 102021.0], [296.0, 102411.0], [295.0, 103098.0], [289.0, 103540.0], [288.0, 103823.0], [291.0, 103517.0], [290.0, 103423.0], [294.0, 102970.0], [293.0, 103085.0], [292.0, 103283.0], [318.0, 99469.0], [319.0, 99638.0], [317.0, 99597.0], [316.0, 99583.0], [315.0, 99717.0], [314.0, 99787.0], [313.0, 99640.0], [312.0, 99815.0], [311.0, 100277.0], [305.0, 100973.0], [304.0, 100920.0], [307.0, 100397.0], [306.0, 100588.0], [310.0, 100554.0], [309.0, 100429.0], [308.0, 100279.0], [334.0, 97274.0], [335.0, 97153.0], [333.0, 97555.0], [332.0, 97786.0], [331.0, 98128.0], [330.0, 98234.0], [329.0, 98670.0], [328.0, 98643.0], [327.0, 98913.0], [321.0, 99364.0], [320.0, 99296.0], [323.0, 99226.0], [322.0, 99190.0], [326.0, 98965.0], [325.0, 98622.0], [324.0, 99025.0], [350.0, 91193.0], [351.0, 91373.0], [349.0, 91422.0], [348.0, 91399.0], [347.0, 91458.0], [346.0, 91563.0], [345.0, 91845.0], [344.0, 92901.0], [343.0, 93871.0], [337.0, 96173.0], [336.0, 96497.0], [339.0, 95298.0], [338.0, 96007.0], [342.0, 94952.0], [341.0, 94799.0], [340.0, 95165.0], [366.0, 90480.0], [367.0, 90713.0], [365.0, 90622.0], [364.0, 90584.0], [363.0, 90683.0], [362.0, 90939.0], [361.0, 90893.0], [360.0, 90856.0], [359.0, 91022.0], [353.0, 91224.0], [352.0, 91137.0], [355.0, 91154.0], [354.0, 91156.0], [358.0, 91026.0], [357.0, 90788.0], [356.0, 90807.0], [382.0, 88060.0], [383.0, 87651.0], [381.0, 88179.0], [380.0, 88920.0], [379.0, 89024.0], [378.0, 89203.0], [377.0, 89974.0], [376.0, 89969.0], [375.0, 90159.0], [369.0, 90417.0], [368.0, 90601.0], [371.0, 90241.0], [370.0, 90495.0], [374.0, 90262.0], [373.0, 90229.0], [372.0, 90298.0], [398.0, 86718.0], [399.0, 86844.0], [397.0, 86927.0], [396.0, 86735.0], [395.0, 86920.0], [394.0, 87012.0], [393.0, 87035.0], [392.0, 87014.0], [391.0, 86881.0], [385.0, 87421.0], [384.0, 87377.0], [387.0, 87083.0], [386.0, 87354.0], [390.0, 87033.0], [389.0, 87120.0], [388.0, 87206.0], [414.0, 85531.0], [415.0, 85271.0], [413.0, 85561.0], [412.0, 85556.0], [411.0, 85635.0], [410.0, 85760.0], [409.0, 85874.0], [408.0, 85915.0], [407.0, 85983.0], [401.0, 86604.0], [400.0, 86570.0], [403.0, 86510.0], [402.0, 86500.0], [406.0, 85892.0], [405.0, 85934.0], [404.0, 86118.0], [430.0, 80630.0], [431.0, 80345.0], [429.0, 81032.0], [428.0, 82523.0], [427.0, 82930.0], [426.0, 83029.0], [425.0, 82912.0], [424.0, 82930.0], [423.0, 82948.0], [417.0, 83999.0], [416.0, 84033.0], [419.0, 83541.0], [418.0, 83551.0], [422.0, 83105.0], [421.0, 83179.0], [420.0, 83493.0], [446.0, 75432.0], [447.0, 74976.0], [445.0, 74862.0], [444.0, 75413.0], [443.0, 75202.0], [442.0, 76184.0], [441.0, 78005.0], [440.0, 78624.0], [439.0, 79076.0], [433.0, 80296.0], [432.0, 80351.0], [435.0, 80216.0], [434.0, 80268.0], [438.0, 79565.0], [437.0, 79665.0], [436.0, 80227.0], [462.0, 71763.0], [463.0, 71757.0], [461.0, 71829.0], [460.0, 71885.0], [459.0, 71958.0], [458.0, 72007.0], [457.0, 72074.0], [456.0, 72280.0], [455.0, 72298.0], [449.0, 74483.0], [448.0, 74787.0], [451.0, 73611.0], [450.0, 74354.0], [454.0, 72349.0], [453.0, 72568.0], [452.0, 73556.0], [478.0, 71313.0], [479.0, 71279.0], [477.0, 71337.0], [476.0, 71370.0], [475.0, 71372.0], [474.0, 71404.0], [473.0, 71402.0], [472.0, 71414.0], [471.0, 71461.0], [465.0, 71738.0], [464.0, 71730.0], [467.0, 71711.0], [466.0, 71726.0], [470.0, 71543.0], [469.0, 71569.0], [468.0, 71591.0], [494.0, 71013.0], [495.0, 70961.0], [493.0, 71034.0], [492.0, 71027.0], [491.0, 71051.0], [490.0, 71072.0], [489.0, 71085.0], [488.0, 71119.0], [487.0, 71142.0], [481.0, 71265.0], [480.0, 71281.0], [483.0, 71238.0], [482.0, 71262.0], [486.0, 71215.0], [485.0, 71238.0], [484.0, 71248.0], [510.0, 70629.0], [511.0, 70613.0], [509.0, 70637.0], [508.0, 70660.0], [507.0, 70678.0], [506.0, 70722.0], [505.0, 70739.0], [504.0, 70802.0], [503.0, 70818.0], [497.0, 70904.0], [496.0, 70941.0], [499.0, 70844.0], [498.0, 70866.0], [502.0, 70825.0], [501.0, 70831.0], [500.0, 70852.0], [540.0, 69939.0], [543.0, 69857.0], [529.0, 70144.0], [528.0, 70214.0], [531.0, 70147.0], [530.0, 70159.0], [533.0, 70103.0], [532.0, 70130.0], [542.0, 69879.0], [541.0, 69935.0], [539.0, 69978.0], [538.0, 69996.0], [537.0, 69990.0], [536.0, 70016.0], [527.0, 70222.0], [513.0, 70547.0], [512.0, 70591.0], [515.0, 70492.0], [514.0, 70490.0], [517.0, 70472.0], [516.0, 70479.0], [519.0, 70400.0], [518.0, 70414.0], [526.0, 70227.0], [525.0, 70276.0], [524.0, 70262.0], [523.0, 70327.0], [522.0, 70340.0], [521.0, 70370.0], [520.0, 70381.0], [535.0, 70031.0], [534.0, 70069.0], [572.0, 61380.0], [575.0, 61221.0], [561.0, 61699.0], [560.0, 61714.0], [563.0, 61664.0], [562.0, 61689.0], [565.0, 61634.0], [564.0, 61649.0], [574.0, 61244.0], [573.0, 61245.0], [571.0, 61476.0], [570.0, 61487.0], [569.0, 61493.0], [568.0, 61506.0], [559.0, 69562.0], [545.0, 69807.0], [544.0, 69822.0], [547.0, 69752.0], [546.0, 69802.0], [549.0, 69755.0], [548.0, 69768.0], [551.0, 69671.0], [550.0, 69732.0], [558.0, 69565.0], [557.0, 69578.0], [556.0, 69592.0], [555.0, 69604.0], [554.0, 69618.0], [553.0, 69661.0], [552.0, 69657.0], [567.0, 61524.0], [566.0, 61530.0], [592.0, 60286.0], [596.0, 60995.0], [600.0, 60039.0], [583.0, 60942.0], [582.0, 60950.0], [581.0, 60974.0], [580.0, 61108.0], [579.0, 61122.0], [578.0, 61153.0], [577.0, 61184.0], [576.0, 61226.0], [599.0, 60915.0], [598.0, 60922.0], [597.0, 60223.0], [595.0, 60972.0], [594.0, 60976.0], [593.0, 60257.0], [591.0, 60297.0], [590.0, 60306.0], [589.0, 61083.0], [588.0, 60550.0], [587.0, 60727.0], [586.0, 60735.0], [585.0, 60897.0], [584.0, 60924.0], [1.0, 122875.0]], "isOverall": false, "label": "Create Issue User 550 Ramp 1", "isController": false}, {"data": [[300.5, 98341.92000000009]], "isOverall": false, "label": "Create Issue User 550 Ramp 1-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 600.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 4784.466666666666, "minX": 1.71585204E12, "maxY": 20793.666666666668, "series": [{"data": [[1.71585204E12, 6494.333333333333], [1.7158521E12, 20793.666666666668]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.71585204E12, 4784.466666666666], [1.7158521E12, 11905.533333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7158521E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 69385.12209302324, "minX": 1.71585204E12, "maxY": 109978.76401869167, "series": [{"data": [[1.71585204E12, 69385.12209302324], [1.7158521E12, 109978.76401869167]], "isOverall": false, "label": "Create Issue User 550 Ramp 1", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7158521E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 69384.85465116278, "minX": 1.71585204E12, "maxY": 109978.52570093467, "series": [{"data": [[1.71585204E12, 69384.85465116278], [1.7158521E12, 109978.52570093467]], "isOverall": false, "label": "Create Issue User 550 Ramp 1", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7158521E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.6962616822429902, "minX": 1.71585204E12, "maxY": 11.325581395348838, "series": [{"data": [[1.71585204E12, 11.325581395348838], [1.7158521E12, 0.6962616822429902]], "isOverall": false, "label": "Create Issue User 550 Ramp 1", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7158521E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 60039.0, "minX": 1.71585204E12, "maxY": 122888.0, "series": [{"data": [[1.71585204E12, 81032.0], [1.7158521E12, 122888.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.71585204E12, 60039.0], [1.7158521E12, 82523.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.71585204E12, 75134.2], [1.7158521E12, 121910.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.71585204E12, 80738.54000000001], [1.7158521E12, 122690.87]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.71585204E12, 70491.0], [1.7158521E12, 117612.5]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.71585204E12, 79857.84999999999], [1.7158521E12, 122320.05]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7158521E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 61041.0, "minX": 1.0, "maxY": 121988.0, "series": [{"data": [[2.0, 94875.5], [8.0, 101971.5], [9.0, 91399.0], [36.0, 119174.0], [42.0, 70443.0], [46.0, 121117.5], [12.0, 85817.0], [3.0, 109022.0], [49.0, 121988.0], [13.0, 99583.0], [53.0, 120238.0], [16.0, 61041.0], [4.0, 86064.5], [1.0, 93386.0], [17.0, 86920.0], [5.0, 83551.0], [20.0, 90698.0], [21.0, 71730.0], [23.0, 117407.0], [6.0, 101426.5], [7.0, 108339.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 53.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 61040.0, "minX": 1.0, "maxY": 121988.0, "series": [{"data": [[2.0, 94875.5], [8.0, 101971.5], [9.0, 91398.0], [36.0, 119174.0], [42.0, 70442.5], [46.0, 121117.0], [12.0, 85816.5], [3.0, 109022.0], [49.0, 121988.0], [13.0, 99583.0], [53.0, 120238.0], [16.0, 61040.0], [4.0, 86064.0], [1.0, 93385.5], [17.0, 86920.0], [5.0, 83551.0], [20.0, 90698.0], [21.0, 71730.0], [23.0, 117407.0], [6.0, 101426.5], [7.0, 108339.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 53.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 10.0, "minX": 1.71585198E12, "maxY": 10.0, "series": [{"data": [[1.71585198E12, 10.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71585198E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 2.8666666666666667, "minX": 1.71585204E12, "maxY": 7.133333333333334, "series": [{"data": [[1.71585204E12, 2.8666666666666667], [1.7158521E12, 7.133333333333334]], "isOverall": false, "label": "201", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7158521E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 2.8666666666666667, "minX": 1.71585204E12, "maxY": 7.133333333333334, "series": [{"data": [[1.71585204E12, 2.8666666666666667], [1.7158521E12, 7.133333333333334]], "isOverall": false, "label": "Create Issue User 550 Ramp 1-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7158521E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 2.8666666666666667, "minX": 1.71585204E12, "maxY": 7.133333333333334, "series": [{"data": [[1.71585204E12, 2.8666666666666667], [1.7158521E12, 7.133333333333334]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7158521E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

