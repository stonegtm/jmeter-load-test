/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 67034.0, "minX": 0.0, "maxY": 135348.0, "series": [{"data": [[0.0, 67034.0], [0.1, 67034.0], [0.2, 67042.0], [0.3, 67042.0], [0.4, 67056.0], [0.5, 67297.0], [0.6, 67297.0], [0.7, 67318.0], [0.8, 67323.0], [0.9, 67323.0], [1.0, 67336.0], [1.1, 67345.0], [1.2, 67345.0], [1.3, 67687.0], [1.4, 67721.0], [1.5, 67721.0], [1.6, 67729.0], [1.7, 67820.0], [1.8, 67820.0], [1.9, 67822.0], [2.0, 68631.0], [2.1, 68631.0], [2.2, 68863.0], [2.3, 68863.0], [2.4, 70831.0], [2.5, 70961.0], [2.6, 70961.0], [2.7, 71101.0], [2.8, 71822.0], [2.9, 71822.0], [3.0, 73497.0], [3.1, 77249.0], [3.2, 77249.0], [3.3, 77282.0], [3.4, 77296.0], [3.5, 77296.0], [3.6, 77297.0], [3.7, 77308.0], [3.8, 77308.0], [3.9, 77349.0], [4.0, 77364.0], [4.1, 77364.0], [4.2, 77367.0], [4.3, 77367.0], [4.4, 77420.0], [4.5, 77424.0], [4.6, 77424.0], [4.7, 77434.0], [4.8, 77495.0], [4.9, 77495.0], [5.0, 77500.0], [5.1, 77500.0], [5.2, 77500.0], [5.3, 77509.0], [5.4, 77539.0], [5.5, 77539.0], [5.6, 77552.0], [5.7, 77601.0], [5.8, 77601.0], [5.9, 77623.0], [6.0, 77623.0], [6.1, 77629.0], [6.2, 77638.0], [6.3, 77638.0], [6.4, 77682.0], [6.5, 77691.0], [6.6, 77691.0], [6.7, 77727.0], [6.8, 77741.0], [6.9, 77741.0], [7.0, 77762.0], [7.1, 77774.0], [7.2, 77774.0], [7.3, 77785.0], [7.4, 77831.0], [7.5, 77831.0], [7.6, 77868.0], [7.7, 77907.0], [7.8, 77907.0], [7.9, 77909.0], [8.0, 77909.0], [8.1, 77945.0], [8.2, 77957.0], [8.3, 77957.0], [8.4, 77971.0], [8.5, 77985.0], [8.6, 77985.0], [8.7, 77990.0], [8.8, 77995.0], [8.9, 77995.0], [9.0, 78027.0], [9.1, 78074.0], [9.2, 78074.0], [9.3, 78126.0], [9.4, 78132.0], [9.5, 78132.0], [9.6, 78145.0], [9.7, 78160.0], [9.8, 78160.0], [9.9, 78208.0], [10.0, 78236.0], [10.1, 78236.0], [10.2, 78250.0], [10.3, 78250.0], [10.4, 78300.0], [10.5, 78301.0], [10.6, 78301.0], [10.7, 78304.0], [10.8, 78323.0], [10.9, 78323.0], [11.0, 78327.0], [11.1, 78343.0], [11.2, 78343.0], [11.3, 78370.0], [11.4, 78377.0], [11.5, 78377.0], [11.6, 78407.0], [11.7, 78426.0], [11.8, 78426.0], [11.9, 78457.0], [12.0, 78465.0], [12.1, 78465.0], [12.2, 78508.0], [12.3, 78508.0], [12.4, 78519.0], [12.5, 78523.0], [12.6, 78523.0], [12.7, 78527.0], [12.8, 78533.0], [12.9, 78533.0], [13.0, 78534.0], [13.1, 78546.0], [13.2, 78546.0], [13.3, 78548.0], [13.4, 78637.0], [13.5, 78637.0], [13.6, 78645.0], [13.7, 78666.0], [13.8, 78666.0], [13.9, 78668.0], [14.0, 78688.0], [14.1, 78688.0], [14.2, 78693.0], [14.3, 78693.0], [14.4, 78693.0], [14.5, 78713.0], [14.6, 78713.0], [14.7, 78717.0], [14.8, 78757.0], [14.9, 78757.0], [15.0, 78795.0], [15.1, 78804.0], [15.2, 78804.0], [15.3, 78840.0], [15.4, 78858.0], [15.5, 78858.0], [15.6, 78868.0], [15.7, 78882.0], [15.8, 78882.0], [15.9, 78885.0], [16.0, 78914.0], [16.1, 78914.0], [16.2, 78920.0], [16.3, 78920.0], [16.4, 78944.0], [16.5, 78958.0], [16.6, 78958.0], [16.7, 78992.0], [16.8, 79007.0], [16.9, 79007.0], [17.0, 79045.0], [17.1, 79061.0], [17.2, 79061.0], [17.3, 79066.0], [17.4, 79073.0], [17.5, 79073.0], [17.6, 79093.0], [17.7, 79112.0], [17.8, 79112.0], [17.9, 79120.0], [18.0, 79157.0], [18.1, 79157.0], [18.2, 79166.0], [18.3, 79166.0], [18.4, 79201.0], [18.5, 79207.0], [18.6, 79207.0], [18.7, 79218.0], [18.8, 79249.0], [18.9, 79249.0], [19.0, 79249.0], [19.1, 79276.0], [19.2, 79276.0], [19.3, 79315.0], [19.4, 79349.0], [19.5, 79349.0], [19.6, 79370.0], [19.7, 79413.0], [19.8, 79413.0], [19.9, 79425.0], [20.0, 79443.0], [20.1, 79443.0], [20.2, 79502.0], [20.3, 79502.0], [20.4, 79508.0], [20.5, 79537.0], [20.6, 79537.0], [20.7, 79604.0], [20.8, 79645.0], [20.9, 79645.0], [21.0, 79704.0], [21.1, 79727.0], [21.2, 79727.0], [21.3, 79737.0], [21.4, 79765.0], [21.5, 79765.0], [21.6, 79774.0], [21.7, 79781.0], [21.8, 79781.0], [21.9, 79799.0], [22.0, 79870.0], [22.1, 79870.0], [22.2, 79882.0], [22.3, 79882.0], [22.4, 80397.0], [22.5, 80423.0], [22.6, 80423.0], [22.7, 80849.0], [22.8, 81181.0], [22.9, 81181.0], [23.0, 81278.0], [23.1, 81470.0], [23.2, 81470.0], [23.3, 81951.0], [23.4, 83175.0], [23.5, 83175.0], [23.6, 83736.0], [23.7, 83830.0], [23.8, 83830.0], [23.9, 84242.0], [24.0, 84368.0], [24.1, 84368.0], [24.2, 84391.0], [24.3, 84391.0], [24.4, 84809.0], [24.5, 84986.0], [24.6, 84986.0], [24.7, 85014.0], [24.8, 85047.0], [24.9, 85047.0], [25.0, 85111.0], [25.1, 85175.0], [25.2, 85175.0], [25.3, 85586.0], [25.4, 87652.0], [25.5, 87652.0], [25.6, 87801.0], [25.7, 87900.0], [25.8, 87900.0], [25.9, 87909.0], [26.0, 87948.0], [26.1, 87948.0], [26.2, 87954.0], [26.3, 87954.0], [26.4, 88314.0], [26.5, 88412.0], [26.6, 88412.0], [26.7, 88445.0], [26.8, 88716.0], [26.9, 88716.0], [27.0, 89437.0], [27.1, 89682.0], [27.2, 89682.0], [27.3, 89922.0], [27.4, 90130.0], [27.5, 90130.0], [27.6, 90291.0], [27.7, 90813.0], [27.8, 90813.0], [27.9, 90980.0], [28.0, 91290.0], [28.1, 91290.0], [28.2, 91817.0], [28.3, 91817.0], [28.4, 91974.0], [28.5, 92102.0], [28.6, 92102.0], [28.7, 92131.0], [28.8, 92146.0], [28.9, 92146.0], [29.0, 92151.0], [29.1, 92270.0], [29.2, 92270.0], [29.3, 92376.0], [29.4, 92431.0], [29.5, 92431.0], [29.6, 92435.0], [29.7, 92798.0], [29.8, 92798.0], [29.9, 93026.0], [30.0, 93047.0], [30.1, 93047.0], [30.2, 93104.0], [30.3, 93104.0], [30.4, 93192.0], [30.5, 93612.0], [30.6, 93612.0], [30.7, 93615.0], [30.8, 93818.0], [30.9, 93818.0], [31.0, 93900.0], [31.1, 93914.0], [31.2, 93914.0], [31.3, 93963.0], [31.4, 94215.0], [31.5, 94215.0], [31.6, 94300.0], [31.7, 94357.0], [31.8, 94357.0], [31.9, 94392.0], [32.0, 94491.0], [32.1, 94491.0], [32.2, 94498.0], [32.3, 94498.0], [32.4, 94523.0], [32.5, 94611.0], [32.6, 94611.0], [32.7, 94617.0], [32.8, 94682.0], [32.9, 94682.0], [33.0, 94816.0], [33.1, 94948.0], [33.2, 94948.0], [33.3, 94954.0], [33.4, 95187.0], [33.5, 95187.0], [33.6, 95220.0], [33.7, 95989.0], [33.8, 95989.0], [33.9, 96067.0], [34.0, 96216.0], [34.1, 96216.0], [34.2, 96451.0], [34.3, 96451.0], [34.4, 96642.0], [34.5, 96645.0], [34.6, 96645.0], [34.7, 96684.0], [34.8, 96831.0], [34.9, 96831.0], [35.0, 96888.0], [35.1, 97077.0], [35.2, 97077.0], [35.3, 97185.0], [35.4, 97375.0], [35.5, 97375.0], [35.6, 97419.0], [35.7, 97435.0], [35.8, 97435.0], [35.9, 97488.0], [36.0, 97489.0], [36.1, 97489.0], [36.2, 97526.0], [36.3, 97526.0], [36.4, 97535.0], [36.5, 97563.0], [36.6, 97563.0], [36.7, 97700.0], [36.8, 97729.0], [36.9, 97729.0], [37.0, 97746.0], [37.1, 97773.0], [37.2, 97773.0], [37.3, 97962.0], [37.4, 98018.0], [37.5, 98018.0], [37.6, 98169.0], [37.7, 98207.0], [37.8, 98207.0], [37.9, 98215.0], [38.0, 98385.0], [38.1, 98385.0], [38.2, 98434.0], [38.3, 98434.0], [38.4, 98467.0], [38.5, 98514.0], [38.6, 98514.0], [38.7, 98578.0], [38.8, 98587.0], [38.9, 98587.0], [39.0, 98776.0], [39.1, 98817.0], [39.2, 98817.0], [39.3, 98868.0], [39.4, 98889.0], [39.5, 98889.0], [39.6, 99047.0], [39.7, 99140.0], [39.8, 99140.0], [39.9, 99319.0], [40.0, 99346.0], [40.1, 99346.0], [40.2, 99367.0], [40.3, 99367.0], [40.4, 99546.0], [40.5, 99755.0], [40.6, 99755.0], [40.7, 99866.0], [40.8, 99890.0], [40.9, 99890.0], [41.0, 99910.0], [41.1, 100168.0], [41.2, 100168.0], [41.3, 100196.0], [41.4, 100203.0], [41.5, 100203.0], [41.6, 100356.0], [41.7, 100460.0], [41.8, 100460.0], [41.9, 100474.0], [42.0, 100530.0], [42.1, 100530.0], [42.2, 100544.0], [42.3, 100544.0], [42.4, 101323.0], [42.5, 101583.0], [42.6, 101583.0], [42.7, 101805.0], [42.8, 101847.0], [42.9, 101847.0], [43.0, 101865.0], [43.1, 102002.0], [43.2, 102002.0], [43.3, 102278.0], [43.4, 102392.0], [43.5, 102392.0], [43.6, 102904.0], [43.7, 103365.0], [43.8, 103365.0], [43.9, 103445.0], [44.0, 103818.0], [44.1, 103818.0], [44.2, 103960.0], [44.3, 103960.0], [44.4, 103971.0], [44.5, 104115.0], [44.6, 104115.0], [44.7, 104156.0], [44.8, 104181.0], [44.9, 104181.0], [45.0, 104534.0], [45.1, 104947.0], [45.2, 104947.0], [45.3, 105082.0], [45.4, 105132.0], [45.5, 105132.0], [45.6, 105135.0], [45.7, 105506.0], [45.8, 105506.0], [45.9, 105540.0], [46.0, 105657.0], [46.1, 105657.0], [46.2, 105742.0], [46.3, 105742.0], [46.4, 105932.0], [46.5, 106181.0], [46.6, 106181.0], [46.7, 106316.0], [46.8, 106484.0], [46.9, 106484.0], [47.0, 106579.0], [47.1, 106996.0], [47.2, 106996.0], [47.3, 107007.0], [47.4, 107079.0], [47.5, 107079.0], [47.6, 107095.0], [47.7, 107119.0], [47.8, 107119.0], [47.9, 107511.0], [48.0, 107703.0], [48.1, 107703.0], [48.2, 107780.0], [48.3, 107780.0], [48.4, 107863.0], [48.5, 107899.0], [48.6, 107899.0], [48.7, 107913.0], [48.8, 107962.0], [48.9, 107962.0], [49.0, 108009.0], [49.1, 108110.0], [49.2, 108110.0], [49.3, 108719.0], [49.4, 108768.0], [49.5, 108768.0], [49.6, 108817.0], [49.7, 108840.0], [49.8, 108840.0], [49.9, 108867.0], [50.0, 108918.0], [50.1, 108918.0], [50.2, 109027.0], [50.3, 109027.0], [50.4, 109098.0], [50.5, 109872.0], [50.6, 109872.0], [50.7, 110098.0], [50.8, 110983.0], [50.9, 110983.0], [51.0, 111037.0], [51.1, 111298.0], [51.2, 111298.0], [51.3, 111462.0], [51.4, 111529.0], [51.5, 111529.0], [51.6, 111687.0], [51.7, 111939.0], [51.8, 111939.0], [51.9, 112462.0], [52.0, 112574.0], [52.1, 112574.0], [52.2, 114156.0], [52.3, 114156.0], [52.4, 114770.0], [52.5, 115472.0], [52.6, 115472.0], [52.7, 115557.0], [52.8, 115718.0], [52.9, 115718.0], [53.0, 115902.0], [53.1, 116673.0], [53.2, 116673.0], [53.3, 116944.0], [53.4, 117136.0], [53.5, 117136.0], [53.6, 117556.0], [53.7, 117852.0], [53.8, 117852.0], [53.9, 117852.0], [54.0, 120947.0], [54.1, 120947.0], [54.2, 121242.0], [54.3, 121242.0], [54.4, 121642.0], [54.5, 123603.0], [54.6, 123603.0], [54.7, 123823.0], [54.8, 124007.0], [54.9, 124007.0], [55.0, 124704.0], [55.1, 124775.0], [55.2, 124775.0], [55.3, 124793.0], [55.4, 124939.0], [55.5, 124939.0], [55.6, 125031.0], [55.7, 125074.0], [55.8, 125074.0], [55.9, 125080.0], [56.0, 125144.0], [56.1, 125144.0], [56.2, 125150.0], [56.3, 125150.0], [56.4, 125186.0], [56.5, 125210.0], [56.6, 125210.0], [56.7, 125224.0], [56.8, 125227.0], [56.9, 125227.0], [57.0, 125245.0], [57.1, 125298.0], [57.2, 125298.0], [57.3, 125321.0], [57.4, 125390.0], [57.5, 125390.0], [57.6, 125526.0], [57.7, 125569.0], [57.8, 125569.0], [57.9, 125735.0], [58.0, 126049.0], [58.1, 126049.0], [58.2, 126103.0], [58.3, 126103.0], [58.4, 126118.0], [58.5, 126173.0], [58.6, 126173.0], [58.7, 126176.0], [58.8, 126279.0], [58.9, 126279.0], [59.0, 126374.0], [59.1, 126428.0], [59.2, 126428.0], [59.3, 126484.0], [59.4, 126534.0], [59.5, 126534.0], [59.6, 126614.0], [59.7, 126780.0], [59.8, 126780.0], [59.9, 126821.0], [60.0, 127020.0], [60.1, 127020.0], [60.2, 127041.0], [60.3, 127041.0], [60.4, 127177.0], [60.5, 127353.0], [60.6, 127353.0], [60.7, 127460.0], [60.8, 127729.0], [60.9, 127729.0], [61.0, 128089.0], [61.1, 128264.0], [61.2, 128264.0], [61.3, 128269.0], [61.4, 128442.0], [61.5, 128442.0], [61.6, 129267.0], [61.7, 129283.0], [61.8, 129283.0], [61.9, 129311.0], [62.0, 129399.0], [62.1, 129399.0], [62.2, 129434.0], [62.3, 129434.0], [62.4, 129483.0], [62.5, 129500.0], [62.6, 129500.0], [62.7, 129533.0], [62.8, 129577.0], [62.9, 129577.0], [63.0, 129602.0], [63.1, 129608.0], [63.2, 129608.0], [63.3, 129625.0], [63.4, 129638.0], [63.5, 129638.0], [63.6, 129656.0], [63.7, 129662.0], [63.8, 129662.0], [63.9, 129700.0], [64.0, 129728.0], [64.1, 129728.0], [64.2, 129851.0], [64.3, 129851.0], [64.4, 129913.0], [64.5, 129920.0], [64.6, 129920.0], [64.7, 129923.0], [64.8, 129937.0], [64.9, 129937.0], [65.0, 129972.0], [65.1, 129982.0], [65.2, 129982.0], [65.3, 130102.0], [65.4, 130135.0], [65.5, 130135.0], [65.6, 130157.0], [65.7, 130189.0], [65.8, 130189.0], [65.9, 130201.0], [66.0, 130224.0], [66.1, 130224.0], [66.2, 130234.0], [66.3, 130234.0], [66.4, 130244.0], [66.5, 130300.0], [66.6, 130300.0], [66.7, 130330.0], [66.8, 130408.0], [66.9, 130408.0], [67.0, 130436.0], [67.1, 130439.0], [67.2, 130439.0], [67.3, 130456.0], [67.4, 130511.0], [67.5, 130511.0], [67.6, 130517.0], [67.7, 130539.0], [67.8, 130539.0], [67.9, 130541.0], [68.0, 130564.0], [68.1, 130564.0], [68.2, 130607.0], [68.3, 130607.0], [68.4, 130643.0], [68.5, 130645.0], [68.6, 130645.0], [68.7, 130675.0], [68.8, 130679.0], [68.9, 130679.0], [69.0, 130680.0], [69.1, 130694.0], [69.2, 130694.0], [69.3, 130699.0], [69.4, 130709.0], [69.5, 130709.0], [69.6, 130742.0], [69.7, 130778.0], [69.8, 130778.0], [69.9, 130796.0], [70.0, 130796.0], [70.1, 130813.0], [70.2, 130833.0], [70.3, 130833.0], [70.4, 130901.0], [70.5, 130910.0], [70.6, 130910.0], [70.7, 130950.0], [70.8, 130983.0], [70.9, 130983.0], [71.0, 131108.0], [71.1, 131114.0], [71.2, 131114.0], [71.3, 131145.0], [71.4, 131205.0], [71.5, 131205.0], [71.6, 131217.0], [71.7, 131232.0], [71.8, 131232.0], [71.9, 131252.0], [72.0, 131252.0], [72.1, 131255.0], [72.2, 131269.0], [72.3, 131269.0], [72.4, 131281.0], [72.5, 131302.0], [72.6, 131302.0], [72.7, 131305.0], [72.8, 131325.0], [72.9, 131325.0], [73.0, 131351.0], [73.1, 131379.0], [73.2, 131379.0], [73.3, 131408.0], [73.4, 131474.0], [73.5, 131474.0], [73.6, 131481.0], [73.7, 131514.0], [73.8, 131514.0], [73.9, 131522.0], [74.0, 131522.0], [74.1, 131523.0], [74.2, 131525.0], [74.3, 131525.0], [74.4, 131536.0], [74.5, 131540.0], [74.6, 131540.0], [74.7, 131611.0], [74.8, 131619.0], [74.9, 131619.0], [75.0, 131650.0], [75.1, 131698.0], [75.2, 131698.0], [75.3, 131747.0], [75.4, 131781.0], [75.5, 131781.0], [75.6, 131783.0], [75.7, 131790.0], [75.8, 131790.0], [75.9, 131858.0], [76.0, 131858.0], [76.1, 131874.0], [76.2, 131883.0], [76.3, 131883.0], [76.4, 131900.0], [76.5, 131925.0], [76.6, 131925.0], [76.7, 131937.0], [76.8, 131958.0], [76.9, 131958.0], [77.0, 131960.0], [77.1, 131977.0], [77.2, 131977.0], [77.3, 132005.0], [77.4, 132075.0], [77.5, 132075.0], [77.6, 132094.0], [77.7, 132117.0], [77.8, 132117.0], [77.9, 132133.0], [78.0, 132133.0], [78.1, 132133.0], [78.2, 132148.0], [78.3, 132148.0], [78.4, 132163.0], [78.5, 132192.0], [78.6, 132192.0], [78.7, 132206.0], [78.8, 132209.0], [78.9, 132209.0], [79.0, 132225.0], [79.1, 132236.0], [79.2, 132236.0], [79.3, 132250.0], [79.4, 132298.0], [79.5, 132298.0], [79.6, 132351.0], [79.7, 132364.0], [79.8, 132364.0], [79.9, 132401.0], [80.0, 132401.0], [80.1, 132414.0], [80.2, 132431.0], [80.3, 132431.0], [80.4, 132447.0], [80.5, 132451.0], [80.6, 132451.0], [80.7, 132459.0], [80.8, 132473.0], [80.9, 132473.0], [81.0, 132481.0], [81.1, 132483.0], [81.2, 132483.0], [81.3, 132492.0], [81.4, 132505.0], [81.5, 132505.0], [81.6, 132518.0], [81.7, 132525.0], [81.8, 132525.0], [81.9, 132536.0], [82.0, 132536.0], [82.1, 132541.0], [82.2, 132576.0], [82.3, 132576.0], [82.4, 132583.0], [82.5, 132585.0], [82.6, 132585.0], [82.7, 132620.0], [82.8, 132635.0], [82.9, 132635.0], [83.0, 132635.0], [83.1, 132639.0], [83.2, 132639.0], [83.3, 132671.0], [83.4, 132755.0], [83.5, 132755.0], [83.6, 132786.0], [83.7, 132790.0], [83.8, 132790.0], [83.9, 132796.0], [84.0, 132796.0], [84.1, 132824.0], [84.2, 132830.0], [84.3, 132830.0], [84.4, 132849.0], [84.5, 132879.0], [84.6, 132879.0], [84.7, 132954.0], [84.8, 132955.0], [84.9, 132955.0], [85.0, 132969.0], [85.1, 133003.0], [85.2, 133003.0], [85.3, 133007.0], [85.4, 133025.0], [85.5, 133025.0], [85.6, 133025.0], [85.7, 133038.0], [85.8, 133038.0], [85.9, 133041.0], [86.0, 133041.0], [86.1, 133052.0], [86.2, 133055.0], [86.3, 133055.0], [86.4, 133071.0], [86.5, 133076.0], [86.6, 133076.0], [86.7, 133101.0], [86.8, 133102.0], [86.9, 133102.0], [87.0, 133121.0], [87.1, 133165.0], [87.2, 133165.0], [87.3, 133166.0], [87.4, 133171.0], [87.5, 133171.0], [87.6, 133205.0], [87.7, 133218.0], [87.8, 133218.0], [87.9, 133222.0], [88.0, 133222.0], [88.1, 133240.0], [88.2, 133241.0], [88.3, 133241.0], [88.4, 133298.0], [88.5, 133367.0], [88.6, 133367.0], [88.7, 133370.0], [88.8, 133373.0], [88.9, 133373.0], [89.0, 133386.0], [89.1, 133420.0], [89.2, 133420.0], [89.3, 133422.0], [89.4, 133425.0], [89.5, 133425.0], [89.6, 133444.0], [89.7, 133445.0], [89.8, 133445.0], [89.9, 133499.0], [90.0, 133499.0], [90.1, 133524.0], [90.2, 133533.0], [90.3, 133533.0], [90.4, 133534.0], [90.5, 133545.0], [90.6, 133545.0], [90.7, 133561.0], [90.8, 133597.0], [90.9, 133597.0], [91.0, 133602.0], [91.1, 133612.0], [91.2, 133612.0], [91.3, 133626.0], [91.4, 133646.0], [91.5, 133646.0], [91.6, 133647.0], [91.7, 133704.0], [91.8, 133704.0], [91.9, 133708.0], [92.0, 133708.0], [92.1, 133754.0], [92.2, 133779.0], [92.3, 133779.0], [92.4, 133780.0], [92.5, 133785.0], [92.6, 133785.0], [92.7, 133794.0], [92.8, 133818.0], [92.9, 133818.0], [93.0, 133902.0], [93.1, 133906.0], [93.2, 133906.0], [93.3, 133918.0], [93.4, 133947.0], [93.5, 133947.0], [93.6, 133966.0], [93.7, 133969.0], [93.8, 133969.0], [93.9, 134003.0], [94.0, 134003.0], [94.1, 134005.0], [94.2, 134067.0], [94.3, 134067.0], [94.4, 134096.0], [94.5, 134164.0], [94.6, 134164.0], [94.7, 134201.0], [94.8, 134227.0], [94.9, 134227.0], [95.0, 134238.0], [95.1, 134241.0], [95.2, 134241.0], [95.3, 134251.0], [95.4, 134314.0], [95.5, 134314.0], [95.6, 134323.0], [95.7, 134357.0], [95.8, 134357.0], [95.9, 134418.0], [96.0, 134418.0], [96.1, 134422.0], [96.2, 134469.0], [96.3, 134469.0], [96.4, 134483.0], [96.5, 134505.0], [96.6, 134505.0], [96.7, 134536.0], [96.8, 134580.0], [96.9, 134580.0], [97.0, 134660.0], [97.1, 134676.0], [97.2, 134676.0], [97.3, 134700.0], [97.4, 134714.0], [97.5, 134714.0], [97.6, 134725.0], [97.7, 134762.0], [97.8, 134762.0], [97.9, 134778.0], [98.0, 134778.0], [98.1, 134831.0], [98.2, 134875.0], [98.3, 134875.0], [98.4, 134905.0], [98.5, 134950.0], [98.6, 134950.0], [98.7, 134990.0], [98.8, 135021.0], [98.9, 135021.0], [99.0, 135099.0], [99.1, 135124.0], [99.2, 135124.0], [99.3, 135185.0], [99.4, 135210.0], [99.5, 135210.0], [99.6, 135280.0], [99.7, 135283.0], [99.8, 135283.0], [99.9, 135348.0], [100.0, 135348.0]], "isOverall": false, "label": "Create Issue User 650 Ramp 1", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 67000.0, "maxY": 10.0, "series": [{"data": [[132000.0, 3.0], [133600.0, 5.0], [135200.0, 3.0], [131300.0, 5.0], [132900.0, 3.0], [134500.0, 3.0], [77900.0, 8.0], [79500.0, 3.0], [78700.0, 4.0], [80300.0, 1.0], [81900.0, 1.0], [81100.0, 1.0], [84300.0, 2.0], [85100.0, 2.0], [88300.0, 1.0], [89900.0, 1.0], [92300.0, 1.0], [93100.0, 2.0], [93900.0, 3.0], [97100.0, 1.0], [97900.0, 1.0], [98700.0, 1.0], [99500.0, 1.0], [100300.0, 1.0], [105100.0, 2.0], [105900.0, 1.0], [107500.0, 1.0], [111500.0, 1.0], [114700.0, 1.0], [115500.0, 1.0], [117100.0, 1.0], [125100.0, 3.0], [126700.0, 1.0], [129900.0, 6.0], [130700.0, 4.0], [132200.0, 6.0], [133800.0, 1.0], [131500.0, 6.0], [133100.0, 6.0], [134700.0, 5.0], [77800.0, 2.0], [79400.0, 3.0], [78600.0, 7.0], [84200.0, 1.0], [85000.0, 2.0], [92200.0, 1.0], [93000.0, 2.0], [93800.0, 1.0], [94600.0, 3.0], [96200.0, 1.0], [97000.0, 1.0], [100200.0, 1.0], [101800.0, 3.0], [103400.0, 1.0], [105000.0, 1.0], [109000.0, 2.0], [109800.0, 1.0], [111400.0, 1.0], [115400.0, 1.0], [117800.0, 2.0], [125000.0, 3.0], [126600.0, 1.0], [127400.0, 1.0], [128200.0, 2.0], [129800.0, 1.0], [130600.0, 8.0], [132400.0, 10.0], [134000.0, 4.0], [131700.0, 4.0], [133300.0, 4.0], [134900.0, 3.0], [67300.0, 4.0], [77700.0, 5.0], [79300.0, 3.0], [78500.0, 8.0], [84900.0, 1.0], [92100.0, 4.0], [94500.0, 1.0], [97700.0, 4.0], [98500.0, 3.0], [99300.0, 3.0], [100100.0, 2.0], [103300.0, 1.0], [104100.0, 3.0], [104900.0, 1.0], [105700.0, 1.0], [106500.0, 1.0], [108100.0, 1.0], [108900.0, 1.0], [116900.0, 1.0], [120900.0, 1.0], [124900.0, 1.0], [125700.0, 1.0], [126500.0, 1.0], [127300.0, 1.0], [129700.0, 2.0], [130500.0, 5.0], [132600.0, 5.0], [134200.0, 5.0], [131900.0, 6.0], [133500.0, 6.0], [135100.0, 2.0], [67200.0, 1.0], [68800.0, 1.0], [77600.0, 6.0], [78400.0, 4.0], [79200.0, 6.0], [80800.0, 1.0], [84800.0, 1.0], [89600.0, 1.0], [93600.0, 2.0], [91200.0, 1.0], [94400.0, 2.0], [95200.0, 1.0], [96000.0, 1.0], [96800.0, 2.0], [98400.0, 2.0], [105600.0, 1.0], [106400.0, 1.0], [108000.0, 1.0], [108800.0, 3.0], [111200.0, 1.0], [121600.0, 1.0], [124000.0, 1.0], [126400.0, 2.0], [128000.0, 1.0], [129600.0, 6.0], [130400.0, 4.0], [131200.0, 7.0], [132800.0, 4.0], [134400.0, 4.0], [132100.0, 6.0], [133700.0, 7.0], [135300.0, 1.0], [71100.0, 1.0], [77500.0, 5.0], [78300.0, 8.0], [79100.0, 4.0], [83100.0, 1.0], [85500.0, 1.0], [87900.0, 4.0], [88700.0, 1.0], [91900.0, 1.0], [92700.0, 1.0], [94300.0, 3.0], [95100.0, 1.0], [95900.0, 1.0], [97500.0, 3.0], [98300.0, 1.0], [99100.0, 1.0], [99900.0, 1.0], [101500.0, 1.0], [102300.0, 1.0], [103900.0, 2.0], [105500.0, 2.0], [106300.0, 1.0], [107100.0, 1.0], [107900.0, 2.0], [108700.0, 2.0], [111900.0, 1.0], [115900.0, 1.0], [117500.0, 1.0], [124700.0, 3.0], [125500.0, 2.0], [126300.0, 1.0], [127100.0, 1.0], [129500.0, 3.0], [130300.0, 2.0], [131400.0, 3.0], [133000.0, 10.0], [134600.0, 2.0], [132300.0, 2.0], [133900.0, 6.0], [67000.0, 3.0], [68600.0, 1.0], [67800.0, 2.0], [71800.0, 1.0], [73400.0, 1.0], [77400.0, 4.0], [79800.0, 2.0], [78200.0, 3.0], [79000.0, 6.0], [81400.0, 1.0], [83800.0, 1.0], [87800.0, 1.0], [89400.0, 1.0], [90200.0, 1.0], [91800.0, 1.0], [94200.0, 1.0], [96600.0, 3.0], [97400.0, 4.0], [98200.0, 2.0], [99000.0, 1.0], [99800.0, 2.0], [102200.0, 1.0], [103800.0, 1.0], [107000.0, 3.0], [107800.0, 2.0], [111000.0, 1.0], [116600.0, 1.0], [123800.0, 1.0], [126200.0, 1.0], [127000.0, 2.0], [129400.0, 2.0], [130200.0, 4.0], [131600.0, 4.0], [133200.0, 6.0], [134800.0, 2.0], [132500.0, 8.0], [134100.0, 1.0], [67700.0, 2.0], [70900.0, 1.0], [77300.0, 4.0], [79700.0, 7.0], [78900.0, 5.0], [78100.0, 4.0], [83700.0, 1.0], [90100.0, 1.0], [90900.0, 1.0], [94900.0, 2.0], [97300.0, 1.0], [98100.0, 1.0], [99700.0, 1.0], [100500.0, 2.0], [101300.0, 1.0], [102900.0, 1.0], [104500.0, 1.0], [106100.0, 1.0], [106900.0, 1.0], [107700.0, 2.0], [110900.0, 1.0], [112500.0, 1.0], [114100.0, 1.0], [115700.0, 1.0], [125300.0, 2.0], [126100.0, 4.0], [127700.0, 1.0], [129300.0, 2.0], [130100.0, 4.0], [130900.0, 4.0], [131800.0, 3.0], [133400.0, 6.0], [135000.0, 2.0], [131100.0, 3.0], [132700.0, 4.0], [134300.0, 3.0], [67600.0, 1.0], [70800.0, 1.0], [77200.0, 4.0], [79600.0, 2.0], [78000.0, 2.0], [78800.0, 6.0], [80400.0, 1.0], [81200.0, 1.0], [87600.0, 1.0], [88400.0, 2.0], [90800.0, 1.0], [92400.0, 2.0], [94800.0, 1.0], [96400.0, 1.0], [98000.0, 1.0], [98800.0, 3.0], [100400.0, 2.0], [102000.0, 1.0], [110000.0, 1.0], [111600.0, 1.0], [112400.0, 1.0], [121200.0, 1.0], [123600.0, 1.0], [125200.0, 5.0], [126000.0, 1.0], [126800.0, 1.0], [128400.0, 1.0], [129200.0, 2.0], [130800.0, 2.0]], "isOverall": false, "label": "Create Issue User 650 Ramp 1", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 135300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 650.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 650.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 650.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 156.0, "minX": 1.71585234E12, "maxY": 481.002949852507, "series": [{"data": [[1.71585234E12, 481.002949852507], [1.7158524E12, 156.0]], "isOverall": false, "label": "User 650 Ramp 1", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7158524E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 67038.0, "minX": 1.0, "maxY": 135348.0, "series": [{"data": [[2.0, 135283.0], [3.0, 135280.0], [4.0, 135099.0], [5.0, 135210.0], [6.0, 135021.0], [7.0, 135185.0], [8.0, 135124.0], [9.0, 134990.0], [10.0, 134875.0], [11.0, 134950.0], [12.0, 134778.0], [13.0, 134762.0], [14.0, 134714.0], [15.0, 134831.0], [16.0, 134676.0], [17.0, 134660.0], [18.0, 134580.0], [19.0, 134536.0], [20.0, 134905.0], [21.0, 134700.0], [22.0, 134469.0], [23.0, 134725.0], [24.0, 134422.0], [25.0, 134483.0], [26.0, 134418.0], [27.0, 134357.0], [28.0, 134314.0], [29.0, 134323.0], [30.0, 134227.0], [31.0, 134505.0], [33.0, 134251.0], [32.0, 134201.0], [35.0, 134238.0], [34.0, 134164.0], [37.0, 134241.0], [36.0, 134096.0], [39.0, 134005.0], [38.0, 133969.0], [41.0, 133818.0], [40.0, 133966.0], [43.0, 134067.0], [42.0, 133947.0], [45.0, 133785.0], [44.0, 134003.0], [47.0, 133906.0], [46.0, 133794.0], [49.0, 133754.0], [48.0, 133780.0], [51.0, 133902.0], [50.0, 133708.0], [53.0, 133918.0], [52.0, 133647.0], [55.0, 133602.0], [54.0, 133612.0], [57.0, 133779.0], [56.0, 133597.0], [59.0, 133499.0], [58.0, 133626.0], [61.0, 133420.0], [60.0, 133646.0], [63.0, 133444.0], [62.0, 133704.0], [67.0, 133561.0], [66.0, 133425.0], [65.0, 133545.0], [64.0, 133534.0], [71.0, 133298.0], [70.0, 133370.0], [69.0, 133386.0], [68.0, 133367.0], [75.0, 133205.0], [74.0, 133373.0], [73.0, 133524.0], [72.0, 133240.0], [79.0, 133422.0], [78.0, 133101.0], [77.0, 133218.0], [76.0, 133533.0], [83.0, 133445.0], [82.0, 133165.0], [81.0, 133241.0], [80.0, 133171.0], [87.0, 133166.0], [86.0, 133041.0], [85.0, 133076.0], [84.0, 133071.0], [91.0, 132879.0], [90.0, 133222.0], [89.0, 132955.0], [88.0, 132969.0], [95.0, 133055.0], [94.0, 133052.0], [93.0, 133007.0], [92.0, 133003.0], [99.0, 133025.0], [98.0, 133038.0], [97.0, 133025.0], [96.0, 133102.0], [103.0, 132786.0], [102.0, 132954.0], [101.0, 132796.0], [100.0, 133121.0], [107.0, 132635.0], [106.0, 132639.0], [105.0, 132830.0], [104.0, 132824.0], [111.0, 132585.0], [110.0, 132790.0], [109.0, 132635.0], [108.0, 132849.0], [115.0, 132492.0], [114.0, 132755.0], [113.0, 132541.0], [112.0, 132481.0], [119.0, 132536.0], [118.0, 132620.0], [117.0, 132583.0], [116.0, 132431.0], [123.0, 132518.0], [122.0, 132525.0], [121.0, 132298.0], [120.0, 132671.0], [127.0, 132351.0], [126.0, 132483.0], [125.0, 132459.0], [124.0, 132576.0], [135.0, 132401.0], [134.0, 132414.0], [133.0, 132192.0], [132.0, 132364.0], [131.0, 132250.0], [130.0, 132117.0], [129.0, 132473.0], [128.0, 132447.0], [143.0, 131937.0], [142.0, 132148.0], [141.0, 132236.0], [140.0, 132225.0], [139.0, 132206.0], [138.0, 132133.0], [137.0, 132451.0], [136.0, 132209.0], [151.0, 132075.0], [150.0, 132163.0], [149.0, 132133.0], [148.0, 131874.0], [147.0, 131960.0], [146.0, 131977.0], [145.0, 132005.0], [144.0, 132505.0], [159.0, 131650.0], [158.0, 131858.0], [157.0, 131783.0], [156.0, 131522.0], [155.0, 131698.0], [154.0, 131958.0], [153.0, 131925.0], [152.0, 132094.0], [167.0, 131536.0], [166.0, 131481.0], [165.0, 131525.0], [164.0, 131790.0], [163.0, 131619.0], [162.0, 131747.0], [161.0, 131781.0], [160.0, 131900.0], [175.0, 131252.0], [174.0, 131269.0], [173.0, 131611.0], [172.0, 131883.0], [171.0, 131305.0], [170.0, 131540.0], [169.0, 131474.0], [168.0, 131514.0], [183.0, 131325.0], [182.0, 131232.0], [181.0, 131523.0], [180.0, 131302.0], [179.0, 131281.0], [178.0, 131408.0], [177.0, 131379.0], [176.0, 131217.0], [191.0, 130813.0], [190.0, 130983.0], [189.0, 131145.0], [188.0, 131351.0], [187.0, 131114.0], [186.0, 131108.0], [185.0, 131255.0], [184.0, 131205.0], [199.0, 130778.0], [198.0, 130709.0], [197.0, 130833.0], [196.0, 130539.0], [195.0, 130607.0], [194.0, 130901.0], [193.0, 130796.0], [192.0, 130910.0], [207.0, 130439.0], [206.0, 130541.0], [205.0, 130742.0], [204.0, 130950.0], [203.0, 130680.0], [202.0, 130645.0], [201.0, 130699.0], [200.0, 130679.0], [215.0, 130517.0], [214.0, 130456.0], [213.0, 130330.0], [212.0, 130408.0], [211.0, 130643.0], [210.0, 130564.0], [209.0, 130675.0], [208.0, 130511.0], [223.0, 130135.0], [222.0, 130244.0], [221.0, 130201.0], [220.0, 130300.0], [219.0, 130234.0], [218.0, 130694.0], [217.0, 130157.0], [216.0, 130189.0], [231.0, 129913.0], [230.0, 129728.0], [229.0, 129920.0], [228.0, 129982.0], [227.0, 130436.0], [226.0, 129937.0], [225.0, 130102.0], [224.0, 130224.0], [239.0, 129533.0], [238.0, 129625.0], [237.0, 129608.0], [236.0, 129972.0], [235.0, 129700.0], [234.0, 129851.0], [233.0, 129662.0], [232.0, 129923.0], [247.0, 129267.0], [246.0, 129483.0], [245.0, 129434.0], [244.0, 129638.0], [243.0, 129500.0], [242.0, 129602.0], [241.0, 129577.0], [240.0, 129656.0], [255.0, 127460.0], [254.0, 128264.0], [253.0, 128089.0], [252.0, 128442.0], [251.0, 128269.0], [250.0, 129311.0], [249.0, 129283.0], [248.0, 129399.0], [270.0, 126118.0], [271.0, 126279.0], [269.0, 126173.0], [268.0, 126176.0], [267.0, 126374.0], [266.0, 126428.0], [265.0, 126534.0], [264.0, 126484.0], [263.0, 126614.0], [257.0, 127729.0], [256.0, 127353.0], [259.0, 127041.0], [258.0, 127177.0], [262.0, 126780.0], [261.0, 127020.0], [260.0, 126821.0], [286.0, 125150.0], [287.0, 125031.0], [285.0, 125080.0], [284.0, 125186.0], [283.0, 125321.0], [282.0, 125224.0], [281.0, 125298.0], [280.0, 125390.0], [279.0, 125210.0], [273.0, 126103.0], [272.0, 126049.0], [275.0, 125569.0], [274.0, 125735.0], [278.0, 125245.0], [277.0, 125227.0], [276.0, 125526.0], [302.0, 117556.0], [303.0, 117136.0], [301.0, 117852.0], [300.0, 117852.0], [299.0, 120947.0], [298.0, 121242.0], [297.0, 121642.0], [296.0, 123603.0], [295.0, 123823.0], [289.0, 124939.0], [288.0, 125144.0], [291.0, 124793.0], [290.0, 125074.0], [294.0, 124007.0], [293.0, 124704.0], [292.0, 124775.0], [318.0, 111298.0], [319.0, 110983.0], [317.0, 111529.0], [316.0, 111462.0], [315.0, 111687.0], [314.0, 111939.0], [313.0, 112462.0], [312.0, 112574.0], [311.0, 114156.0], [305.0, 116673.0], [304.0, 116944.0], [307.0, 115718.0], [306.0, 115902.0], [310.0, 114770.0], [309.0, 115472.0], [308.0, 115557.0], [334.0, 107899.0], [335.0, 107913.0], [333.0, 108110.0], [332.0, 107962.0], [331.0, 108009.0], [330.0, 108719.0], [329.0, 108768.0], [328.0, 108840.0], [327.0, 108817.0], [321.0, 110098.0], [320.0, 111037.0], [323.0, 109098.0], [322.0, 109872.0], [326.0, 108867.0], [325.0, 108918.0], [324.0, 109027.0], [350.0, 105657.0], [351.0, 105742.0], [349.0, 105932.0], [348.0, 106181.0], [347.0, 106316.0], [346.0, 106484.0], [345.0, 106579.0], [344.0, 106996.0], [343.0, 107119.0], [337.0, 107780.0], [336.0, 107863.0], [339.0, 107703.0], [338.0, 107511.0], [342.0, 107007.0], [341.0, 107095.0], [340.0, 107079.0], [366.0, 103365.0], [367.0, 102904.0], [365.0, 103445.0], [364.0, 103818.0], [363.0, 103960.0], [362.0, 104181.0], [361.0, 104115.0], [360.0, 103971.0], [359.0, 104156.0], [353.0, 105506.0], [352.0, 105540.0], [355.0, 105082.0], [354.0, 105135.0], [358.0, 104534.0], [357.0, 104947.0], [356.0, 105132.0], [382.0, 100203.0], [383.0, 100196.0], [381.0, 100356.0], [380.0, 100168.0], [379.0, 100460.0], [378.0, 100530.0], [377.0, 100474.0], [376.0, 100544.0], [375.0, 101323.0], [369.0, 102278.0], [368.0, 102392.0], [371.0, 101847.0], [370.0, 102002.0], [374.0, 101583.0], [373.0, 101865.0], [372.0, 101805.0], [398.0, 98578.0], [399.0, 98587.0], [397.0, 98817.0], [396.0, 98776.0], [395.0, 98868.0], [394.0, 99047.0], [393.0, 99140.0], [392.0, 98889.0], [391.0, 99367.0], [385.0, 99755.0], [384.0, 99866.0], [387.0, 99890.0], [386.0, 99910.0], [390.0, 99319.0], [389.0, 99546.0], [388.0, 99346.0], [414.0, 97746.0], [415.0, 97535.0], [413.0, 97563.0], [412.0, 97700.0], [411.0, 97435.0], [410.0, 97729.0], [409.0, 97773.0], [408.0, 97962.0], [407.0, 98169.0], [401.0, 98514.0], [400.0, 98467.0], [403.0, 98385.0], [402.0, 98434.0], [406.0, 98018.0], [405.0, 98207.0], [404.0, 98215.0], [430.0, 96216.0], [431.0, 95989.0], [429.0, 96067.0], [428.0, 96451.0], [427.0, 96684.0], [426.0, 96642.0], [425.0, 96645.0], [424.0, 96831.0], [423.0, 96888.0], [417.0, 97526.0], [416.0, 97488.0], [419.0, 97419.0], [418.0, 97489.0], [422.0, 97077.0], [421.0, 97375.0], [420.0, 97185.0], [446.0, 94215.0], [447.0, 93818.0], [445.0, 94300.0], [444.0, 94357.0], [443.0, 94491.0], [442.0, 94392.0], [441.0, 94498.0], [440.0, 94617.0], [439.0, 94611.0], [433.0, 94948.0], [432.0, 95187.0], [435.0, 94954.0], [434.0, 95220.0], [438.0, 94523.0], [437.0, 94816.0], [436.0, 94682.0], [462.0, 92146.0], [463.0, 92151.0], [461.0, 92270.0], [460.0, 92376.0], [459.0, 92431.0], [458.0, 92435.0], [457.0, 92798.0], [456.0, 93047.0], [455.0, 93026.0], [449.0, 93900.0], [448.0, 93963.0], [451.0, 93615.0], [450.0, 93914.0], [454.0, 93192.0], [453.0, 93104.0], [452.0, 93612.0], [478.0, 88412.0], [479.0, 88314.0], [477.0, 88445.0], [476.0, 88716.0], [475.0, 89437.0], [474.0, 89682.0], [473.0, 89922.0], [472.0, 90130.0], [471.0, 90291.0], [465.0, 91974.0], [464.0, 92102.0], [467.0, 91817.0], [466.0, 92131.0], [470.0, 90813.0], [469.0, 90980.0], [468.0, 91290.0], [494.0, 84391.0], [495.0, 84242.0], [493.0, 84809.0], [492.0, 84368.0], [491.0, 85047.0], [490.0, 85175.0], [489.0, 84986.0], [488.0, 85111.0], [487.0, 85014.0], [481.0, 87954.0], [480.0, 87948.0], [483.0, 87909.0], [482.0, 87900.0], [486.0, 85586.0], [485.0, 87652.0], [484.0, 87801.0], [510.0, 79781.0], [511.0, 79765.0], [509.0, 79774.0], [508.0, 79799.0], [507.0, 79870.0], [506.0, 79882.0], [505.0, 80423.0], [504.0, 80397.0], [503.0, 80849.0], [497.0, 83736.0], [496.0, 83830.0], [499.0, 81951.0], [498.0, 83175.0], [502.0, 81181.0], [501.0, 81278.0], [500.0, 81470.0], [540.0, 79066.0], [543.0, 78958.0], [529.0, 79249.0], [528.0, 79276.0], [531.0, 79207.0], [530.0, 79249.0], [533.0, 79157.0], [532.0, 79201.0], [542.0, 78992.0], [541.0, 79007.0], [539.0, 79045.0], [538.0, 79061.0], [537.0, 79093.0], [536.0, 79073.0], [527.0, 79315.0], [513.0, 79704.0], [512.0, 79737.0], [515.0, 79645.0], [514.0, 79727.0], [517.0, 79604.0], [516.0, 79112.0], [519.0, 79218.0], [518.0, 79370.0], [526.0, 79349.0], [525.0, 79425.0], [524.0, 79413.0], [523.0, 79443.0], [522.0, 79508.0], [521.0, 79502.0], [520.0, 79537.0], [535.0, 79120.0], [534.0, 79166.0], [572.0, 78457.0], [575.0, 78377.0], [561.0, 78645.0], [560.0, 78668.0], [563.0, 78666.0], [562.0, 78637.0], [565.0, 78534.0], [564.0, 78546.0], [574.0, 78426.0], [573.0, 78465.0], [571.0, 78508.0], [570.0, 78519.0], [569.0, 78527.0], [568.0, 78548.0], [559.0, 78688.0], [545.0, 78914.0], [544.0, 78944.0], [547.0, 78882.0], [546.0, 78920.0], [549.0, 78868.0], [548.0, 78885.0], [551.0, 78840.0], [550.0, 78858.0], [558.0, 78693.0], [557.0, 78693.0], [556.0, 78713.0], [555.0, 78717.0], [554.0, 78757.0], [553.0, 78804.0], [552.0, 78795.0], [567.0, 78533.0], [566.0, 78523.0], [604.0, 77868.0], [607.0, 77774.0], [593.0, 78074.0], [592.0, 78126.0], [595.0, 77424.0], [594.0, 78027.0], [597.0, 77985.0], [596.0, 77995.0], [606.0, 77785.0], [605.0, 77831.0], [603.0, 77349.0], [602.0, 77909.0], [601.0, 77907.0], [600.0, 77945.0], [591.0, 78132.0], [577.0, 77990.0], [576.0, 78407.0], [579.0, 78323.0], [578.0, 78370.0], [581.0, 78301.0], [580.0, 78343.0], [583.0, 78304.0], [582.0, 78327.0], [590.0, 78145.0], [589.0, 78160.0], [588.0, 77638.0], [587.0, 78208.0], [586.0, 78236.0], [585.0, 78250.0], [584.0, 78300.0], [599.0, 77957.0], [598.0, 77971.0], [636.0, 68863.0], [639.0, 67729.0], [625.0, 77367.0], [624.0, 77364.0], [627.0, 77308.0], [626.0, 77296.0], [629.0, 77282.0], [628.0, 77297.0], [638.0, 67822.0], [637.0, 67820.0], [635.0, 70961.0], [634.0, 70831.0], [633.0, 71101.0], [632.0, 71822.0], [623.0, 77420.0], [609.0, 77741.0], [608.0, 77762.0], [611.0, 77691.0], [610.0, 77727.0], [613.0, 77629.0], [612.0, 77682.0], [615.0, 77601.0], [614.0, 77623.0], [622.0, 77434.0], [621.0, 77500.0], [620.0, 77509.0], [619.0, 77495.0], [618.0, 77500.0], [617.0, 77539.0], [616.0, 77552.0], [631.0, 73497.0], [630.0, 77249.0], [650.0, 67038.0], [648.0, 67056.0], [647.0, 67297.0], [646.0, 67318.0], [645.0, 67323.0], [644.0, 67336.0], [643.0, 67345.0], [642.0, 68631.0], [641.0, 67687.0], [640.0, 67721.0], [1.0, 135348.0]], "isOverall": false, "label": "Create Issue User 650 Ramp 1", "isController": false}, {"data": [[325.50153846153813, 108925.41999999997]], "isOverall": false, "label": "Create Issue User 650 Ramp 1-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 650.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 8656.166666666666, "minX": 1.71585234E12, "maxY": 15119.783333333333, "series": [{"data": [[1.71585234E12, 15049.783333333333], [1.7158524E12, 15119.783333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.71585234E12, 9435.5], [1.7158524E12, 8656.166666666666]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7158524E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 88981.23008849562, "minX": 1.71585234E12, "maxY": 130665.2282958199, "series": [{"data": [[1.71585234E12, 88981.23008849562], [1.7158524E12, 130665.2282958199]], "isOverall": false, "label": "Create Issue User 650 Ramp 1", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7158524E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 88980.95280235993, "minX": 1.71585234E12, "maxY": 130665.03215434084, "series": [{"data": [[1.71585234E12, 88980.95280235993], [1.7158524E12, 130665.03215434084]], "isOverall": false, "label": "Create Issue User 650 Ramp 1", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7158524E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.5209003215434082, "minX": 1.71585234E12, "maxY": 6.218289085545724, "series": [{"data": [[1.71585234E12, 6.218289085545724], [1.7158524E12, 0.5209003215434082]], "isOverall": false, "label": "Create Issue User 650 Ramp 1", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7158524E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 67034.0, "minX": 1.71585234E12, "maxY": 135348.0, "series": [{"data": [[1.71585234E12, 112574.0], [1.7158524E12, 135348.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.71585234E12, 67034.0], [1.7158524E12, 114156.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.71585234E12, 106579.0], [1.7158524E12, 134249.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.71585234E12, 111838.20000000001], [1.7158524E12, 135271.6]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.71585234E12, 87948.0], [1.7158524E12, 131874.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.71585234E12, 108817.0], [1.7158524E12, 134739.8]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7158524E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 78899.5, "minX": 1.0, "maxY": 134831.0, "series": [{"data": [[8.0, 86972.5], [2.0, 86382.0], [34.0, 130369.0], [9.0, 96255.5], [36.0, 131262.0], [42.0, 133860.0], [44.0, 78899.5], [11.0, 107703.0], [46.0, 132177.5], [12.0, 101779.0], [3.0, 96067.0], [50.0, 105479.0], [13.0, 98587.0], [15.0, 94611.0], [1.0, 112127.0], [4.0, 114477.0], [17.0, 125224.0], [19.0, 79645.0], [5.0, 104023.0], [6.0, 108743.5], [25.0, 134831.0], [7.0, 96684.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 50.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 78899.5, "minX": 1.0, "maxY": 134830.0, "series": [{"data": [[8.0, 86972.5], [2.0, 86382.0], [34.0, 130369.0], [9.0, 96255.5], [36.0, 131262.0], [42.0, 133859.5], [44.0, 78899.5], [11.0, 107703.0], [46.0, 132177.5], [12.0, 101779.0], [3.0, 96066.0], [50.0, 105478.5], [13.0, 98587.0], [15.0, 94611.0], [1.0, 112126.5], [4.0, 114477.0], [17.0, 125224.0], [19.0, 79645.0], [5.0, 104022.5], [6.0, 108743.0], [25.0, 134830.0], [7.0, 96683.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 50.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 10.833333333333334, "minX": 1.71585228E12, "maxY": 10.833333333333334, "series": [{"data": [[1.71585228E12, 10.833333333333334]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71585228E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 5.183333333333334, "minX": 1.71585234E12, "maxY": 5.65, "series": [{"data": [[1.71585234E12, 5.65], [1.7158524E12, 5.183333333333334]], "isOverall": false, "label": "201", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7158524E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 5.183333333333334, "minX": 1.71585234E12, "maxY": 5.65, "series": [{"data": [[1.71585234E12, 5.65], [1.7158524E12, 5.183333333333334]], "isOverall": false, "label": "Create Issue User 650 Ramp 1-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7158524E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 5.183333333333334, "minX": 1.71585234E12, "maxY": 5.65, "series": [{"data": [[1.71585234E12, 5.65], [1.7158524E12, 5.183333333333334]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7158524E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

