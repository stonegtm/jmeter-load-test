/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 127584.0, "series": [{"data": [[0.0, 0.0], [0.1, 0.0], [0.2, 0.0], [0.3, 1.0], [0.4, 1.0], [0.5, 1.0], [0.6, 1.0], [0.7, 1.0], [0.8, 1.0], [0.9, 1.0], [1.0, 1.0], [1.1, 1.0], [1.2, 1.0], [1.3, 1.0], [1.4, 1.0], [1.5, 1.0], [1.6, 1.0], [1.7, 1.0], [1.8, 1.0], [1.9, 1.0], [2.0, 1.0], [2.1, 1.0], [2.2, 1.0], [2.3, 1.0], [2.4, 1.0], [2.5, 1.0], [2.6, 1.0], [2.7, 1.0], [2.8, 1.0], [2.9, 1.0], [3.0, 1.0], [3.1, 1.0], [3.2, 1.0], [3.3, 1.0], [3.4, 1.0], [3.5, 1.0], [3.6, 1.0], [3.7, 1.0], [3.8, 1.0], [3.9, 1.0], [4.0, 1.0], [4.1, 1.0], [4.2, 1.0], [4.3, 1.0], [4.4, 1.0], [4.5, 1.0], [4.6, 1.0], [4.7, 1.0], [4.8, 1.0], [4.9, 1.0], [5.0, 1.0], [5.1, 1.0], [5.2, 1.0], [5.3, 1.0], [5.4, 1.0], [5.5, 1.0], [5.6, 1.0], [5.7, 1.0], [5.8, 1.0], [5.9, 1.0], [6.0, 1.0], [6.1, 1.0], [6.2, 1.0], [6.3, 1.0], [6.4, 1.0], [6.5, 1.0], [6.6, 1.0], [6.7, 1.0], [6.8, 1.0], [6.9, 1.0], [7.0, 1.0], [7.1, 1.0], [7.2, 1.0], [7.3, 1.0], [7.4, 1.0], [7.5, 1.0], [7.6, 1.0], [7.7, 1.0], [7.8, 1.0], [7.9, 1.0], [8.0, 1.0], [8.1, 1.0], [8.2, 1.0], [8.3, 1.0], [8.4, 1.0], [8.5, 1.0], [8.6, 1.0], [8.7, 1.0], [8.8, 1.0], [8.9, 1.0], [9.0, 1.0], [9.1, 1.0], [9.2, 1.0], [9.3, 1.0], [9.4, 1.0], [9.5, 1.0], [9.6, 1.0], [9.7, 1.0], [9.8, 1.0], [9.9, 1.0], [10.0, 1.0], [10.1, 1.0], [10.2, 1.0], [10.3, 1.0], [10.4, 1.0], [10.5, 1.0], [10.6, 1.0], [10.7, 1.0], [10.8, 1.0], [10.9, 1.0], [11.0, 1.0], [11.1, 1.0], [11.2, 1.0], [11.3, 1.0], [11.4, 1.0], [11.5, 1.0], [11.6, 1.0], [11.7, 1.0], [11.8, 1.0], [11.9, 1.0], [12.0, 1.0], [12.1, 1.0], [12.2, 1.0], [12.3, 1.0], [12.4, 1.0], [12.5, 1.0], [12.6, 1.0], [12.7, 1.0], [12.8, 1.0], [12.9, 1.0], [13.0, 1.0], [13.1, 1.0], [13.2, 1.0], [13.3, 1.0], [13.4, 1.0], [13.5, 1.0], [13.6, 1.0], [13.7, 1.0], [13.8, 2.0], [13.9, 2.0], [14.0, 2.0], [14.1, 2.0], [14.2, 2.0], [14.3, 2.0], [14.4, 2.0], [14.5, 2.0], [14.6, 2.0], [14.7, 2.0], [14.8, 2.0], [14.9, 2.0], [15.0, 2.0], [15.1, 2.0], [15.2, 2.0], [15.3, 2.0], [15.4, 2.0], [15.5, 2.0], [15.6, 2.0], [15.7, 2.0], [15.8, 2.0], [15.9, 2.0], [16.0, 2.0], [16.1, 2.0], [16.2, 2.0], [16.3, 2.0], [16.4, 2.0], [16.5, 2.0], [16.6, 2.0], [16.7, 2.0], [16.8, 2.0], [16.9, 2.0], [17.0, 2.0], [17.1, 2.0], [17.2, 2.0], [17.3, 2.0], [17.4, 2.0], [17.5, 2.0], [17.6, 2.0], [17.7, 2.0], [17.8, 2.0], [17.9, 2.0], [18.0, 2.0], [18.1, 2.0], [18.2, 2.0], [18.3, 2.0], [18.4, 2.0], [18.5, 2.0], [18.6, 2.0], [18.7, 2.0], [18.8, 2.0], [18.9, 2.0], [19.0, 2.0], [19.1, 2.0], [19.2, 2.0], [19.3, 2.0], [19.4, 2.0], [19.5, 2.0], [19.6, 2.0], [19.7, 2.0], [19.8, 2.0], [19.9, 2.0], [20.0, 2.0], [20.1, 2.0], [20.2, 2.0], [20.3, 2.0], [20.4, 2.0], [20.5, 2.0], [20.6, 2.0], [20.7, 2.0], [20.8, 2.0], [20.9, 2.0], [21.0, 2.0], [21.1, 2.0], [21.2, 2.0], [21.3, 2.0], [21.4, 2.0], [21.5, 3.0], [21.6, 58238.0], [21.7, 58238.0], [21.8, 58280.0], [21.9, 58812.0], [22.0, 58834.0], [22.1, 58834.0], [22.2, 59818.0], [22.3, 59831.0], [22.4, 59831.0], [22.5, 59849.0], [22.6, 59897.0], [22.7, 59897.0], [22.8, 59923.0], [22.9, 59948.0], [23.0, 60281.0], [23.1, 60281.0], [23.2, 60898.0], [23.3, 61372.0], [23.4, 61372.0], [23.5, 61447.0], [23.6, 61537.0], [23.7, 61537.0], [23.8, 61605.0], [23.9, 62438.0], [24.0, 63225.0], [24.1, 63225.0], [24.2, 63695.0], [24.3, 64056.0], [24.4, 64056.0], [24.5, 65278.0], [24.6, 65439.0], [24.7, 65439.0], [24.8, 65554.0], [24.9, 65730.0], [25.0, 65956.0], [25.1, 65956.0], [25.2, 66008.0], [25.3, 66355.0], [25.4, 66355.0], [25.5, 66885.0], [25.6, 67012.0], [25.7, 67012.0], [25.8, 67545.0], [25.9, 67560.0], [26.0, 68349.0], [26.1, 68349.0], [26.2, 68488.0], [26.3, 68561.0], [26.4, 68561.0], [26.5, 68631.0], [26.6, 68837.0], [26.7, 68837.0], [26.8, 69347.0], [26.9, 69604.0], [27.0, 70888.0], [27.1, 70888.0], [27.2, 72198.0], [27.3, 72426.0], [27.4, 72426.0], [27.5, 72807.0], [27.6, 72884.0], [27.7, 72884.0], [27.8, 74146.0], [27.9, 74365.0], [28.0, 74518.0], [28.1, 74518.0], [28.2, 74563.0], [28.3, 74768.0], [28.4, 74768.0], [28.5, 75062.0], [28.6, 75442.0], [28.7, 75442.0], [28.8, 75493.0], [28.9, 75774.0], [29.0, 75898.0], [29.1, 75898.0], [29.2, 76040.0], [29.3, 76121.0], [29.4, 76121.0], [29.5, 76130.0], [29.6, 76253.0], [29.7, 76253.0], [29.8, 76475.0], [29.9, 76518.0], [30.0, 76780.0], [30.1, 76780.0], [30.2, 76784.0], [30.3, 76893.0], [30.4, 76893.0], [30.5, 77213.0], [30.6, 77609.0], [30.7, 77609.0], [30.8, 77700.0], [30.9, 78986.0], [31.0, 79086.0], [31.1, 79086.0], [31.2, 79103.0], [31.3, 79111.0], [31.4, 79111.0], [31.5, 79122.0], [31.6, 79170.0], [31.7, 79170.0], [31.8, 79250.0], [31.9, 79384.0], [32.0, 79434.0], [32.1, 79434.0], [32.2, 79464.0], [32.3, 79484.0], [32.4, 79484.0], [32.5, 79587.0], [32.6, 79610.0], [32.7, 79610.0], [32.8, 79612.0], [32.9, 79644.0], [33.0, 79683.0], [33.1, 79683.0], [33.2, 79854.0], [33.3, 79864.0], [33.4, 79864.0], [33.5, 80017.0], [33.6, 80170.0], [33.7, 80170.0], [33.8, 80219.0], [33.9, 81458.0], [34.0, 81458.0], [34.1, 81505.0], [34.2, 81542.0], [34.3, 81670.0], [34.4, 81670.0], [34.5, 81708.0], [34.6, 81831.0], [34.7, 81831.0], [34.8, 81983.0], [34.9, 81989.0], [35.0, 81989.0], [35.1, 82005.0], [35.2, 82075.0], [35.3, 82127.0], [35.4, 82127.0], [35.5, 82209.0], [35.6, 82472.0], [35.7, 82472.0], [35.8, 82940.0], [35.9, 83041.0], [36.0, 83041.0], [36.1, 83082.0], [36.2, 83161.0], [36.3, 83311.0], [36.4, 83311.0], [36.5, 83325.0], [36.6, 83491.0], [36.7, 83491.0], [36.8, 83619.0], [36.9, 83684.0], [37.0, 83684.0], [37.1, 83727.0], [37.2, 83838.0], [37.3, 83850.0], [37.4, 83850.0], [37.5, 83884.0], [37.6, 83897.0], [37.7, 83897.0], [37.8, 83953.0], [37.9, 84009.0], [38.0, 84009.0], [38.1, 84054.0], [38.2, 84087.0], [38.3, 84091.0], [38.4, 84091.0], [38.5, 84112.0], [38.6, 84205.0], [38.7, 84205.0], [38.8, 84229.0], [38.9, 84285.0], [39.0, 84285.0], [39.1, 84340.0], [39.2, 84400.0], [39.3, 84508.0], [39.4, 84508.0], [39.5, 84678.0], [39.6, 84784.0], [39.7, 84784.0], [39.8, 84807.0], [39.9, 84812.0], [40.0, 84812.0], [40.1, 84903.0], [40.2, 85005.0], [40.3, 85500.0], [40.4, 85500.0], [40.5, 85590.0], [40.6, 85666.0], [40.7, 85666.0], [40.8, 85840.0], [40.9, 85850.0], [41.0, 85850.0], [41.1, 85898.0], [41.2, 85918.0], [41.3, 86038.0], [41.4, 86038.0], [41.5, 86040.0], [41.6, 86089.0], [41.7, 86089.0], [41.8, 86133.0], [41.9, 86137.0], [42.0, 86137.0], [42.1, 86169.0], [42.2, 86179.0], [42.3, 86205.0], [42.4, 86205.0], [42.5, 86257.0], [42.6, 86360.0], [42.7, 86360.0], [42.8, 86431.0], [42.9, 86468.0], [43.0, 86468.0], [43.1, 86711.0], [43.2, 86865.0], [43.3, 87387.0], [43.4, 87387.0], [43.5, 87466.0], [43.6, 87524.0], [43.7, 87524.0], [43.8, 87548.0], [43.9, 87798.0], [44.0, 87798.0], [44.1, 87881.0], [44.2, 87918.0], [44.3, 87938.0], [44.4, 87938.0], [44.5, 88021.0], [44.6, 88033.0], [44.7, 88033.0], [44.8, 88114.0], [44.9, 88187.0], [45.0, 88187.0], [45.1, 88224.0], [45.2, 88384.0], [45.3, 88490.0], [45.4, 88490.0], [45.5, 88542.0], [45.6, 88559.0], [45.7, 88559.0], [45.8, 88591.0], [45.9, 88609.0], [46.0, 88609.0], [46.1, 88628.0], [46.2, 88637.0], [46.3, 88853.0], [46.4, 88853.0], [46.5, 89079.0], [46.6, 89715.0], [46.7, 89715.0], [46.8, 90312.0], [46.9, 91262.0], [47.0, 91262.0], [47.1, 91391.0], [47.2, 91781.0], [47.3, 92312.0], [47.4, 92312.0], [47.5, 92402.0], [47.6, 92426.0], [47.7, 92426.0], [47.8, 92478.0], [47.9, 92747.0], [48.0, 92747.0], [48.1, 92927.0], [48.2, 93103.0], [48.3, 93152.0], [48.4, 93152.0], [48.5, 93436.0], [48.6, 93648.0], [48.7, 93648.0], [48.8, 93986.0], [48.9, 94048.0], [49.0, 94048.0], [49.1, 94070.0], [49.2, 94270.0], [49.3, 94415.0], [49.4, 94415.0], [49.5, 94544.0], [49.6, 94562.0], [49.7, 94562.0], [49.8, 94637.0], [49.9, 94655.0], [50.0, 94655.0], [50.1, 94844.0], [50.2, 94886.0], [50.3, 94954.0], [50.4, 94954.0], [50.5, 95013.0], [50.6, 95211.0], [50.7, 95211.0], [50.8, 95857.0], [50.9, 95926.0], [51.0, 95926.0], [51.1, 95954.0], [51.2, 95982.0], [51.3, 96189.0], [51.4, 96189.0], [51.5, 96244.0], [51.6, 96259.0], [51.7, 96259.0], [51.8, 96776.0], [51.9, 97021.0], [52.0, 97021.0], [52.1, 97113.0], [52.2, 97140.0], [52.3, 97194.0], [52.4, 97194.0], [52.5, 97317.0], [52.6, 97791.0], [52.7, 97791.0], [52.8, 97811.0], [52.9, 97841.0], [53.0, 97841.0], [53.1, 98013.0], [53.2, 98250.0], [53.3, 98612.0], [53.4, 98612.0], [53.5, 98856.0], [53.6, 99238.0], [53.7, 99238.0], [53.8, 100354.0], [53.9, 100618.0], [54.0, 100618.0], [54.1, 101769.0], [54.2, 101917.0], [54.3, 102051.0], [54.4, 102051.0], [54.5, 103557.0], [54.6, 105902.0], [54.7, 105902.0], [54.8, 107128.0], [54.9, 107224.0], [55.0, 107224.0], [55.1, 107552.0], [55.2, 107627.0], [55.3, 107751.0], [55.4, 107751.0], [55.5, 108016.0], [55.6, 108527.0], [55.7, 108527.0], [55.8, 109795.0], [55.9, 110138.0], [56.0, 110138.0], [56.1, 110519.0], [56.2, 111758.0], [56.3, 112193.0], [56.4, 112193.0], [56.5, 112228.0], [56.6, 112389.0], [56.7, 112389.0], [56.8, 112562.0], [56.9, 112583.0], [57.0, 112583.0], [57.1, 112999.0], [57.2, 113331.0], [57.3, 113373.0], [57.4, 113373.0], [57.5, 113617.0], [57.6, 113847.0], [57.7, 113847.0], [57.8, 114553.0], [57.9, 114762.0], [58.0, 114762.0], [58.1, 114793.0], [58.2, 116971.0], [58.3, 117204.0], [58.4, 117204.0], [58.5, 117449.0], [58.6, 117497.0], [58.7, 117497.0], [58.8, 117722.0], [58.9, 117872.0], [59.0, 117872.0], [59.1, 117997.0], [59.2, 118128.0], [59.3, 118674.0], [59.4, 118674.0], [59.5, 118686.0], [59.6, 118759.0], [59.7, 118759.0], [59.8, 118785.0], [59.9, 119013.0], [60.0, 119013.0], [60.1, 119162.0], [60.2, 119204.0], [60.3, 119511.0], [60.4, 119511.0], [60.5, 119531.0], [60.6, 119977.0], [60.7, 119977.0], [60.8, 120299.0], [60.9, 120413.0], [61.0, 120413.0], [61.1, 120424.0], [61.2, 120466.0], [61.3, 120477.0], [61.4, 120477.0], [61.5, 120481.0], [61.6, 120528.0], [61.7, 120528.0], [61.8, 120581.0], [61.9, 120683.0], [62.0, 120683.0], [62.1, 120708.0], [62.2, 120708.0], [62.3, 120729.0], [62.4, 120729.0], [62.5, 120735.0], [62.6, 120787.0], [62.7, 120787.0], [62.8, 120791.0], [62.9, 120870.0], [63.0, 120870.0], [63.1, 120945.0], [63.2, 121049.0], [63.3, 121082.0], [63.4, 121082.0], [63.5, 121133.0], [63.6, 121283.0], [63.7, 121283.0], [63.8, 121358.0], [63.9, 121642.0], [64.0, 121642.0], [64.1, 121703.0], [64.2, 121747.0], [64.3, 121924.0], [64.4, 121924.0], [64.5, 121981.0], [64.6, 122009.0], [64.7, 122009.0], [64.8, 122011.0], [64.9, 122087.0], [65.0, 122087.0], [65.1, 122156.0], [65.2, 122187.0], [65.3, 122214.0], [65.4, 122214.0], [65.5, 122227.0], [65.6, 122255.0], [65.7, 122255.0], [65.8, 122299.0], [65.9, 122389.0], [66.0, 122389.0], [66.1, 122455.0], [66.2, 122472.0], [66.3, 122572.0], [66.4, 122572.0], [66.5, 122588.0], [66.6, 122599.0], [66.7, 122599.0], [66.8, 122614.0], [66.9, 122659.0], [67.0, 122659.0], [67.1, 122807.0], [67.2, 122816.0], [67.3, 122839.0], [67.4, 122839.0], [67.5, 122854.0], [67.6, 122862.0], [67.7, 122862.0], [67.8, 122902.0], [67.9, 123025.0], [68.0, 123025.0], [68.1, 123042.0], [68.2, 123055.0], [68.3, 123086.0], [68.4, 123086.0], [68.5, 123151.0], [68.6, 123174.0], [68.7, 123174.0], [68.8, 123191.0], [68.9, 123234.0], [69.0, 123234.0], [69.1, 123282.0], [69.2, 123287.0], [69.3, 123307.0], [69.4, 123307.0], [69.5, 123311.0], [69.6, 123316.0], [69.7, 123316.0], [69.8, 123318.0], [69.9, 123393.0], [70.0, 123393.0], [70.1, 123399.0], [70.2, 123416.0], [70.3, 123422.0], [70.4, 123422.0], [70.5, 123428.0], [70.6, 123434.0], [70.7, 123434.0], [70.8, 123437.0], [70.9, 123446.0], [71.0, 123446.0], [71.1, 123492.0], [71.2, 123503.0], [71.3, 123538.0], [71.4, 123538.0], [71.5, 123539.0], [71.6, 123562.0], [71.7, 123562.0], [71.8, 123582.0], [71.9, 123610.0], [72.0, 123610.0], [72.1, 123641.0], [72.2, 123647.0], [72.3, 123679.0], [72.4, 123679.0], [72.5, 123741.0], [72.6, 123759.0], [72.7, 123759.0], [72.8, 123775.0], [72.9, 123809.0], [73.0, 123809.0], [73.1, 123837.0], [73.2, 123854.0], [73.3, 123896.0], [73.4, 123896.0], [73.5, 123898.0], [73.6, 123903.0], [73.7, 123903.0], [73.8, 123908.0], [73.9, 123925.0], [74.0, 123925.0], [74.1, 123933.0], [74.2, 123935.0], [74.3, 123969.0], [74.4, 123969.0], [74.5, 123988.0], [74.6, 123992.0], [74.7, 123992.0], [74.8, 124038.0], [74.9, 124045.0], [75.0, 124045.0], [75.1, 124053.0], [75.2, 124055.0], [75.3, 124061.0], [75.4, 124061.0], [75.5, 124091.0], [75.6, 124111.0], [75.7, 124111.0], [75.8, 124151.0], [75.9, 124156.0], [76.0, 124156.0], [76.1, 124166.0], [76.2, 124180.0], [76.3, 124182.0], [76.4, 124182.0], [76.5, 124207.0], [76.6, 124208.0], [76.7, 124208.0], [76.8, 124209.0], [76.9, 124220.0], [77.0, 124220.0], [77.1, 124258.0], [77.2, 124295.0], [77.3, 124321.0], [77.4, 124321.0], [77.5, 124328.0], [77.6, 124331.0], [77.7, 124331.0], [77.8, 124345.0], [77.9, 124347.0], [78.0, 124347.0], [78.1, 124379.0], [78.2, 124442.0], [78.3, 124445.0], [78.4, 124445.0], [78.5, 124460.0], [78.6, 124493.0], [78.7, 124493.0], [78.8, 124533.0], [78.9, 124551.0], [79.0, 124551.0], [79.1, 124588.0], [79.2, 124650.0], [79.3, 124662.0], [79.4, 124662.0], [79.5, 124684.0], [79.6, 124685.0], [79.7, 124685.0], [79.8, 124731.0], [79.9, 124735.0], [80.0, 124735.0], [80.1, 124782.0], [80.2, 124791.0], [80.3, 124792.0], [80.4, 124792.0], [80.5, 124849.0], [80.6, 124854.0], [80.7, 124854.0], [80.8, 124879.0], [80.9, 124905.0], [81.0, 124905.0], [81.1, 124906.0], [81.2, 124946.0], [81.3, 124952.0], [81.4, 124952.0], [81.5, 125001.0], [81.6, 125013.0], [81.7, 125013.0], [81.8, 125023.0], [81.9, 125030.0], [82.0, 125030.0], [82.1, 125035.0], [82.2, 125091.0], [82.3, 125108.0], [82.4, 125108.0], [82.5, 125130.0], [82.6, 125142.0], [82.7, 125142.0], [82.8, 125164.0], [82.9, 125166.0], [83.0, 125166.0], [83.1, 125181.0], [83.2, 125196.0], [83.3, 125249.0], [83.4, 125249.0], [83.5, 125252.0], [83.6, 125258.0], [83.7, 125258.0], [83.8, 125268.0], [83.9, 125301.0], [84.0, 125301.0], [84.1, 125350.0], [84.2, 125412.0], [84.3, 125417.0], [84.4, 125417.0], [84.5, 125446.0], [84.6, 125466.0], [84.7, 125466.0], [84.8, 125472.0], [84.9, 125487.0], [85.0, 125487.0], [85.1, 125500.0], [85.2, 125516.0], [85.3, 125525.0], [85.4, 125525.0], [85.5, 125591.0], [85.6, 125597.0], [85.7, 125597.0], [85.8, 125629.0], [85.9, 125635.0], [86.0, 125635.0], [86.1, 125660.0], [86.2, 125673.0], [86.3, 125724.0], [86.4, 125724.0], [86.5, 125738.0], [86.6, 125755.0], [86.7, 125755.0], [86.8, 125760.0], [86.9, 125769.0], [87.0, 125772.0], [87.1, 125772.0], [87.2, 125785.0], [87.3, 125788.0], [87.4, 125788.0], [87.5, 125812.0], [87.6, 125823.0], [87.7, 125823.0], [87.8, 125834.0], [87.9, 125854.0], [88.0, 125859.0], [88.1, 125859.0], [88.2, 125866.0], [88.3, 125895.0], [88.4, 125895.0], [88.5, 125908.0], [88.6, 125913.0], [88.7, 125913.0], [88.8, 125936.0], [88.9, 125953.0], [89.0, 125964.0], [89.1, 125964.0], [89.2, 126030.0], [89.3, 126098.0], [89.4, 126098.0], [89.5, 126136.0], [89.6, 126167.0], [89.7, 126167.0], [89.8, 126173.0], [89.9, 126175.0], [90.0, 126189.0], [90.1, 126189.0], [90.2, 126201.0], [90.3, 126236.0], [90.4, 126236.0], [90.5, 126242.0], [90.6, 126246.0], [90.7, 126246.0], [90.8, 126264.0], [90.9, 126266.0], [91.0, 126314.0], [91.1, 126314.0], [91.2, 126347.0], [91.3, 126354.0], [91.4, 126354.0], [91.5, 126385.0], [91.6, 126389.0], [91.7, 126389.0], [91.8, 126401.0], [91.9, 126401.0], [92.0, 126448.0], [92.1, 126448.0], [92.2, 126475.0], [92.3, 126478.0], [92.4, 126478.0], [92.5, 126504.0], [92.6, 126512.0], [92.7, 126512.0], [92.8, 126524.0], [92.9, 126569.0], [93.0, 126574.0], [93.1, 126574.0], [93.2, 126582.0], [93.3, 126594.0], [93.4, 126594.0], [93.5, 126620.0], [93.6, 126628.0], [93.7, 126628.0], [93.8, 126646.0], [93.9, 126672.0], [94.0, 126684.0], [94.1, 126684.0], [94.2, 126695.0], [94.3, 126779.0], [94.4, 126779.0], [94.5, 126792.0], [94.6, 126809.0], [94.7, 126809.0], [94.8, 126814.0], [94.9, 126836.0], [95.0, 126857.0], [95.1, 126857.0], [95.2, 126858.0], [95.3, 126916.0], [95.4, 126916.0], [95.5, 126922.0], [95.6, 126927.0], [95.7, 126927.0], [95.8, 126944.0], [95.9, 126979.0], [96.0, 127015.0], [96.1, 127015.0], [96.2, 127016.0], [96.3, 127046.0], [96.4, 127046.0], [96.5, 127052.0], [96.6, 127115.0], [96.7, 127115.0], [96.8, 127125.0], [96.9, 127179.0], [97.0, 127187.0], [97.1, 127187.0], [97.2, 127208.0], [97.3, 127219.0], [97.4, 127219.0], [97.5, 127239.0], [97.6, 127259.0], [97.7, 127259.0], [97.8, 127266.0], [97.9, 127277.0], [98.0, 127318.0], [98.1, 127318.0], [98.2, 127324.0], [98.3, 127331.0], [98.4, 127331.0], [98.5, 127333.0], [98.6, 127339.0], [98.7, 127339.0], [98.8, 127363.0], [98.9, 127403.0], [99.0, 127422.0], [99.1, 127422.0], [99.2, 127429.0], [99.3, 127468.0], [99.4, 127468.0], [99.5, 127508.0], [99.6, 127545.0], [99.7, 127545.0], [99.8, 127564.0], [99.9, 127584.0]], "isOverall": false, "label": "Create Issue User 700 Ramp 1", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 151.0, "series": [{"data": [[0.0, 151.0], [65900.0, 1.0], [67500.0, 2.0], [68300.0, 1.0], [74700.0, 1.0], [79500.0, 1.0], [81900.0, 2.0], [84300.0, 1.0], [85900.0, 1.0], [86700.0, 1.0], [87500.0, 2.0], [88300.0, 1.0], [92300.0, 1.0], [93100.0, 2.0], [93900.0, 1.0], [97100.0, 3.0], [100300.0, 1.0], [101900.0, 1.0], [103500.0, 1.0], [105900.0, 1.0], [107500.0, 1.0], [112300.0, 1.0], [114700.0, 2.0], [117900.0, 1.0], [118700.0, 2.0], [119500.0, 2.0], [121100.0, 1.0], [121900.0, 2.0], [123500.0, 5.0], [124300.0, 6.0], [125100.0, 7.0], [125900.0, 5.0], [126700.0, 2.0], [127500.0, 4.0], [61300.0, 1.0], [75400.0, 2.0], [76200.0, 1.0], [79400.0, 3.0], [80200.0, 1.0], [81800.0, 1.0], [85000.0, 1.0], [85800.0, 3.0], [83400.0, 1.0], [84200.0, 3.0], [87400.0, 1.0], [88200.0, 1.0], [89000.0, 1.0], [94600.0, 2.0], [96200.0, 2.0], [97000.0, 1.0], [97800.0, 2.0], [98600.0, 1.0], [112200.0, 1.0], [113800.0, 1.0], [117800.0, 1.0], [118600.0, 2.0], [120200.0, 1.0], [121000.0, 2.0], [122600.0, 2.0], [123400.0, 7.0], [124200.0, 6.0], [125000.0, 6.0], [125800.0, 7.0], [126600.0, 6.0], [127400.0, 4.0], [65700.0, 1.0], [72100.0, 1.0], [74500.0, 2.0], [76100.0, 2.0], [77700.0, 1.0], [79300.0, 1.0], [80100.0, 1.0], [81700.0, 1.0], [83300.0, 2.0], [84100.0, 1.0], [84900.0, 1.0], [87300.0, 1.0], [88100.0, 2.0], [89700.0, 1.0], [91300.0, 1.0], [92900.0, 1.0], [94500.0, 2.0], [96100.0, 1.0], [97700.0, 1.0], [101700.0, 1.0], [109700.0, 1.0], [110500.0, 1.0], [112100.0, 1.0], [112900.0, 1.0], [114500.0, 1.0], [116900.0, 1.0], [117700.0, 1.0], [120900.0, 1.0], [121700.0, 2.0], [122500.0, 3.0], [123300.0, 6.0], [124100.0, 6.0], [124900.0, 4.0], [125700.0, 8.0], [126500.0, 7.0], [127300.0, 6.0], [58800.0, 2.0], [60800.0, 1.0], [61600.0, 1.0], [62400.0, 1.0], [63200.0, 1.0], [63600.0, 1.0], [64000.0, 1.0], [65200.0, 1.0], [69600.0, 1.0], [68800.0, 1.0], [72800.0, 2.0], [77600.0, 1.0], [76000.0, 1.0], [76800.0, 1.0], [79200.0, 1.0], [80000.0, 1.0], [81600.0, 1.0], [82400.0, 1.0], [84000.0, 4.0], [84800.0, 2.0], [85600.0, 1.0], [86400.0, 2.0], [88000.0, 2.0], [88800.0, 1.0], [91200.0, 1.0], [93600.0, 1.0], [94400.0, 1.0], [95200.0, 1.0], [99200.0, 1.0], [107200.0, 1.0], [108000.0, 1.0], [113600.0, 1.0], [119200.0, 1.0], [120800.0, 1.0], [121600.0, 1.0], [122400.0, 2.0], [123200.0, 3.0], [124000.0, 6.0], [124800.0, 3.0], [125600.0, 4.0], [126400.0, 5.0], [127200.0, 6.0], [66300.0, 1.0], [74300.0, 1.0], [76700.0, 2.0], [79100.0, 4.0], [81500.0, 2.0], [85500.0, 2.0], [83100.0, 1.0], [83900.0, 1.0], [84700.0, 1.0], [86300.0, 1.0], [87900.0, 2.0], [90300.0, 1.0], [92700.0, 1.0], [95900.0, 3.0], [96700.0, 1.0], [107100.0, 1.0], [119100.0, 1.0], [119900.0, 1.0], [120700.0, 6.0], [122300.0, 1.0], [123100.0, 3.0], [123900.0, 8.0], [124700.0, 5.0], [125500.0, 5.0], [126300.0, 5.0], [127100.0, 4.0], [59900.0, 2.0], [61500.0, 1.0], [65500.0, 1.0], [67000.0, 1.0], [68600.0, 1.0], [75000.0, 1.0], [75800.0, 1.0], [79800.0, 2.0], [79000.0, 1.0], [81400.0, 1.0], [82200.0, 1.0], [83000.0, 2.0], [83800.0, 4.0], [84600.0, 1.0], [86200.0, 2.0], [87800.0, 1.0], [88600.0, 3.0], [93400.0, 1.0], [94200.0, 1.0], [95000.0, 1.0], [95800.0, 1.0], [98200.0, 1.0], [100600.0, 1.0], [117400.0, 2.0], [119000.0, 1.0], [120600.0, 1.0], [122200.0, 4.0], [123000.0, 4.0], [123800.0, 5.0], [124600.0, 4.0], [125400.0, 6.0], [126200.0, 6.0], [127000.0, 4.0], [69300.0, 1.0], [68500.0, 1.0], [74100.0, 1.0], [75700.0, 1.0], [76500.0, 1.0], [78900.0, 1.0], [82100.0, 1.0], [82900.0, 1.0], [83700.0, 1.0], [84500.0, 1.0], [86100.0, 4.0], [87700.0, 1.0], [88500.0, 3.0], [91700.0, 1.0], [94900.0, 1.0], [97300.0, 1.0], [107700.0, 1.0], [108500.0, 1.0], [110100.0, 1.0], [111700.0, 1.0], [112500.0, 2.0], [113300.0, 2.0], [118100.0, 1.0], [120500.0, 2.0], [121300.0, 1.0], [122100.0, 2.0], [122900.0, 1.0], [123700.0, 3.0], [124500.0, 3.0], [125300.0, 2.0], [126100.0, 5.0], [126900.0, 5.0], [58200.0, 2.0], [59800.0, 4.0], [60200.0, 1.0], [61400.0, 1.0], [65400.0, 1.0], [66000.0, 1.0], [66800.0, 1.0], [68400.0, 1.0], [70800.0, 1.0], [72400.0, 1.0], [76400.0, 1.0], [77200.0, 1.0], [79600.0, 4.0], [82000.0, 2.0], [83600.0, 2.0], [84400.0, 1.0], [86000.0, 3.0], [86800.0, 1.0], [88400.0, 1.0], [92400.0, 3.0], [94000.0, 2.0], [94800.0, 2.0], [98000.0, 1.0], [98800.0, 1.0], [102000.0, 1.0], [107600.0, 1.0], [117200.0, 1.0], [120400.0, 5.0], [121200.0, 1.0], [122000.0, 3.0], [122800.0, 5.0], [123600.0, 4.0], [124400.0, 4.0], [125200.0, 4.0], [126000.0, 2.0], [126800.0, 5.0]], "isOverall": false, "label": "Create Issue User 700 Ramp 1", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 127500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 151.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 549.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 549.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 151.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 187.0, "minX": 1.71585252E12, "maxY": 625.8344370860927, "series": [{"data": [[1.71585252E12, 625.8344370860927], [1.71585264E12, 187.0], [1.71585258E12, 461.5]], "isOverall": false, "label": "User 700 Ramp 1", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71585264E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 127584.0, "series": [{"data": [[2.0, 127564.0], [3.0, 127545.0], [4.0, 127508.0], [5.0, 127422.0], [6.0, 127403.0], [7.0, 127468.0], [8.0, 127363.0], [9.0, 127429.0], [10.0, 127331.0], [11.0, 127333.0], [12.0, 127266.0], [13.0, 127277.0], [14.0, 127318.0], [15.0, 127239.0], [16.0, 127339.0], [17.0, 127259.0], [18.0, 127219.0], [19.0, 127179.0], [20.0, 127187.0], [21.0, 127125.0], [22.0, 127052.0], [23.0, 127015.0], [24.0, 127324.0], [25.0, 127115.0], [26.0, 127016.0], [27.0, 126979.0], [28.0, 126944.0], [29.0, 127046.0], [30.0, 127208.0], [31.0, 126916.0], [33.0, 126927.0], [32.0, 126836.0], [35.0, 126922.0], [34.0, 126857.0], [37.0, 126779.0], [36.0, 126792.0], [39.0, 126809.0], [38.0, 126858.0], [41.0, 126672.0], [40.0, 126814.0], [43.0, 126628.0], [42.0, 126695.0], [45.0, 126646.0], [44.0, 126582.0], [47.0, 126620.0], [46.0, 126574.0], [49.0, 126524.0], [48.0, 126569.0], [51.0, 126512.0], [50.0, 126594.0], [53.0, 126448.0], [52.0, 126478.0], [55.0, 126401.0], [54.0, 126504.0], [57.0, 126389.0], [56.0, 126475.0], [59.0, 126401.0], [58.0, 126684.0], [61.0, 126385.0], [60.0, 126347.0], [63.0, 126201.0], [62.0, 126266.0], [67.0, 126136.0], [66.0, 126175.0], [65.0, 126189.0], [64.0, 126242.0], [71.0, 126030.0], [70.0, 126098.0], [69.0, 126167.0], [68.0, 126236.0], [75.0, 126246.0], [74.0, 125964.0], [73.0, 126314.0], [72.0, 126354.0], [79.0, 126173.0], [78.0, 125913.0], [77.0, 125953.0], [76.0, 126264.0], [83.0, 125854.0], [82.0, 125866.0], [81.0, 125908.0], [80.0, 125895.0], [87.0, 125738.0], [86.0, 125788.0], [85.0, 125834.0], [84.0, 125769.0], [91.0, 125635.0], [90.0, 125660.0], [89.0, 125673.0], [88.0, 125760.0], [95.0, 125859.0], [94.0, 125591.0], [93.0, 125629.0], [92.0, 125936.0], [99.0, 125772.0], [98.0, 125785.0], [97.0, 125823.0], [96.0, 125812.0], [103.0, 125755.0], [102.0, 125500.0], [101.0, 125525.0], [100.0, 125724.0], [107.0, 125350.0], [106.0, 125597.0], [105.0, 125301.0], [104.0, 125412.0], [111.0, 125466.0], [110.0, 125249.0], [109.0, 125258.0], [108.0, 125516.0], [115.0, 125446.0], [114.0, 125196.0], [113.0, 125417.0], [112.0, 125487.0], [119.0, 125108.0], [118.0, 125142.0], [117.0, 125472.0], [116.0, 125166.0], [123.0, 125252.0], [122.0, 124946.0], [121.0, 125013.0], [120.0, 125023.0], [127.0, 125130.0], [126.0, 125164.0], [125.0, 125181.0], [124.0, 125268.0], [135.0, 124952.0], [134.0, 125030.0], [133.0, 124735.0], [132.0, 124731.0], [131.0, 125091.0], [130.0, 124906.0], [129.0, 124879.0], [128.0, 124849.0], [143.0, 124551.0], [142.0, 124792.0], [141.0, 124854.0], [140.0, 124905.0], [139.0, 125001.0], [138.0, 124650.0], [137.0, 124662.0], [136.0, 125035.0], [151.0, 124331.0], [150.0, 124460.0], [149.0, 124685.0], [148.0, 124684.0], [147.0, 124493.0], [146.0, 124782.0], [145.0, 124791.0], [144.0, 124445.0], [159.0, 124442.0], [158.0, 124220.0], [157.0, 124207.0], [156.0, 124588.0], [155.0, 124321.0], [154.0, 124533.0], [153.0, 124379.0], [152.0, 124328.0], [167.0, 124347.0], [166.0, 124258.0], [165.0, 124061.0], [164.0, 124055.0], [163.0, 124151.0], [162.0, 124156.0], [161.0, 124208.0], [160.0, 124180.0], [175.0, 123896.0], [174.0, 124182.0], [173.0, 124209.0], [172.0, 124166.0], [171.0, 123992.0], [170.0, 124345.0], [169.0, 124045.0], [168.0, 124295.0], [183.0, 123988.0], [182.0, 124038.0], [181.0, 123775.0], [180.0, 123837.0], [179.0, 124091.0], [178.0, 123809.0], [177.0, 124111.0], [176.0, 124053.0], [191.0, 123854.0], [190.0, 123903.0], [189.0, 123898.0], [188.0, 123935.0], [187.0, 123908.0], [186.0, 123933.0], [185.0, 123925.0], [184.0, 123969.0], [199.0, 123610.0], [198.0, 123759.0], [197.0, 123422.0], [196.0, 123399.0], [195.0, 123679.0], [194.0, 123562.0], [193.0, 123741.0], [192.0, 123492.0], [207.0, 123446.0], [206.0, 123538.0], [205.0, 123503.0], [204.0, 123539.0], [203.0, 123282.0], [202.0, 123641.0], [201.0, 123582.0], [200.0, 123647.0], [215.0, 123434.0], [214.0, 123416.0], [213.0, 123151.0], [212.0, 123393.0], [211.0, 123437.0], [210.0, 123174.0], [209.0, 123428.0], [208.0, 123191.0], [223.0, 123042.0], [222.0, 123055.0], [221.0, 123287.0], [220.0, 123234.0], [219.0, 123318.0], [218.0, 123316.0], [217.0, 123307.0], [216.0, 123311.0], [231.0, 122472.0], [230.0, 122839.0], [229.0, 122862.0], [228.0, 122854.0], [227.0, 122816.0], [226.0, 122902.0], [225.0, 123086.0], [224.0, 123025.0], [239.0, 122389.0], [238.0, 122455.0], [237.0, 122588.0], [236.0, 122572.0], [235.0, 122599.0], [234.0, 122659.0], [233.0, 122807.0], [232.0, 122614.0], [247.0, 122214.0], [246.0, 122011.0], [245.0, 122087.0], [244.0, 122156.0], [243.0, 122299.0], [242.0, 122227.0], [241.0, 122187.0], [240.0, 122255.0], [255.0, 121283.0], [254.0, 121358.0], [253.0, 121703.0], [252.0, 121642.0], [251.0, 121747.0], [250.0, 121924.0], [249.0, 122009.0], [248.0, 121981.0], [270.0, 120528.0], [271.0, 120477.0], [269.0, 120299.0], [268.0, 120708.0], [267.0, 120683.0], [266.0, 120729.0], [265.0, 120708.0], [264.0, 120735.0], [263.0, 120787.0], [257.0, 121049.0], [256.0, 121133.0], [259.0, 120945.0], [258.0, 121082.0], [262.0, 120466.0], [261.0, 120870.0], [260.0, 120791.0], [286.0, 118128.0], [287.0, 117997.0], [285.0, 118686.0], [284.0, 118674.0], [283.0, 118759.0], [282.0, 118785.0], [281.0, 119013.0], [280.0, 119162.0], [279.0, 119204.0], [273.0, 120424.0], [272.0, 120481.0], [275.0, 120413.0], [274.0, 120581.0], [278.0, 119511.0], [277.0, 119531.0], [276.0, 119977.0], [302.0, 112583.0], [303.0, 112562.0], [301.0, 112999.0], [300.0, 113331.0], [299.0, 113373.0], [298.0, 113617.0], [297.0, 113847.0], [296.0, 114553.0], [295.0, 114793.0], [289.0, 117722.0], [288.0, 117872.0], [291.0, 117449.0], [290.0, 117497.0], [294.0, 114762.0], [293.0, 116971.0], [292.0, 117204.0], [318.0, 105902.0], [319.0, 103557.0], [317.0, 107128.0], [316.0, 107224.0], [315.0, 107552.0], [314.0, 107751.0], [313.0, 107627.0], [312.0, 108016.0], [311.0, 108527.0], [305.0, 112228.0], [304.0, 112389.0], [307.0, 111758.0], [306.0, 112193.0], [310.0, 109795.0], [309.0, 110138.0], [308.0, 110519.0], [334.0, 97140.0], [335.0, 97194.0], [333.0, 97317.0], [332.0, 97791.0], [331.0, 97811.0], [330.0, 97841.0], [329.0, 98013.0], [328.0, 98250.0], [327.0, 98612.0], [321.0, 101917.0], [320.0, 102051.0], [323.0, 100618.0], [322.0, 101769.0], [326.0, 98856.0], [325.0, 99238.0], [324.0, 100354.0], [350.0, 94844.0], [351.0, 94637.0], [349.0, 94886.0], [348.0, 94954.0], [347.0, 95013.0], [346.0, 95211.0], [345.0, 95857.0], [344.0, 95954.0], [343.0, 95926.0], [337.0, 97021.0], [336.0, 97113.0], [339.0, 96259.0], [338.0, 96776.0], [342.0, 95982.0], [341.0, 96189.0], [340.0, 96244.0], [366.0, 92478.0], [367.0, 92426.0], [365.0, 92747.0], [364.0, 92927.0], [363.0, 93152.0], [362.0, 93103.0], [361.0, 93436.0], [360.0, 93648.0], [359.0, 94048.0], [353.0, 94655.0], [352.0, 94544.0], [355.0, 94415.0], [354.0, 94562.0], [358.0, 93986.0], [357.0, 94070.0], [356.0, 94270.0], [382.0, 88542.0], [383.0, 88490.0], [381.0, 88559.0], [380.0, 88591.0], [379.0, 88628.0], [378.0, 88609.0], [377.0, 88637.0], [376.0, 88853.0], [375.0, 89079.0], [369.0, 92312.0], [368.0, 92402.0], [371.0, 91391.0], [370.0, 91781.0], [374.0, 89715.0], [373.0, 90312.0], [372.0, 91262.0], [398.0, 86865.0], [399.0, 86711.0], [397.0, 87387.0], [396.0, 87466.0], [395.0, 87524.0], [394.0, 87548.0], [393.0, 87798.0], [392.0, 87918.0], [391.0, 87938.0], [385.0, 88187.0], [384.0, 88384.0], [387.0, 88114.0], [386.0, 88224.0], [390.0, 87881.0], [389.0, 88021.0], [388.0, 88033.0], [414.0, 85840.0], [415.0, 85850.0], [413.0, 85898.0], [412.0, 85918.0], [411.0, 86038.0], [410.0, 86040.0], [409.0, 86089.0], [408.0, 86137.0], [407.0, 86133.0], [401.0, 86431.0], [400.0, 86468.0], [403.0, 86205.0], [402.0, 86360.0], [406.0, 86169.0], [405.0, 86179.0], [404.0, 86257.0], [430.0, 84205.0], [431.0, 84091.0], [429.0, 84229.0], [428.0, 84285.0], [427.0, 84340.0], [426.0, 84400.0], [425.0, 84508.0], [424.0, 84678.0], [423.0, 84784.0], [417.0, 85590.0], [416.0, 85666.0], [419.0, 85005.0], [418.0, 85500.0], [422.0, 84812.0], [421.0, 84807.0], [420.0, 84903.0], [446.0, 83311.0], [447.0, 83161.0], [445.0, 83325.0], [444.0, 83491.0], [443.0, 83619.0], [442.0, 83727.0], [441.0, 83684.0], [440.0, 83884.0], [439.0, 83897.0], [433.0, 84087.0], [432.0, 84112.0], [435.0, 84009.0], [434.0, 84054.0], [438.0, 83838.0], [437.0, 83850.0], [436.0, 83953.0], [462.0, 81505.0], [463.0, 81458.0], [461.0, 81542.0], [460.0, 81670.0], [459.0, 81708.0], [458.0, 81831.0], [457.0, 81989.0], [456.0, 81983.0], [455.0, 82075.0], [449.0, 83041.0], [448.0, 83082.0], [451.0, 82472.0], [450.0, 82940.0], [454.0, 82005.0], [453.0, 82127.0], [452.0, 82209.0], [478.0, 79384.0], [479.0, 79111.0], [477.0, 79434.0], [476.0, 79484.0], [475.0, 79464.0], [474.0, 79587.0], [473.0, 79612.0], [472.0, 79683.0], [471.0, 79250.0], [465.0, 80017.0], [464.0, 80170.0], [467.0, 79610.0], [466.0, 80219.0], [470.0, 79854.0], [469.0, 79864.0], [468.0, 79644.0], [494.0, 75898.0], [495.0, 76121.0], [493.0, 76253.0], [492.0, 76518.0], [491.0, 76475.0], [490.0, 76780.0], [489.0, 76784.0], [488.0, 76893.0], [487.0, 77609.0], [481.0, 79122.0], [480.0, 79170.0], [483.0, 79086.0], [482.0, 79103.0], [486.0, 77213.0], [485.0, 77700.0], [484.0, 78986.0], [510.0, 72198.0], [511.0, 70888.0], [509.0, 72426.0], [508.0, 72807.0], [507.0, 72884.0], [506.0, 74146.0], [505.0, 74365.0], [504.0, 74518.0], [503.0, 74563.0], [497.0, 76040.0], [496.0, 76130.0], [499.0, 75442.0], [498.0, 75774.0], [502.0, 74768.0], [501.0, 75062.0], [500.0, 75493.0], [540.0, 59897.0], [543.0, 59849.0], [529.0, 65278.0], [528.0, 65439.0], [531.0, 63695.0], [530.0, 64056.0], [533.0, 62438.0], [532.0, 63225.0], [542.0, 59923.0], [541.0, 59948.0], [539.0, 60281.0], [538.0, 60898.0], [537.0, 61372.0], [536.0, 61447.0], [527.0, 65554.0], [513.0, 69347.0], [512.0, 69604.0], [515.0, 68631.0], [514.0, 68837.0], [517.0, 68488.0], [516.0, 68561.0], [519.0, 67545.0], [518.0, 68349.0], [526.0, 65730.0], [525.0, 65956.0], [524.0, 66008.0], [523.0, 66355.0], [522.0, 66885.0], [521.0, 67012.0], [520.0, 67560.0], [535.0, 61537.0], [534.0, 61605.0], [569.0, 2.0], [574.0, 1.5], [575.0, 1.0], [562.0, 1.5], [561.0, 2.0], [572.0, 1.0], [571.0, 0.0], [570.0, 1.0], [568.0, 1.3333333333333333], [551.0, 1.5], [549.0, 58812.0], [548.0, 58238.0], [547.0, 58834.0], [546.0, 58280.0], [545.0, 59818.0], [544.0, 59831.0], [559.0, 2.0], [558.0, 1.5], [554.0, 2.0], [565.0, 1.0], [564.0, 1.0], [600.0, 1.0], [596.0, 1.0], [607.0, 2.0], [606.0, 1.25], [602.0, 1.0], [591.0, 1.0], [576.0, 1.0], [580.0, 2.0], [579.0, 1.0], [582.0, 1.0], [581.0, 1.0], [590.0, 1.0], [587.0, 1.0], [586.0, 1.0], [585.0, 1.0], [584.0, 1.0], [599.0, 1.0], [598.0, 1.0], [597.0, 1.0], [594.0, 1.0], [592.0, 2.0], [638.0, 1.0], [639.0, 1.0], [625.0, 1.0], [624.0, 1.0], [637.0, 2.0], [635.0, 1.5], [634.0, 1.0], [632.0, 2.0], [623.0, 1.3333333333333333], [609.0, 1.5], [611.0, 2.0], [610.0, 2.0], [615.0, 2.0], [612.0, 2.0], [620.0, 1.6666666666666667], [618.0, 2.0], [616.0, 2.0], [630.0, 2.0], [628.0, 1.0], [627.0, 1.0], [626.0, 1.0], [659.0, 1.0], [667.0, 1.0], [670.0, 1.0], [657.0, 1.6666666666666667], [666.0, 1.0], [665.0, 1.0], [664.0, 1.0], [646.0, 2.0], [643.0, 1.0], [642.0, 1.0], [641.0, 1.0], [654.0, 1.0], [653.0, 1.0], [652.0, 1.0], [651.0, 2.0], [648.0, 2.0], [663.0, 1.0], [661.0, 1.0], [660.0, 1.0], [687.0, 1.0], [700.0, 1.2000000000000002], [695.0, 1.0], [689.0, 1.5], [686.0, 1.0], [685.0, 1.6666666666666667], [682.0, 1.5], [680.0, 2.0], [679.0, 2.0], [677.0, 1.0], [675.0, 1.0], [674.0, 1.0], [672.0, 1.5], [1.0, 127584.0]], "isOverall": false, "label": "Create Issue User 700 Ramp 1", "isController": false}, {"data": [[350.68000000000023, 83226.45142857147]], "isOverall": false, "label": "Create Issue User 700 Ramp 1-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 700.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.71585252E12, "maxY": 18134.016666666666, "series": [{"data": [[1.71585252E12, 6621.35], [1.71585264E12, 18134.016666666666], [1.71585258E12, 7204.6]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.71585252E12, 0.0], [1.71585264E12, 10381.833333333334], [1.71585258E12, 4898.666666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71585264E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1.357615894039735, "minX": 1.71585252E12, "maxY": 119175.41554959782, "series": [{"data": [[1.71585252E12, 1.357615894039735], [1.71585264E12, 119175.41554959782], [1.71585258E12, 78442.50568181823]], "isOverall": false, "label": "Create Issue User 700 Ramp 1", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71585264E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.71585252E12, "maxY": 119175.22252010727, "series": [{"data": [[1.71585252E12, 0.0], [1.71585264E12, 119175.22252010727], [1.71585258E12, 78442.20454545454]], "isOverall": false, "label": "Create Issue User 700 Ramp 1", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71585264E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1.3112582781456958, "minX": 1.71585252E12, "maxY": 57.312499999999964, "series": [{"data": [[1.71585252E12, 1.3112582781456958], [1.71585264E12, 9.782841823056314], [1.71585258E12, 57.312499999999964]], "isOverall": false, "label": "Create Issue User 700 Ramp 1", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71585264E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 58238.0, "minX": 1.71585258E12, "maxY": 127584.0, "series": [{"data": [[1.71585264E12, 127584.0], [1.71585258E12, 89715.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.71585264E12, 90312.0], [1.71585258E12, 58238.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.71585264E12, 126812.0], [1.71585258E12, 87924.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.71585264E12, 127517.62], [1.71585258E12, 89225.28]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.71585264E12, 123896.0], [1.71585258E12, 81523.5]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.71585264E12, 127225.0], [1.71585258E12, 88544.55]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71585264E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1.0, "minX": 1.0, "maxY": 125876.5, "series": [{"data": [[2.0, 95123.5], [8.0, 84954.0], [9.0, 94415.0], [10.0, 83318.0], [46.0, 125876.5], [47.0, 125834.0], [3.0, 89079.0], [49.0, 123969.0], [14.0, 79317.0], [4.0, 67954.5], [1.0, 90312.0], [16.0, 124471.0], [17.0, 87254.5], [5.0, 93661.0], [6.0, 93127.5], [7.0, 79864.0], [31.0, 123174.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[151.0, 1.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 151.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 125876.5, "series": [{"data": [[2.0, 95123.0], [8.0, 84953.5], [9.0, 94414.0], [10.0, 83318.0], [46.0, 125876.5], [47.0, 125834.0], [3.0, 89079.0], [49.0, 123969.0], [14.0, 79316.5], [4.0, 67954.0], [1.0, 90312.0], [16.0, 124471.0], [17.0, 87254.5], [5.0, 93660.5], [6.0, 93127.0], [7.0, 79864.0], [31.0, 123174.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[151.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 151.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 11.666666666666666, "minX": 1.71585252E12, "maxY": 11.666666666666666, "series": [{"data": [[1.71585252E12, 11.666666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71585252E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 2.5166666666666666, "minX": 1.71585252E12, "maxY": 6.216666666666667, "series": [{"data": [[1.71585264E12, 6.216666666666667], [1.71585258E12, 2.933333333333333]], "isOverall": false, "label": "201", "isController": false}, {"data": [[1.71585252E12, 2.5166666666666666]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.HttpHostConnectException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71585264E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 2.5166666666666666, "minX": 1.71585252E12, "maxY": 6.216666666666667, "series": [{"data": [[1.71585252E12, 2.5166666666666666]], "isOverall": false, "label": "Create Issue User 700 Ramp 1-failure", "isController": false}, {"data": [[1.71585264E12, 6.216666666666667], [1.71585258E12, 2.933333333333333]], "isOverall": false, "label": "Create Issue User 700 Ramp 1-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71585264E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 2.5166666666666666, "minX": 1.71585252E12, "maxY": 6.216666666666667, "series": [{"data": [[1.71585264E12, 6.216666666666667], [1.71585258E12, 2.933333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.71585252E12, 2.5166666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71585264E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

